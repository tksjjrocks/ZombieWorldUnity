//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zombie World: Unity
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_maxSpawnsPerSide = 75;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_PlayerData {
    int lv_class;
    int lv_timerWindow;
    unit lv_permanentHeroChoice;
    bool lv_damageNumbersToggler;
    int lv_dMTag;
    bool lv_killReducerApplied;
    bool lv_cLInfantry;
    bool lv_cLTeamGame;
    bool lv_cLConstructor;
    bool lv_cLEvasive;
    bool lv_cLTorture;
    int lv_killValue;
    bool lv_unlockaHerotruefalse;
    bool lv_hydraliskYours;
    unit lv_hero;
    int lv_kills;
    int lv_tankKills;
    int lv_supportKills;
    int lv_specialistKills;
    int lv_splashKills;
    int lv_asassinKills;
    int lv_singleTargetKills;
    int lv_builderKills;
    int lv_highestWave;
    int lv_deaths;
    bank lv_playerBank;
    bool lv_hasNothingStopsNow;
    fixed lv_paragonExperience;
    int lv_paragonLevel;
    int lv_marineLevel;
    int lv_sniperLevel;
    int lv_fSniperLevel;
    int lv_spectreLevel;
    int lv_firebatLevel;
    int lv_reaperLevel;
    int lv_darkArchonLevel;
    int lv_cycloneLevel;
    int lv_stalkerLevel;
    int lv_adeptLevel;
    int lv_zealotLevel;
    int lv_hellionLevel;
    int lv_medicLevel;
    int lv_thorLevel;
    int lv_sentryLevel;
    int lv_colossusLevel;
    int lv_immortalLevel;
    int lv_dTLevel;
    int lv_tankLevel;
    int lv_dragoonLevel;
    int lv_goliathLevel;
    int lv_joeLevel;
    int lv_reaverLevel;
    int lv_highTemplarLevel;
    int lv_motorCycleLevel;
    int lv_warpPrismLevel;
    int lv_necromancerLevel;
    int lv_johnsonLevel;
    int lv_carrierLevelHelper;
    int lv_tempestLevel;
    int lv_carrierLevel;
    int lv_artanisLevel;
    int lv_marineStage;
    int lv_medicStage;
    int lv_reaperStage;
    int lv_immortalStage;
    int lv_thorStage;
    int lv_stalkerStage;
    int lv_spectreStage;
    int lv_colossusStage;
    int lv_dTStage;
    int lv_sniperStage;
    int lv_siegeTankStage;
    int lv_highTemplarStage;
    int lv_vultureStage;
    int lv_metalManStage;
    int lv_voidRayStage;
    int lv_warMachineStage;
    int lv_tempestStage;
    int lv_sentryStage;
    int lv_hybridStage;
    int lv_damagePoints;
    int lv_moveSpeedPoints;
    int lv_energyPoints;
    int lv_energyRegenPoints;
    int lv_cooldownPoints;
    int lv_lifePoints;
    int lv_lifeArmorBonusPoints;
    int lv_shieldArmorBonusPoints;
    int lv_shieldArmorMultiplyPoints;
    int lv_lifeArmorMultiplyPoints;
    int lv_damageReductionPoints;
    int lv_mineralStartPoints;
    int lv_vespeneStartPoints;
    int lv_lifeRegenPoints;
    int lv_respawnTimerPoints;
    int lv_shieldPoints;
    int lv_shieldRegenPoints;
    int lv_expPoints;
    int lv_masteryPoints;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_leftBoss1;
int gv_leftBossDeaths;
unit gv_rightBoss1;
int gv_rightBossDeaths;
int gv_showHideStatsOnOff2;
int[3] gv_showHideStats;
int[4] gv_statsMenu;
int[3] gv_menuText;
int[3] gv_damageText;
int[3] gv_damageCount;
int[4] gv_addDamage;
int[4] gv_subtractDamage;
int[3] gv_moveSpeedText;
int[3] gv_moveSpeedCount;
int[4] gv_addMoveSpeed;
int[4] gv_subtractMoveSpeed;
int[3] gv_energyText;
int[3] gv_energyCount;
int[4] gv_addEnergy;
int[4] gv_subtractEnergy;
int[3] gv_energyRegenText;
int[3] gv_energyRegenCount;
int[4] gv_addEnergyRegen;
int[4] gv_subtractEnergyRegen;
int[3] gv_cooldownText;
int[3] gv_cooldownCount;
int[4] gv_addCooldown;
int[4] gv_subtractCooldown;
int[3] gv_lifeArmorText;
int[3] gv_lifeArmorCount;
int[4] gv_addLifeArmor;
int[4] gv_subtractLifeArmor;
int[3] gv_shieldArmorText;
int[3] gv_shieldArmorCount;
int[4] gv_addShieldArmor;
int[4] gv_subtractShieldArmor;
int[3] gv_shieldArmorMultiplierText;
int[3] gv_shieldArmorMultiplierCount;
int[4] gv_addShieldArmorMultiplier;
int[4] gv_subtractShieldArmorMultiplier;
int[3] gv_xpText;
int[3] gv_xpCount;
int[4] gv_addXp;
int[4] gv_subtractXp;
int[3] gv_masteryText;
int[3] gv_masterCount;
int[4] gv_addMastery;
int[4] gv_subtractMastery;
int[3] gv_damageReductionText;
int[3] gv_damageReductionCount;
int[4] gv_addDamageReduction;
int[4] gv_subtractDamageReduction;
int[3] gv_lifeArmorMultiplierText;
int[3] gv_lifeArmorMultiplierCount;
int[4] gv_addLifeArmorMultiplier;
int[4] gv_subtractLifeArmorMultiplier;
int[3] gv_lifeText;
int[3] gv_lifeCount;
int[4] gv_addLife;
int[4] gv_subtractLife;
int[3] gv_shieldText;
int[3] gv_shieldCount;
int[4] gv_addShield;
int[4] gv_subtractShield;
int[3] gv_shieldRegenText;
int[3] gv_shieldRegenCount;
int[4] gv_addShieldRegen;
int[4] gv_subtractShieldRegen;
int[3] gv_mineralStartText;
int[3] gv_mineralStartCount;
int[4] gv_addMineralStart;
int[3] gv_vespeneStartText;
int[3] gv_vespeneStartCount;
int[4] gv_addVespeneStart;
int[3] gv_respawnTimeText;
int[3] gv_respawnTimeCount;
int[4] gv_addRespawnTime;
int[3] gv_lifeRegenText;
int[3] gv_lifeRegenCount;
int[4] gv_addLifeRegen;
int[4] gv_subtractLifeRegen;
int gv_killMultiplier;
int[9] gv_upgrade1Count;
int[9] gv_upgrade2Count;
int[9] gv_upgrade3Count;
int[9] gv_upgrade4Count;
int[9] gv_upgrade5Count;
int[9] gv_upgrade6Count;
int[9] gv_upgrade7Count;
int gv_levelInfoOnOff;
int[3] gv_levelInfoLink;
int[3] gv_infoLevel1;
int[3] gv_infoLevel2;
int[3] gv_infoLevel3;
int[3] gv_infoLevel4;
int[3] gv_infoLevel5;
int[3] gv_infoLevel6;
int[3] gv_infoLevel7;
int[3] gv_infoLevel8;
int[3] gv_infoLevel9;
int[3] gv_infoLevel10;
int[7] gv_probeCnt;
int[7] gv_kelThuzadSummon;
int[7] gv_killCnt1;
int[7] gv_killCnt2;
int[7] gv_killCnt3;
int[7] gv_killCnt4;
int[7] gv_killCnt5;
int[7] gv_killCnt6;
int[7] gv_killCnt7;
int[7] gv_killCnt8;
int[7] gv_killValueX2;
int[7] gv_killValueX3;
int[7] gv_killValueX4;
int[7] gv_killValueX5;
int[7] gv_killValueX6;
int[7] gv_killValueX7;
int[7] gv_killValueX8;
bool[7] gv_boss6RewardBought;
int[3] gv__1000KillGroup1;
int[3] gv__1000KillGroup2;
int[3] gv__1000KillGroup3;
int[3] gv_doubleKill;
int[3] gv_resources;
int[3] gv_unlockaherocomingsoon;
bool[7] gv_boss7RewardsBought;
int[3] gv__500kill;
int[3] gv__5range;
int[3] gv_heroBuff;
int[3] gv_doubleKill2;
int[3] gv_resources2;
int[3] gv_extraProbe;
bool[7] gv_boss8RewardBought;
int[3] gv__750kill;
int[3] gv__3armor;
int[3] gv_abilityCooldown;
int[3] gv_doubleKill3;
int[3] gv_resources3;
int[3] gv__5minfreedom;
bool[7] gv_boss9RewardBought;
int[3] gv__1000kill;
int[3] gv_doubleSpeed;
int[3] gv__20dmgReducer;
int[3] gv_doubleKill4;
int[3] gv_resources4;
int[3] gv_xpBoost;
bool[7] gv_boss10RewardBought;
int[3] gv__1250kill;
int[3] gv_vitals;
int[3] gv_hpReducer;
int[3] gv_doubleKill5;
int[3] gv_resources5;
int[3] gv_xpBoost2;
bool[7] gv_boss11RewardBought;
int[3] gv__1500kill;
int[3] gv_regeneration;
int[3] gv_powerBuff;
int[3] gv_doubleKill6;
int[3] gv_resources6;
int[3] gv_xpBoost3;
bool[7] gv_boss12RewardBought;
int[3] gv__1625kill;
int[3] gv_resourcesM;
int[3] gv_kelthuzad;
int[3] gv_doubleKill7;
int[3] gv_resourcesV;
int[3] gv_xpGrant;
bool[7] gv_boss13RewardBought;
int[3] gv__1750kill;
int[3] gv_resourcesM2;
int[3] gv_uNKNOWN;
int[3] gv_doubleKill8;
int[3] gv_resourcesV2;
int[3] gv_tps2;
unit gv_cargoTruck1;
int gv_objective;
int gv_ping;
unit gv_cargoTruck2;
timer gv_lavaTimer;
int gv_objective2;
int[9] gv_lavaPing;
unit[9] gv_crate;
unit[9] gv_factory;
unit[9] gv_heroCarrier;
int[4] gv_visuals;
unitgroup gv_scoutBabies;
unit[7] gv_intelTower;
int gv_mineralResource;
int gv_vespeneResource;
fixed[7] gv_energyHealMultiplier;
fixed[7] gv_skadooshDamageAbsorb;
fixed[7] gv_skadooshMultiplier;
fixed[7] gv_skadooshRadius;
unit[7] gv_ravenUnit;
fixed[7] gv_energeticTotalDamage;
int[3] gv_hideAll;
int[3] gv_showAll;
int[3] gv_heroMenu;
int[3] gv_heroIcon;
int[3] gv_heroIconReq;
int[3] gv_heroSpawn;
string[7] gv_unitType;
int[7] gv_assassinReq;
int[7] gv_assaultReq;
int[7] gv_engineerReq;
int[7] gv_supportReq;
int[7] gv_specialistReq;
int[7] gv_tankReq;
int[7] gv_splashReq;
int[7] gv_waveReq;
int[3] gv_reaper;
int[3] gv_reaper2;
int[3] gv_oracle;
int[3] gv_oracle2;
int[3] gv_darkMage;
int[3] gv_darkMage2;
int[3] gv_hydralisk;
int[3] gv_hydralisk2;
int[3] gv_comboHero;
int[6] gv_comboHeroButton;
int[3] gv_sCV;
int[3] gv_sCV2;
int[3] gv_miner;
int[3] gv_miner2;
int[3] gv_hercule;
int[3] gv_hercule2;
int[3] gv_marauder;
int[3] gv_marauder2;
int[3] gv_corsair;
int[3] gv_corsair2;
int[3] gv_engineerHero;
int[7] gv_engineerHeroButton;
int[3] gv_vulture;
int[3] gv_vulture2;
int[3] gv_archon;
int[3] gv_archon2;
int[3] gv_hellion;
int[3] gv_hellion2;
int[3] gv_siegeTank;
int[3] gv_siegeTank2;
int[3] gv_reaver;
int[3] gv_reaver2;
int[3] gv_colossus;
int[3] gv_colossus2;
int[3] gv_splashHero;
int[6] gv_splashHeroButton;
int[3] gv_marine;
int[3] gv_marine2;
int[3] gv_voidRay;
int[3] gv_voidRay2;
int[3] gv_goliath;
int[3] gv_goliath2;
int[3] gv_viking;
int[3] gv_viking2;
int[3] gv_carrier;
int[3] gv_carrier2;
int[3] gv_bC;
int[3] gv_bC2;
int[3] gv_assaultHero;
int[6] gv_assaultHeroButton;
int[3] gv_zealot;
int[3] gv_zealot2;
int[3] gv_predator;
int[3] gv_predator2;
int[3] gv_immortal;
int[3] gv_immortal2;
int[3] gv_firebat;
int[3] gv_firebat2;
int[3] gv_thor;
int[3] gv_thor2;
int[3] gv_hybrid;
int[3] gv_hybrid2;
int[3] gv_tankHero;
int[8] gv_tankHeroButton;
int[3] gv_stalker;
int[3] gv_stalker2;
int[3] gv_diamondBack;
int[3] gv_diamondBack2;
int[3] gv_scout;
int[3] gv_scout2;
int[3] gv_cyclone;
int[3] gv_cyclone2;
int[3] gv_mothership;
int[3] gv_mothership2;
int[3] gv_specialistHero;
int[7] gv_specialistHeroButton;
int[3] gv_ghost;
int[3] gv_ghost2;
int[3] gv_spectre;
int[3] gv_spectre2;
int[3] gv_darkTemplar;
int[3] gv_darkTemplar2;
int[3] gv_wraith;
int[3] gv_wraith2;
int[3] gv_tempest;
int[3] gv_tempest2;
int[3] gv_assassinHero;
int[7] gv_assassinHeroButton;
int[3] gv_medic;
int[3] gv_medic2;
int[3] gv_sentry;
int[3] gv_sentry2;
int[3] gv_highTemplar;
int[3] gv_highTemplar2;
int[3] gv_adept;
int[3] gv_adept2;
int[3] gv_raven;
int[3] gv_raven2;
int[3] gv_supportHero;
int[6] gv_supportHeroButton;
int[9] gv_notier4upgrade;
gs_PlayerData[17] gv_playerInfo;
int[7] gv_instaSpawn;
unit gv_enemyKilleType;
int gv_challengeModePos;
int[9] gv_oracleKeeper;
int[9] gv_reaperKeeper;
int[9] gv_hybridKeeper;
int gv_vasd;
bool[7] gv_minimapONOFF;
revealer gv_reavelear;
int gv_speedGloves;
int gv_bonusVitals;
int gv_speedSpecialties;
int gv_speedCooldown;
int gv_speedBoots;
int gv_biggerBulets;
int gv_specialStats;
int gv_sightRange;
int gv_speedGlovesPurchased;
int gv_speedCooldownPurchased;
int gv_speedBootsPurchased;
int gv_biggerBuletsPurchased;
int gv_sightRangePurchased;
int gv_bonusVitalsPurchased;
int gv_specialStatsPurchased;
int gv_speedSpecialtiesPurchased;
playergroup gv_allies;
int gv_leaderboard;
int gv_waveboard;
int gv_thisgmaeleader;
int[3] gv_speedGloveDialog;
int[3] gv_speedSpecialtiesDialog;
int[3] gv_damageBonusDialog;
int[3] gv_visionandRangeDialog;
int[3] gv_speedBootsDialog;
int[3] gv_speedCooldownDialog;
int[3] gv_bonusVitalsDialog;
int[3] gv_specialStatsDialog;
unitgroup gv_tEAM;
int gv_tKSZombieAmount;
int gv_tKSZombieAmountIncrease;
int[3] gv_openClassInfo;
int gv_classInfoonoff;
int[3] gv_classInfo;
int gv_additionalZombiePerSpawnIncrease;
int gv_wave;
region[7] gv_zombieSpawns;
fixed gv_zombielife;
fixed gv_zombieCapVariable;
unitgroup gv_zombies;
int gv_zombiespeed;
fixed gv_baseLifePercent;
fixed gv_speedBoost;
int gv_zombieSpawnRate;
int gv_wavetoWin;
int gv_eXPValue;
int gv_zombieStatCount;
int[3] gv_soloDifficulty;
fixed gv_bossSpeed;
int[3] gv_soloDifficulty2;
bool gv_enableSpeed;
int gv_spawnTimer;
int gv_randomBossDecisoin;
int[26] gv_bossChecksum;
int gv_only1Oracle;
text gv_difficultyText;
int gv_killRewardValue;
int gv_tpRewardValue;
int[3] gv_speedBuffDialog48;
int[3] gv_speedBuffDialog49;
fixed gv_diffucultySpeedforbuff;
int gv_difficultyModeforbuff;
int[3] gv_speedVote;
int[3] gv_difficultyVote;
int gv_votesForCLTorture;
int gv_votesForCLEvasive;
int gv_votesForCLConstructor;
int gv_votesForCLInfantry;
int gv_votesForCLTeamGame;
bool[7] gv_votedForCLTorture;
bool[7] gv_votedForCLEvasive;
bool[7] gv_votedForCLConstructor;
bool[7] gv_votedForCLInfantry;
bool[7] gv_votedForCLTeamGame;
bool gv_cLTortureSelected;
bool gv_cLEvasiveSelected;
bool gv_cLConstructorSelected;
bool gv_cLInfatrySelected;
bool gv_cLTeamGameSelected;
bool[7] gv_didYouVote;
fixed gv_timeToSpawn;
int gv_timeLeft;
int[3] gv_timeLeftToVoteDialog;
bool gv_startingStatsBeenRun;
int gv_countVotingPlayers;
int gv_votesForDifficulty;
int[3] gv_challengesDialog;
int[3] gv_veryEasyDialog;
int[3] gv_easyDialog;
int[3] gv_normalDialog;
int[3] gv_hardDialog;
int[3] gv_cLInfantryDialog;
int[3] gv_veryHardDialog;
int[3] gv_cLConstructorDialog;
int[3] gv_brutalDialog;
int[3] gv_cLTeamGame;
int[3] gv_cLEvasiveDialog;
int[3] gv_insaneDialog;
int[3] gv_nightmareDialog;
int[3] gv_disasterDialog;
int[3] gv_chaoticDialog;
int[3] gv_cLTorture;
int[3] gv_tormentDialog;
int[3] gv_tormentIDialog;
int[3] gv_tormentIIDialog;

void InitGlobals () {
    int init_i;

    gv_leftBoss1 = UnitFromId(156722311);
    gv_rightBoss1 = UnitFromId(1650985467);
    gv_showHideStatsOnOff2 = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_showHideStats[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_statsMenu[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_menuText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_damageText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_damageCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addDamage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractDamage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_moveSpeedText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_moveSpeedCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addMoveSpeed[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractMoveSpeed[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energyText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energyCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energyRegenText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energyRegenCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addEnergyRegen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractEnergyRegen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cooldownText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cooldownCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addCooldown[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractCooldown[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeArmorText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeArmorCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addLifeArmor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractLifeArmor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldArmorText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldArmorCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addShieldArmor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractShieldArmor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldArmorMultiplierText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldArmorMultiplierCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addShieldArmorMultiplier[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractShieldArmorMultiplier[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xpText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xpCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addXp[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractXp[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_masteryText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_masterCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addMastery[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractMastery[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_damageReductionText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_damageReductionCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addDamageReduction[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractDamageReduction[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeArmorMultiplierText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeArmorMultiplierCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addLifeArmorMultiplier[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractLifeArmorMultiplier[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addLife[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractLife[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addShield[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractShield[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldRegenText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_shieldRegenCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addShieldRegen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractShieldRegen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_mineralStartText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_mineralStartCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addMineralStart[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_vespeneStartText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_vespeneStartCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addVespeneStart[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_respawnTimeText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_respawnTimeCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addRespawnTime[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeRegenText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lifeRegenCount[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_addLifeRegen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_subtractLifeRegen[init_i] = c_invalidDialogControlId;
    }
    gv_killMultiplier = 10;
    gv_levelInfoOnOff = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_levelInfoLink[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel6[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel7[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel8[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel9[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_infoLevel10[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_probeCnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_kelThuzadSummon[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt1[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt2[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt3[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt4[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt5[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt6[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt7[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killCnt8[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX2[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX3[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX4[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX5[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX6[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX7[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_killValueX8[init_i] = 1;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1000KillGroup1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1000KillGroup2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1000KillGroup3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resources[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_unlockaherocomingsoon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__500kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__5range[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroBuff[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resources2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_extraProbe[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__750kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__3armor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_abilityCooldown[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resources3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__5minfreedom[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1000kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleSpeed[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__20dmgReducer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resources4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xpBoost[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1250kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_vitals[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hpReducer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resources5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xpBoost2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1500kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_regeneration[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_powerBuff[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill6[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resources6[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xpBoost3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1625kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resourcesM[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_kelthuzad[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill7[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resourcesV[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xpGrant[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1750kill[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resourcesM2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_uNKNOWN[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_doubleKill8[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_resourcesV2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tps2[init_i] = c_invalidDialogControlId;
    }
    gv_objective = c_invalidObjectiveId;
    gv_ping = c_invalidPingId;
    gv_lavaTimer = TimerCreate();
    gv_objective2 = c_invalidObjectiveId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_lavaPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_visuals[init_i] = c_invalidDialogControlId;
    }
    gv_scoutBabies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_energyHealMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_skadooshMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_skadooshRadius[init_i] = 10.0;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hideAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_showAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroMenu[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroIconReq[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroSpawn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_reaper[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_reaper2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_oracle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_oracle2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_darkMage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_darkMage2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hydralisk[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hydralisk2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_comboHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_comboHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_sCV[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_sCV2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_miner[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_miner2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hercule[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hercule2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_marauder[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_marauder2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_corsair[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_corsair2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_engineerHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_engineerHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_vulture[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_vulture2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_archon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_archon2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hellion[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hellion2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_siegeTank[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_siegeTank2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_reaver[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_reaver2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_colossus[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_colossus2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_splashHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_splashHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_marine[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_marine2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_voidRay[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_voidRay2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_goliath[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_goliath2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_viking[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_viking2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_carrier[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_carrier2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_bC[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_bC2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_assaultHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_assaultHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_zealot[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_zealot2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_predator[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_predator2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_immortal[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_immortal2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_firebat[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_firebat2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_thor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_thor2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hybrid[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hybrid2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tankHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_tankHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_stalker[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_stalker2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_diamondBack[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_diamondBack2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_scout[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_scout2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cyclone[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cyclone2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_mothership[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_mothership2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_specialistHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_specialistHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_ghost[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_ghost2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_spectre[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_spectre2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_darkTemplar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_darkTemplar2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_wraith[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_wraith2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tempest[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tempest2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_assassinHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_assassinHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_medic[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_medic2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_sentry[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_sentry2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_highTemplar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_highTemplar2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_adept[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_adept2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_raven[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_raven2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_supportHero[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_supportHeroButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_notier4upgrade[init_i] = 1;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_playerInfo[init_i].lv_timerWindow = c_timerWindowNone;
        gv_playerInfo[init_i].lv_dMTag = c_textTagNone;
        gv_playerInfo[init_i].lv_killValue = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_instaSpawn[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_oracleKeeper[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_reaperKeeper[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_hybridKeeper[init_i] = 1;
    }
    gv_vasd = 1000000000;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_minimapONOFF[init_i] = true;
    }
    gv_speedGloves = c_textTagNone;
    gv_bonusVitals = c_textTagNone;
    gv_speedSpecialties = c_textTagNone;
    gv_speedCooldown = c_textTagNone;
    gv_speedBoots = c_textTagNone;
    gv_biggerBulets = c_textTagNone;
    gv_specialStats = c_textTagNone;
    gv_sightRange = c_textTagNone;
    gv_speedGlovesPurchased = c_textTagNone;
    gv_speedCooldownPurchased = c_textTagNone;
    gv_speedBootsPurchased = c_textTagNone;
    gv_biggerBuletsPurchased = c_textTagNone;
    gv_sightRangePurchased = c_textTagNone;
    gv_bonusVitalsPurchased = c_textTagNone;
    gv_specialStatsPurchased = c_textTagNone;
    gv_speedSpecialtiesPurchased = c_textTagNone;
    gv_allies = PlayerGroupEmpty();
    gv_leaderboard = c_boardNone;
    gv_waveboard = c_boardNone;
    gv_thisgmaeleader = c_boardNone;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedGloveDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedSpecialtiesDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_damageBonusDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_visionandRangeDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedBootsDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedCooldownDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_bonusVitalsDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_specialStatsDialog[init_i] = c_invalidDialogControlId;
    }
    gv_tEAM = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_openClassInfo[init_i] = c_invalidDialogControlId;
    }
    gv_classInfoonoff = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_classInfo[init_i] = c_invalidDialogControlId;
    }
    gv_zombielife = 20.0;
    gv_zombieCapVariable = 1.0;
    gv_zombies = UnitGroupEmpty();
    gv_baseLifePercent = 1.0;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_soloDifficulty[init_i] = c_invalidDialogControlId;
    }
    gv_bossSpeed = 1.0;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_soloDifficulty2[init_i] = c_invalidDialogControlId;
    }
    gv_spawnTimer = 600;
    gv_only1Oracle = 9;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedBuffDialog48[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedBuffDialog49[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_speedVote[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_difficultyVote[init_i] = c_invalidDialogControlId;
    }
    gv_timeToSpawn = 1.0;
    gv_timeLeft = 30;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_timeLeftToVoteDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_challengesDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_veryEasyDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_easyDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_normalDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hardDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cLInfantryDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_veryHardDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cLConstructorDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_brutalDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cLTeamGame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cLEvasiveDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_insaneDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_nightmareDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_disasterDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_chaoticDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_cLTorture[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tormentDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tormentIDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tormentIIDialog[init_i] = c_invalidDialogControlId;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_KeyPressed (trigger lp_trigger, int lp_player, int lp_key, bool lp_down, int lp_shift, int lp_control, int lp_alt);
int gf_PlayerbyHandle (string lp_handle);
playergroup gf_HumanPlayers ();
int gf_Numberofplayersselectinglistitem (int lp_listItem, int lp_dialogItem, playergroup lp_playerGroup);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_SecretBundle3Units;
trigger gt_GoldenBundle10Units;
trigger gt_MotherShipOnlySkins;
trigger gt_TempestOnlySkins;
trigger gt_CarrierOnlySkins;
trigger gt_ColossusOnlySkin;
trigger gt_BuilderBundle5Units;
trigger gt_CorsairOnlySkins;
trigger gt_MarauderOnlySkins;
trigger gt_HealBossMove;
trigger gt_LeftBossDies;
trigger gt_HealBossMove2;
trigger gt_RightBossDies;
trigger gt_AddAllStats;
trigger gt_ShowHideStats;
trigger gt_OpenCloseStats;
trigger gt_StatsMenuCreation;
trigger gt_MenuTextCreation;
trigger gt_DamageTextCreation;
trigger gt_DamageCountCreation;
trigger gt_AddDamageCreation;
trigger gt_AddDamageActivate;
trigger gt_SubtractDamageCreation;
trigger gt_SubtractDamageActivate;
trigger gt_MoveSpeedTextCreation;
trigger gt_MoveSpeedCountCreation;
trigger gt_AddMoveSpeedCreation;
trigger gt_AddMoveSpeedActivate;
trigger gt_SubtractMoveSpeedCreation;
trigger gt_SubtractMoveSpeedActivate;
trigger gt_EnergyTextCreation;
trigger gt_EnergyCountCreation;
trigger gt_AddEnergyCreation;
trigger gt_AddEnergyActivate;
trigger gt_SubtractEnergyCreation;
trigger gt_SubtractEnergyActivate;
trigger gt_EnergyRegenTextCreation;
trigger gt_EnergyRegenCountCreation;
trigger gt_AddEnergyRegenCreation;
trigger gt_AddEnergyRegenActivate;
trigger gt_SubtractEnergyRegenCreation;
trigger gt_SubtractEnergyRegenActivate;
trigger gt_CooldownTextCreation;
trigger gt_CooldownCountCreation;
trigger gt_AddCooldownCreation;
trigger gt_AddCooldownActivate;
trigger gt_SubtractCooldownCreation;
trigger gt_SubtractCooldownActivate;
trigger gt_LifeAmorTextCreation;
trigger gt_LifeArmorCountCreation;
trigger gt_AddLifeArmorCreation;
trigger gt_AddLifeArmorActivate;
trigger gt_SubtractLifeArmorCreation;
trigger gt_SubtractLifeArmorActivate;
trigger gt_ShieldArmorTextCreation;
trigger gt_ShieldArmorCountCreation;
trigger gt_AddShieldArmorCreation;
trigger gt_AddShieldArmorActivate;
trigger gt_SubtractShieldArmorCreation;
trigger gt_SubtractShieldArmorActivate;
trigger gt_ShieldArmorMultiplierTextCreation;
trigger gt_ShieldArmorMultiplierCountCreation;
trigger gt_AddShieldArmorMultiplierCreation;
trigger gt_AddShieldArmorMultiplierActivate;
trigger gt_SubtractShieldArmorMultiplierCreation;
trigger gt_SubtractShieldArmorMultiplierActivate;
trigger gt_XpTextCreation;
trigger gt_XpCountCreation;
trigger gt_AddXpCreation;
trigger gt_AddXpActivate;
trigger gt_SubtractXpCreation;
trigger gt_SubtractXpActivate;
trigger gt_MasteryTextCreation;
trigger gt_MasteryCountCreation;
trigger gt_AddMasteryCreation;
trigger gt_AddMasteryActivate;
trigger gt_SubtractMasteryCreation;
trigger gt_SubtractMasteryActivate;
trigger gt_DamageReductionTextCreation;
trigger gt_DamageReductionCountCreation;
trigger gt_AddDamageReductionCreation;
trigger gt_AddDamageReductionActivate;
trigger gt_SubtractDamageReductionCreation;
trigger gt_SubtractDamageReductionActivate;
trigger gt_LifeArmorMultiplierTextCreation;
trigger gt_LifeArmorMultiplierCountCreation;
trigger gt_AddLifeArmorMultiplierCreation;
trigger gt_AddLifeArmorMultiplierActivate;
trigger gt_SubtractLifeArmorMultiplierCreation;
trigger gt_SubtractLifeArmorMultiplierActivate;
trigger gt_LifeTextCreation;
trigger gt_LifeCountCreation;
trigger gt_AddLifeCreation;
trigger gt_AddLifeActivate;
trigger gt_SubtractLifeCreation;
trigger gt_SubtractLifeActivate;
trigger gt_ShieldTextCreation;
trigger gt_ShieldCountCreation;
trigger gt_AddShieldCreation;
trigger gt_AddShieldActivate;
trigger gt_SubtractShieldCreation;
trigger gt_SubtractShieldActivate;
trigger gt_ShieldRegenTextCreation;
trigger gt_ShieldRegenCountCreation;
trigger gt_AddShieldRegenCreation;
trigger gt_AddShieldRegenActivate;
trigger gt_SubtractShieldRegenCreation;
trigger gt_SubtractShieldRegenActivate;
trigger gt_MineralStartTextCreation;
trigger gt_MineralStartCountCreation;
trigger gt_AddMineralStartCreation;
trigger gt_AddMineralStartActivate;
trigger gt_VespeneStartTextCreation;
trigger gt_VespeneStartCountCreation;
trigger gt_AddVespeneStartCreation;
trigger gt_AddVespeneStartActivate;
trigger gt_RespawnTimeTextCreation;
trigger gt_RespawnTimeCountCreation;
trigger gt_AddRespawnTimeCreation;
trigger gt_AddRespawnTimeActivate;
trigger gt_LifeRegenTextCreation;
trigger gt_LifeRegenCountCreation;
trigger gt_AddLifeRegenCreation;
trigger gt_AddLifeRegenActivate;
trigger gt_SubtractLifeRegenCreation;
trigger gt_SubtractLifeRegenActivate;
trigger gt_GameVarient1;
trigger gt_GameVarient2;
trigger gt_DisableAll;
trigger gt_GameVarient3;
trigger gt_LastOneAlive;
trigger gt_Upgrade1Search;
trigger gt_Upgrade2Search;
trigger gt_Upgrade3Search;
trigger gt_Upgrade4Search;
trigger gt_Upgrade5Search;
trigger gt_Upgrade6Search;
trigger gt_Upgrade7Search;
trigger gt_UnitEntersRegionForShop;
trigger gt_UnitLeavesRegionForShop;
trigger gt_UnitBuysUpgrade1;
trigger gt_UnitBuysUpgrade2;
trigger gt_UnitBuysUpgrade3;
trigger gt_UnitBuysUpgrade4;
trigger gt_UnitBuysUpgrade5;
trigger gt_UnitBuysUpgrade6;
trigger gt_UnitBuysUpgrade7;
trigger gt_CreateCargoTruck;
trigger gt_TurnLateWaveTruckOn;
trigger gt_CreateCargoTruckHighWave;
trigger gt_Level1;
trigger gt_Level2;
trigger gt_Level3;
trigger gt_Level4;
trigger gt_Level5;
trigger gt_Level6;
trigger gt_Level7;
trigger gt_Level8;
trigger gt_Level9;
trigger gt_Level100;
trigger gt_LevelInfoLink;
trigger gt_OpenCloseLevelInfo;
trigger gt_InfoLevel1;
trigger gt_InfoLevel2;
trigger gt_InfoLevel3;
trigger gt_InfoLevel4;
trigger gt_InfoLevel5;
trigger gt_InfoLevel6;
trigger gt_InfoLevel7;
trigger gt_InfoLevel8;
trigger gt_InfoLevel9;
trigger gt_InfoLevel10;
trigger gt_ScanForNothingStopsMeNow;
trigger gt_InstaBossSpawn1;
trigger gt_InstaBossSpawn2;
trigger gt_InstaBossSpawn3;
trigger gt_InstaBossSpawn4;
trigger gt_InstaBossSpawn5;
trigger gt_InstaBossSpawn6;
trigger gt_InstaBossSpawn7;
trigger gt_InstaBossSpawn8;
trigger gt_InstaBossSpawn9;
trigger gt_InstaBossSpawn10;
trigger gt_InstaBossSpawn11;
trigger gt_InstaBossSpawn12;
trigger gt_InstaBossSpawn13;
trigger gt_InstaBossSpawn14;
trigger gt_KelThuzadIceVisual;
trigger gt_Boss0Create;
trigger gt_Boss1Create;
trigger gt_Boss2Create;
trigger gt_Boss3Create;
trigger gt_Boss4Create;
trigger gt_Boss5Create;
trigger gt_Boss6Create;
trigger gt_G1Create;
trigger gt_ActivateG1;
trigger gt_G2Create;
trigger gt_ActivateG2;
trigger gt_G3Create;
trigger gt_ActivateG3;
trigger gt_DoubleKillCreate;
trigger gt_ActivateDoubleKill;
trigger gt_ResourcesCreate;
trigger gt_ActivateResources;
trigger gt_UnlockCreate;
trigger gt_ActivateUnlock;
trigger gt_Boss7Create;
trigger gt_G1Create2;
trigger gt_ActivateG4;
trigger gt_G2Create2;
trigger gt_ActivateG5;
trigger gt_G3Create2;
trigger gt_ActivateG6;
trigger gt_DoubleKillCreate2;
trigger gt_ActivateDoubleKill2;
trigger gt_ResourcesCreate2;
trigger gt_ActivateResources2;
trigger gt_UnlockCreate2;
trigger gt_ActivateUnlock2;
trigger gt_Boss8Create;
trigger gt_G1Create3;
trigger gt_ActivateG7;
trigger gt_G2Create3;
trigger gt_ActivateG8;
trigger gt_G3Create3;
trigger gt_ActivateG9;
trigger gt_DoubleKillCreate3;
trigger gt_ActivateDoubleKill3;
trigger gt_ResourcesCreate3;
trigger gt_ActivateResources3;
trigger gt_UnlockCreate3;
trigger gt_ActivateUnlock3;
trigger gt_Boss9Create;
trigger gt_G1Create4;
trigger gt_ActivateG10;
trigger gt_G2Create4;
trigger gt_ActivateG11;
trigger gt_G3Create4;
trigger gt_ActivateG12;
trigger gt_DoubleKillCreate4;
trigger gt_ActivateDoubleKill4;
trigger gt_ResourcesCreate4;
trigger gt_ActivateResources4;
trigger gt_UnlockCreate4;
trigger gt_ActivateUnlock4;
trigger gt_Boss10Create;
trigger gt_G1Create5;
trigger gt_ActivateG13;
trigger gt_G2Create5;
trigger gt_ActivateG14;
trigger gt_G3Create5;
trigger gt_ActivateG15;
trigger gt_DoubleKillCreate5;
trigger gt_ActivateDoubleKill5;
trigger gt_ResourcesCreate5;
trigger gt_ActivateResources5;
trigger gt_UnlockCreate5;
trigger gt_ActivateUnlock5;
trigger gt_Boss11Create;
trigger gt_G1Create6;
trigger gt_ActivateG16;
trigger gt_G2Create6;
trigger gt_ActivateG17;
trigger gt_G3Create6;
trigger gt_ActivateG18;
trigger gt_DoubleKillCreate6;
trigger gt_ActivateDoubleKill6;
trigger gt_ResourcesCreate6;
trigger gt_ActivateResources6;
trigger gt_UnlockCreate6;
trigger gt_ActivateUnlock6;
trigger gt_Boss12Create;
trigger gt_G1Create7;
trigger gt_ActivateG19;
trigger gt_ResourcesMCreate7;
trigger gt_ActivateResourcesM7;
trigger gt_G3Create7;
trigger gt_ActivateG21;
trigger gt_DoubleKillCreate7;
trigger gt_ActivateDoubleKill7;
trigger gt_ResourcesVCreate7;
trigger gt_ActivateResourcesV7;
trigger gt_UnlockCreate7;
trigger gt_ActivateUnlock7;
trigger gt_HydraUnlocked;
trigger gt_HydraUnlockedCHECK;
trigger gt_Boss13Create;
trigger gt_G1Create8;
trigger gt_ActivateG20;
trigger gt_ResourcesMCreate8;
trigger gt_ActivateResourcesM8;
trigger gt_G3Create8;
trigger gt_ActivateG22;
trigger gt_DoubleKillCreate8;
trigger gt_ActivateDoubleKill8;
trigger gt_ResourcesVCreate8;
trigger gt_ActivateResourcesV8;
trigger gt_UnlockCreate8;
trigger gt_ActivateUnlock8;
trigger gt_DreadLord;
trigger gt_Intoduction;
trigger gt_TruckDies;
trigger gt_SpawnMiniZombie;
trigger gt_TeleportTruckIntoMapTop;
trigger gt_TeleportTruckOutOfMapBottom;
trigger gt_ReApplyPingPosition;
trigger gt_CreateObjective;
trigger gt_CollectsCrate1;
trigger gt_CollectsCrate2;
trigger gt_CollectsCrate3;
trigger gt_CollectsCrate4;
trigger gt_CollectsCrate5;
trigger gt_CollectsCrate6;
trigger gt_CollectsCrate7;
trigger gt_CollectsCrate8;
trigger gt_ReturnCrate;
trigger gt_LavaPain;
trigger gt_FactoryDies;
trigger gt_DamageCap;
trigger gt_bronzesds;
trigger gt_DEVELOPERHACKTOOL;
trigger gt_AutoBurrow;
trigger gt_IncreaseReturnAmount;
trigger gt_InvulnerableLife;
trigger gt_ShadowFuryUpgradeFixerDisable;
trigger gt_YamatoDamageMultiplier;
trigger gt_ShowPlasmaStacks;
trigger gt_IncreasePlasmaStacks;
trigger gt_DecreasePlasmaStacks;
trigger gt_CreateInitially;
trigger gt_MaxOf15;
trigger gt_DontMoveBabies;
trigger gt_KeepFollowingScout;
trigger gt_KillSoon;
trigger gt_WeaponTheif;
trigger gt_Orbit;
trigger gt_RPGThrusters;
trigger gt_BIgArmor;
trigger gt_Unburrow;
trigger gt_TurnonSpeedCooldown;
trigger gt_SpeedCooldowns;
trigger gt_BacktoAssault;
trigger gt_ARattack;
trigger gt_SRattack;
trigger gt_AddARammo;
trigger gt_AddSRammo;
trigger gt_ApplyStrikiingRoundAR;
trigger gt_ApplyStrikiingRoundSR;
trigger gt_MarauderUpgradesCostMoney;
trigger gt_TurnOffBlaster;
trigger gt_TurnOnBlaster;
trigger gt_ColossusDetonation;
trigger gt_Smellslikevictoryaction;
trigger gt_HideUpgrades;
trigger gt_EmitterToggle;
trigger gt_EmitterApply;
trigger gt_KillRobo;
trigger gt_KillPylon;
trigger gt_KillAura;
trigger gt_EnergyFix;
trigger gt_EnergyRemove;
trigger gt_EnergyFixPt1;
trigger gt_EnergyFixPt2;
trigger gt_EnergyFixPt3;
trigger gt_EnergyFixPt4;
trigger gt_EnergyFixPt5;
trigger gt_EnergyFixPt6;
trigger gt_CloakingSpray;
trigger gt_RemoveOldSkel;
trigger gt_DestroyProjectiles;
trigger gt_RankUp;
trigger gt_TurnGenerateMineralsOff;
trigger gt_GenerateMinerals;
trigger gt_SpawnHybrid;
trigger gt_SelfEnergyHeal;
trigger gt_SpecStatsKeneticRatio;
trigger gt_CriticalStrikeNumbers;
trigger gt_SkadooshAbsorb;
trigger gt_DealDamage;
trigger gt_DamageBonusSkadoosh;
trigger gt_SpecStatsSkadooshRadius;
trigger gt_ResourceAura;
trigger gt_TurnToChicken;
trigger gt_AddIncomeAura;
trigger gt_AddIncomeAura2;
trigger gt_AddIncomeAura3;
trigger gt_AddIncomeAura4;
trigger gt_AddIncomeAura5;
trigger gt_AddIncomeAura6;
trigger gt_RemoveIncomeAura;
trigger gt_RemoveIncomeAura2;
trigger gt_RemoveIncomeAura3;
trigger gt_RemoveIncomeAura4;
trigger gt_RemoveIncomeAura5;
trigger gt_RemoveIncomeAura6;
trigger gt_KillsBuff;
trigger gt_DMGCHECK;
trigger gt_KerriganDealsDamage;
trigger gt_PeriodicReleaseEnergetic1;
trigger gt_PeriodicReleaseEnergetic2;
trigger gt_PeriodicReleaseEnergetic3;
trigger gt_PeriodicReleaseEnergetic4;
trigger gt_PeriodicReleaseEnergetic5;
trigger gt_PeriodicReleaseEnergetic6;
trigger gt_Speed;
trigger gt_UniqueHeroAccess1;
trigger gt_UniqueHeroAccess2;
trigger gt_UniqueHeroAccess3;
trigger gt_UniqueHeroAccess4;
trigger gt_UniqueHeroAccess5;
trigger gt_UniqueHeroAccess6;
trigger gt_VotingShow;
trigger gt_MapStartHideAll;
trigger gt_HideAllCreation;
trigger gt_ActivateHideAll;
trigger gt_ShowAllCreation;
trigger gt_ActivateShowAll;
trigger gt_HeroMenuCreation;
trigger gt_HeroIconCreation;
trigger gt_HeroIconReqCreation;
trigger gt_HeroSpawnCreation;
trigger gt_ActivateHeroSpawn;
trigger gt_MaxXP;
trigger gt_SlowBuffApply;
trigger gt_FairXP;
trigger gt_CreationApply;
trigger gt_TinyxpToMain;
trigger gt_MainLevelUpApply;
trigger gt_Alarak;
trigger gt_Artanis;
trigger gt_Kerrigan;
trigger gt_BronzeHero;
trigger gt_DA;
trigger gt_TrollBerseker;
trigger gt_Raven;
trigger gt_Assassin;
trigger gt_Banshee;
trigger gt_GimmeTPDammitTKS;
trigger gt_ReaperCreation;
trigger gt_ActivateReaper;
trigger gt_ReaperCreation2;
trigger gt_ActivateReaper2;
trigger gt_OracleCreation;
trigger gt_ActivateOracle;
trigger gt_OracleCreation2;
trigger gt_ActivateOracle2;
trigger gt_DarkMageCreation;
trigger gt_ActivateDarkMage;
trigger gt_DarkMageCreation2;
trigger gt_ActivateDarkMage2;
trigger gt_HydraliskCreation;
trigger gt_ActivateHydralisk;
trigger gt_HydraliskCreation2;
trigger gt_ActivateHydralisk2;
trigger gt_ComboHeroCreation;
trigger gt_ActivateComboHero;
trigger gt_SCVCreation;
trigger gt_ActivateSCV;
trigger gt_SCVCreation2;
trigger gt_ActivateSCV2;
trigger gt_MinerCreation;
trigger gt_ActivateMiner;
trigger gt_MinerCreation2;
trigger gt_ActivateMiner2;
trigger gt_HerculeCreation;
trigger gt_ActivateHercule;
trigger gt_HerculeCreation2;
trigger gt_ActivateHercule2;
trigger gt_MarauderCreation;
trigger gt_ActivateMarauder;
trigger gt_MarauderCreation2;
trigger gt_ActivateMarauder2;
trigger gt_CorsairCreation;
trigger gt_ActivateCorsair;
trigger gt_CorsairCreation2;
trigger gt_ActivateCorsair2;
trigger gt_EngineerHeroCreation;
trigger gt_ActivateEngineerHero;
trigger gt_VultureCreation;
trigger gt_ActivateVulture;
trigger gt_VultureCreation2;
trigger gt_ActivateVulture2;
trigger gt_ArchonCreation;
trigger gt_ActivateArchon;
trigger gt_ArchonCreation2;
trigger gt_ActivateArchon2;
trigger gt_HellionCreation;
trigger gt_ActivateHellion;
trigger gt_HellionCreation2;
trigger gt_ActivateHellion2;
trigger gt_SiegeTankCreation;
trigger gt_ActivateSiegeTank;
trigger gt_SiegeTankCreation2;
trigger gt_ActivateSiegeTank2;
trigger gt_ReaverCreation;
trigger gt_ActivateReaver;
trigger gt_ReaverCreation2;
trigger gt_ActivateReaver2;
trigger gt_ColossusCreation;
trigger gt_ActivateColossus;
trigger gt_ColossusCreation2;
trigger gt_ActivateColossus2;
trigger gt_SplashHeroCreation;
trigger gt_ActivateSplashHero;
trigger gt_MarineCreation;
trigger gt_ActivateMarine;
trigger gt_MarineCreation2;
trigger gt_ActivateMarine2;
trigger gt_VoidRayCreation;
trigger gt_ActivateVoidRay;
trigger gt_VoidRayCreation2;
trigger gt_ActivateVoidRay2;
trigger gt_GoliathCreation;
trigger gt_ActivateGoliath;
trigger gt_GoliathCreation2;
trigger gt_ActivateGoliath2;
trigger gt_VikingCreation;
trigger gt_ActivateViking;
trigger gt_VikingCreation2;
trigger gt_ActivateViking2;
trigger gt_CarrierCreation;
trigger gt_ActivateCarrier;
trigger gt_CarrierCreation2;
trigger gt_ActivateCarrier2;
trigger gt_BCCreation;
trigger gt_ActivateBC;
trigger gt_BCCreation2;
trigger gt_ActivateBC2;
trigger gt_AssaultHeroCreation;
trigger gt_ActivateAssaultHero;
trigger gt_ZealotCreation;
trigger gt_ActivateZealot;
trigger gt_ZealotCreation2;
trigger gt_ActivateZealot2;
trigger gt_PredatorCreation;
trigger gt_ActivatePredator;
trigger gt_PredatorCreation2;
trigger gt_ActivatePredator2;
trigger gt_ImmortalCreation;
trigger gt_ActivateImmortal;
trigger gt_ImmortalCreation2;
trigger gt_ActivateImmortal2;
trigger gt_FirebatCreation;
trigger gt_ActivateFirebat;
trigger gt_FirebatCreation2;
trigger gt_ActivateFirebat2;
trigger gt_ThorCreation;
trigger gt_ActivateThor;
trigger gt_ThorCreation2;
trigger gt_ActivateThor2;
trigger gt_HybridCreation;
trigger gt_ActivateHybrid;
trigger gt_HybridCreation2;
trigger gt_ActivateHybrid2;
trigger gt_TankHeroCreation;
trigger gt_ActivateTankHero;
trigger gt_StalkerCreation;
trigger gt_ActivateStalker;
trigger gt_StalkerCreation2;
trigger gt_ActivateStalker2;
trigger gt_DiamondBackCreation;
trigger gt_ActivateDiamondBack;
trigger gt_DiamondBackCreation2;
trigger gt_ActivateDiamondBack2;
trigger gt_ScoutCreation;
trigger gt_ActivateScout;
trigger gt_ScoutCreation2;
trigger gt_ActivateScout2;
trigger gt_CycloneCreation;
trigger gt_ActivateCyclone;
trigger gt_CycloneCreation2;
trigger gt_ActivateCyclone2;
trigger gt_MothershipCreation;
trigger gt_ActivateMothership;
trigger gt_MothershipCreation2;
trigger gt_ActivateMothership2;
trigger gt_SpecialistHeroCreation;
trigger gt_ActivateSpecialistHero;
trigger gt_GhostCreation;
trigger gt_ActivateGhost;
trigger gt_GhostCreation2;
trigger gt_ActivateGhost2;
trigger gt_SpectreCreation;
trigger gt_ActivateSpectre;
trigger gt_SpectreCreation2;
trigger gt_ActivateSpectre2;
trigger gt_DarkTemplarCreation;
trigger gt_ActivateDarkTemplar;
trigger gt_DarkTemplarCreation2;
trigger gt_ActivateDarkTemplar2;
trigger gt_WraithCreation;
trigger gt_ActivateWraith;
trigger gt_WraithCreation2;
trigger gt_ActivateWraith2;
trigger gt_TempestCreation;
trigger gt_ActivateTempest;
trigger gt_TempestCreation2;
trigger gt_ActivateTempest2;
trigger gt_AssassinHeroCreation;
trigger gt_ActivateAssassinHero;
trigger gt_MedicCreation;
trigger gt_ActivateMedic;
trigger gt_MedicCreation2;
trigger gt_ActivateMedic2;
trigger gt_SentryCreation;
trigger gt_ActivateSentry;
trigger gt_SentryCreation2;
trigger gt_ActivateSentry2;
trigger gt_HighTemplarCreation;
trigger gt_ActivateHighTemplar;
trigger gt_HighTemplarCreation2;
trigger gt_ActivateHighTemplar2;
trigger gt_AdeptCreation;
trigger gt_ActivateAdept;
trigger gt_AdeptCreation2;
trigger gt_ActivateAdept2;
trigger gt_RavenCreation;
trigger gt_ActivateRaven;
trigger gt_Raven2Creation;
trigger gt_ActivateRaven2;
trigger gt_SupportHeroCreation;
trigger gt_ActivateSupportHero;
trigger gt_MarineEvo;
trigger gt_MedicEvo;
trigger gt_VultureEvo;
trigger gt_GhostEvo;
trigger gt_ZealotEvo;
trigger gt_StalkerEvo;
trigger gt_ReaperEvo;
trigger gt_VoidRayEvo;
trigger gt_HybridEvo;
trigger gt__145;
trigger gt__61;
trigger gt__146;
trigger gt_Playerdies;
trigger gt_kill;
trigger gt_SpawnNow;
trigger gt_EndGameCondition;
trigger gt_Respawn;
trigger gt_RespawnCLInfantry;
trigger gt_RespawnCLTeamGame;
trigger gt_RespawnCLConstructor;
trigger gt_RespawnCLEvasive;
trigger gt_RespawnCLTorture;
trigger gt_RespawnChallengeMode;
trigger gt_EndGame;
trigger gt_BlacklistHackers;
trigger gt_PlayerID;
trigger gt_TeamID;
trigger gt_ResourceTrading;
trigger gt_ShowCommands;
trigger gt_Minimap;
trigger gt_GrantPlayer9Vision;
trigger gt_gimmethatsight;
trigger gt_gimmeblindbats;
trigger gt_Removeleavingplayersminerals;
trigger gt_RemoveLeftPlayerMineral;
trigger gt_ShowMap;
trigger gt_DisableSimpleCommandcardandtags;
trigger gt_Showmap1;
trigger gt__75KILLREDUCTION;
trigger gt_Mapcleanup;
trigger gt_CHEATFORKILLSAdminOnly;
trigger gt_CHEATFORKILLSHelpAFriend;
trigger gt_CHEATFORKILLSHelpP3Friend;
trigger gt_CHEATFORKILLSBullyFriend;
trigger gt_CHEATFORKILLSBullyP3Friend;
trigger gt_CHEATFORKILLSAdminOnly2;
trigger gt_CHEATFORKILLSAdminOnlyremovekills;
trigger gt_leaderboardhelp;
trigger gt_maxstukovzombies;
trigger gt_thisgameleader;
trigger gt_overallleader;
trigger gt_waveboard;
trigger gt_StartingStats;
trigger gt_StartingStatsNoTalents;
trigger gt_KillTracker;
trigger gt_showjungle;
trigger gt_setthestupidfontsizeofleaderbaord;
trigger gt__1minperkill;
trigger gt_leavingp;
trigger gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead;
trigger gt_NonoZone;
trigger gt_NonoZone2;
trigger gt_by;
trigger gt_getoutofspawn1;
trigger gt_getoutofspawn2;
trigger gt_getoutofspawn3;
trigger gt_getoutofspawn4;
trigger gt_getoutofspawn5;
trigger gt_getoutofspawn6;
trigger gt_getoutofspawn7;
trigger gt_getoutofspawn8;
trigger gt_getoutofspawn82;
trigger gt_MoveBack1;
trigger gt_MoveBack2;
trigger gt_MoveBack3;
trigger gt_MoveBack4;
trigger gt_MoveBack5;
trigger gt_MoveBack6;
trigger gt_MoveBack7;
trigger gt_MoveBack8;
trigger gt_MoveBack9;
trigger gt_MoveToCenter;
trigger gt_GrantToOffspring;
trigger gt_GrantKil;
trigger gt_stats;
trigger gt_SpeedGloveDialogCreations;
trigger gt_ShowHIdeSpeedGlove;
trigger gt_ActivateSpeedGlove;
trigger gt_SpeedSpecialtiesCreations;
trigger gt_ShowHIdeSpeedSpecialties;
trigger gt_ActivateSpeedSpecialties;
trigger gt_DamageBonusDialogCreations;
trigger gt_ShowHIdeDamageBonus;
trigger gt_ActivateDamageBonus;
trigger gt_VisionandRangeDialogCreations;
trigger gt_ShowHideVisionandRange;
trigger gt_ActivateVisionandRange;
trigger gt_SpeedBootsDialogCreation;
trigger gt_ShowHideSpeedBoots;
trigger gt_ActivateSpeedBoots;
trigger gt_SpeedCooldownDialogCreation;
trigger gt_ShowHideSpeedCooldown;
trigger gt_ActivateSpeedCooldown;
trigger gt_BonusVitalsDialogCreation;
trigger gt_ShowHideBonusVitals;
trigger gt_ActivateBonusVitals;
trigger gt_SpecialStatscreation;
trigger gt_ShowHIdeSpecialStats;
trigger gt_ActivateSpecialStats;
trigger gt_PowerUps;
trigger gt_ToggleDamageNumbers;
trigger gt_ShowDamageNumbersPlayer1;
trigger gt_ShowDamageNumbersPlayer2;
trigger gt_ShowDamageNumbersPlayer3;
trigger gt_ShowDamageNumbersPlayer4;
trigger gt_ShowDamageNumbersPlayer5;
trigger gt_ShowDamageNumbersPlayer6;
trigger gt_ShowDamageNumbersPlayer7;
trigger gt_ShowDamageNumbersPlayer8;
trigger gt_AddplayerstoTEAM;
trigger gt_RemoveSpeedBuff;
trigger gt_ReaddSpeedBuff;
trigger gt_tozergling;
trigger gt_toultra;
trigger gt_tolocust;
trigger gt_tospeedling;
trigger gt_toghoul;
trigger gt_tomix;
trigger gt_tobaneling;
trigger gt_tozombies;
trigger gt_toburrow;
trigger gt_tosupermix;
trigger gt_ClassInfoLinkCreation;
trigger gt_ActivateClassInfo;
trigger gt_ClassInfoCreation;
trigger gt_playerzm;
trigger gt_moneytime;
trigger gt_zombiekill;
trigger gt_skip;
trigger gt_SetWave;
trigger gt_SetWaveez;
trigger gt_commands;
trigger gt_suicide;
trigger gt_LeaverSuicide;
trigger gt_SoloDifficultyCreation;
trigger gt_ActivateSoloDifficulty;
trigger gt_SoloDifficultyCreation2;
trigger gt_ActivateSoloDifficulty2;
trigger gt_AdjustZombiesToPlayerSkill;
trigger gt_SoloFun;
trigger gt_ZombieChristmasGifts;
trigger gt_ZombieChristmasGiftReward;
trigger gt_textcheck;
trigger gt_ZombieTKSWavesZombieSpeedMode;
trigger gt_ZombieTKSWavesZombie;
trigger gt_ZombieTKSWavesZergling;
trigger gt_ZombieTKSWavesUltra;
trigger gt_ZombieTKSWavesLocusts;
trigger gt_ZombieTKSWavesMix;
trigger gt_ZombieTKSWavesLargeMix;
trigger gt_ZombieTKSWavesZombie180;
trigger gt_ZombieTKSWavesBurrowMix;
trigger gt_ZombieTKSWavesMegaMix;
trigger gt_ZombieTKSWavesSpeedling;
trigger gt_ZombieTKSWavesGhouls;
trigger gt_ZombieTKSWavesBrutalisk;
trigger gt_ZombieMax;
trigger gt_ZerglingMax;
trigger gt_UltraMax;
trigger gt_LocustsMax;
trigger gt_HydraMax;
trigger gt_BanelingMax;
trigger gt_QueenMax;
trigger gt_PrimalMax;
trigger gt_SuperBanelingMax;
trigger gt_GhoulMax;
trigger gt_BrutaliskMax;
trigger gt_Addunitstocounter;
trigger gt_RemoveunitsFromZombies;
trigger gt_AbominationLevel;
trigger gt_Wave5Zerglings;
trigger gt_Wave10RoachZergling;
trigger gt_Wave15RoachZergling;
trigger gt_Wave20Queens;
trigger gt_Wave25RandomZombies;
trigger gt_Wave30Hydralisk;
trigger gt_Wave35ZerglingRoachHydraliskQueen;
trigger gt_Wave40Ultralisk;
trigger gt_Wave45Baneling;
trigger gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach;
trigger gt_Wave55Overlords;
trigger gt_Wave60RandomAll;
trigger gt_Wave65Ravager;
trigger gt_Wave70TRex;
trigger gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex;
trigger gt_Wave80Aberration;
trigger gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation;
trigger gt_wave90zombiemachine;
trigger gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk;
trigger gt_Wave100InfestedSiegeTanks;
trigger gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank;
trigger gt_Wave110Abomination;
trigger gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination;
trigger gt_Wave120Tiger;
trigger gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker;
trigger gt_wave249Leviathan;
trigger gt_wave349Leviathan2;
trigger gt_wave998kerrigan;
trigger gt_info;
trigger gt_test;
trigger gt_challenges;
trigger gt_GrantKills;
trigger gt_FINALWAVE;
trigger gt_ActivateSpeedBuff3dmg14;
trigger gt_ActivateSpeedBuff3dmg13;
trigger gt_ModeBuffers;
trigger gt_ReadPlayerVote;
trigger gt_ElsePickNormal;
trigger gt_TimeLeftToVoteDialogCreation;
trigger gt_PeriodicAdjustTimetoVote;
trigger gt_PeriodicAdjustTimetoVoteT;
trigger gt_ChallengesDialogCreation;
trigger gt_VeryEasyDialogCreation;
trigger gt_ActivateVeryEasy;
trigger gt_EasyDialogCreation;
trigger gt_ActivateEasy;
trigger gt_NormalDialogCreation;
trigger gt_ActivateNormal;
trigger gt_HardDialogCreation;
trigger gt_ActivateHard;
trigger gt_CLInfantryDialogCreation;
trigger gt_ActivateCLInfantry;
trigger gt_VeryHardDialogCreation;
trigger gt_ActivateVeryHard;
trigger gt_CLConstructorDialogCreation;
trigger gt_ActivateCLConstructor;
trigger gt_BrutalDialogCreation;
trigger gt_ActivateBrutal;
trigger gt_CLTeamGameDialogCreation;
trigger gt_ActivateCLTeamGame;
trigger gt_CLEvasiveDialogCreation;
trigger gt_ActivateCLEvasive;
trigger gt_InsaneDialogCreation;
trigger gt_ActivateInsane;
trigger gt_NightmareDialogCreation;
trigger gt_ActivateNightmare;
trigger gt_DisasterDialogCreation;
trigger gt_ActivateDisaster;
trigger gt_ChaoticDialogCreation;
trigger gt_ActivateChaotic;
trigger gt_CLTortureDialogCreation;
trigger gt_ActivateCLTorture;
trigger gt_TormentDialogCreation;
trigger gt_ActivateTorment;
trigger gt_TormentIDialogCreation;
trigger gt_ActivateTormentI;
trigger gt_TormentIIDialogCreation;
trigger gt_ActivateTormentII;
trigger gt_AddZombieStatsToZombies;
trigger gt_AutoShowHelp;
trigger gt_CreateTips;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_KeyPressed (trigger lp_trigger, int lp_player, int lp_key, bool lp_down, int lp_shift, int lp_control, int lp_alt) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventKeyPressed (lp_trigger, lp_player, lp_key, lp_down, lp_shift, lp_control, lp_alt);
}

int gf_PlayerbyHandle (string lp_handle) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto206D2F86_g;
    int auto206D2F86_var;

    // Variable Initialization

    // Implementation
    auto206D2F86_g = gf_HumanPlayers();
    auto206D2F86_var = -1;
    while (true) {
        auto206D2F86_var = PlayerGroupNextPlayer(auto206D2F86_g, auto206D2F86_var);
        if (auto206D2F86_var < 0) { break; }
        if (((PlayerHandle(auto206D2F86_var) == lp_handle))) {
            lv_player = auto206D2F86_var;
        }

    }
    if (((GameIsTestMap(false) == true))) {
        lv_player = 1;
    }

    return lv_player;
}

playergroup gf_HumanPlayers () {
    // Variable Declarations
    playergroup lv_humans;

    // Automatic Variable Declarations
    playergroup autoD20E89F2_g;
    int autoD20E89F2_var;

    // Variable Initialization
    lv_humans = PlayerGroupEmpty();

    // Implementation
    autoD20E89F2_g = PlayerGroupAll();
    autoD20E89F2_var = -1;
    while (true) {
        autoD20E89F2_var = PlayerGroupNextPlayer(autoD20E89F2_g, autoD20E89F2_var);
        if (autoD20E89F2_var < 0) { break; }
        if ((PlayerType(autoD20E89F2_var) == c_playerTypeUser) && (PlayerStatus(autoD20E89F2_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_humans, autoD20E89F2_var);
        }

    }
    return lv_humans;
}

int gf_Numberofplayersselectinglistitem (int lp_listItem, int lp_dialogItem, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto7C29E8AC_g;
    int auto7C29E8AC_var;

    // Variable Initialization

    // Implementation
    auto7C29E8AC_g = lp_playerGroup;
    auto7C29E8AC_var = -1;
    while (true) {
        auto7C29E8AC_var = PlayerGroupNextPlayer(auto7C29E8AC_g, auto7C29E8AC_var);
        if (auto7C29E8AC_var < 0) { break; }
        if ((DialogControlGetSelectedItem(lp_dialogItem, auto7C29E8AC_var) == lp_listItem)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

//--------------------------------------------------------------------------------------------------
// Trigger: SecretBundle3Units
//--------------------------------------------------------------------------------------------------
bool gt_SecretBundle3Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8298616") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8146017") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6668462") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-787139") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4975450") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10043569") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2666085") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8188925") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6113000") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11726890") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2982839") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10776912") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1154174") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11319385") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7465362") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11876008") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1108413") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10902943") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10180843") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10719944") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11043425") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4311423") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7569487") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8498684") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4394295") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10320166") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-9760626") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4370786") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2198080") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11794034") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-955168") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8423519") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-9977361") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11959827") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-4477141") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5158354")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "HybridDestroyer")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "VeryVegiesPortraits", 1);
    if ((UnitGetType(EventUnit()) == "Colossus")) {
        UnitBehaviorAdd(EventUnit(), "PremiumSkins", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Colossus_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Battlecruiser")) {
        UnitBehaviorAdd(EventUnit(), "PremiumSkins", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap SS_Battlecruiser");
    }

    if ((UnitGetType(EventUnit()) == "HybridDestroyer")) {
        UnitBehaviorAdd(EventUnit(), "PremiumSkins", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap HybridBehemoth");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecretBundle3Units_Init () {
    gt_SecretBundle3Units = TriggerCreate("gt_SecretBundle3Units_Func");
    TriggerAddEventUnitRegion(gt_SecretBundle3Units, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GoldenBundle10Units
//--------------------------------------------------------------------------------------------------
bool gt_GoldenBundle10Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8298616") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10016234") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-7496106") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6668462") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-8068401") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-540364") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-9889809") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6204038") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2199781") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7931469") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5409171") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1634052") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-304694") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5618645") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10570642") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2093161") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-746971") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4028331") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4920636") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1078057") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-2180243") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6286203") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-3645935") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11659661") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-3739206") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-9587527") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-787139") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-1970070") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-7074273") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-1832827") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-8792070") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1047046") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2982839") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10776912") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1154174") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1039282") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-2-1574055") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-810536") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11319385") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7465362") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-961484") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10719944") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1052818") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1958411") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10180843") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-9613040") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-961484") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1047046") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10776912") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4217496") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5151655") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11185947") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7328924") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10340956") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2360100") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2840321") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2978872") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-9977361") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6332165") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6961772") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5737200") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10804052") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11050065") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-504013") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5158354") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-4477141") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-2190523")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Archon") || (UnitGetType(EventUnit()) == "Oracle") || (UnitGetType(EventUnit()) == "Mothership") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "Tempest") || (UnitGetType(EventUnit()) == "DarkTemplar") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "Stalker") || (UnitGetType(EventUnit()) == "Carrier")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GoldenBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "Colossus")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Colossus_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Archon")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Archon_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Oracle")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Oracle_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Mothership")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Mothership_Golden");
    }

    if ((UnitGetType(EventUnit()) == "HighTemplar")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap HighTemplar_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Tempest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Tempest_Golden");
    }

    if ((UnitGetType(EventUnit()) == "DarkTemplar")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap DarkTemplar_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Immortal")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Immortal_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Stalker")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Stalker_Golden");
    }

    if ((UnitGetType(EventUnit()) == "Carrier")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Carrier_Golden");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoldenBundle10Units_Init () {
    gt_GoldenBundle10Units = TriggerCreate("gt_GoldenBundle10Units_Func");
    TriggerAddEventUnitRegion(gt_GoldenBundle10Units, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MotherShipOnlySkins
//--------------------------------------------------------------------------------------------------
bool gt_MotherShipOnlySkins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10720643") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-8559852")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Mothership")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GoldenBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "Mothership")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Mothership_Golden");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MotherShipOnlySkins_Init () {
    gt_MotherShipOnlySkins = TriggerCreate("gt_MotherShipOnlySkins_Func");
    TriggerAddEventUnitRegion(gt_MotherShipOnlySkins, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TempestOnlySkins
//--------------------------------------------------------------------------------------------------
bool gt_TempestOnlySkins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10720643")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Tempest")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GoldenBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "Tempest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Tempest_Golden");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempestOnlySkins_Init () {
    gt_TempestOnlySkins = TriggerCreate("gt_TempestOnlySkins_Func");
    TriggerAddEventUnitRegion(gt_TempestOnlySkins, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CarrierOnlySkins
//--------------------------------------------------------------------------------------------------
bool gt_CarrierOnlySkins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8298616") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10016234") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-7496106") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6668462") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-8068401") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-540364") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-9889809") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6204038") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2199781") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7931469") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5409171") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1634052") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-304694") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5618645") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10570642") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2093161") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-746971") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4028331") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4920636") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1078057") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-2180243") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6286203") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-3645935") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11659661") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-3739206") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-9587527") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-787139") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-1970070") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-7074273") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-1832827") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-8792070") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1047046") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2982839") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10776912") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1154174") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1039282") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-2-1574055") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-810536") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11319385") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7465362") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-961484") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10719944") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1052818") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1958411") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10180843") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-9613040") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-961484") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1047046") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10776912") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4217496") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5151655") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11185947") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7328924") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10340956") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2360100") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2840321") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2978872") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4422546")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Carrier")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GoldenBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "Carrier")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Carrier_Golden");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrierOnlySkins_Init () {
    gt_CarrierOnlySkins = TriggerCreate("gt_CarrierOnlySkins_Func");
    TriggerAddEventUnitRegion(gt_CarrierOnlySkins, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColossusOnlySkin
//--------------------------------------------------------------------------------------------------
bool gt_ColossusOnlySkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-2-1736521") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-8559852")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Colossus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GoldenBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "Colossus")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Colossus_Golden");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusOnlySkin_Init () {
    gt_ColossusOnlySkin = TriggerCreate("gt_ColossusOnlySkin_Func");
    TriggerAddEventUnitRegion(gt_ColossusOnlySkin, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuilderBundle5Units
//--------------------------------------------------------------------------------------------------
bool gt_BuilderBundle5Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8298616") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7465362") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1052818") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10180843") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5618645") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11283512") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6668462") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-1154174") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-3418605") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7968679") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4217496") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11977187") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-5151655") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11319385") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10776912") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11185947") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-2937027") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-7328924") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10340956") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10340956") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4975450") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-3645935") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2360100") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2840321") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-955168") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2978872") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-9977361") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6332165") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6961772") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11050065") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10804052") || (PlayerHandle(UnitGetOwner(EventUnit())) == "2-S2-1-2190523")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "SCV2") || (UnitGetType(EventUnit()) == "MissileTurret") || (UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "Refinery") || (UnitGetType(EventUnit()) == "MinerMale") || (UnitGetType(EventUnit()) == "SentryGun") || (UnitGetType(EventUnit()) == "PoisonGasCloud") || (UnitGetType(EventUnit()) == "HERC") || (UnitGetType(EventUnit()) == "NukeSiloNova") || (UnitGetType(EventUnit()) == "UmojanLabMicrobot") || (UnitGetType(EventUnit()) == "Marauder") || (UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "EngineeringBay") || (UnitGetType(EventUnit()) == "BarracksTechLab") || (UnitGetType(EventUnit()) == "BarracksReactor") || (UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "SupplyDepotLowered") || (UnitGetType(EventUnit()) == "Bunker") || (UnitGetType(EventUnit()) == "Ghost2") || (UnitGetType(EventUnit()) == "WarPig") || (UnitGetType(EventUnit()) == "MercReaper") || (UnitGetType(EventUnit()) == "CorsairMP") || (UnitGetType(EventUnit()) == "RoboticsBay") || (UnitGetType(EventUnit()) == "Pylon") || (UnitGetType(EventUnit()) == "Obelisk") || (UnitGetType(EventUnit()) == "XelNagaTower") || (UnitGetType(EventUnit()) == "DarkShrine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "BuilderBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "SCV")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap SCV_Silver");
    }

    if ((UnitGetType(EventUnit()) == "CommandCenter")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap CommandCenter_Silver");
    }

    if ((UnitGetType(EventUnit()) == "MissileTurret")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap MissileTurret_Silver");
    }

    if ((UnitGetType(EventUnit()) == "Refinery")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Refinery_Silver");
    }

    if ((UnitGetType(EventUnit()) == "SCV2")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap SCV_Silver");
    }

    if ((UnitGetType(EventUnit()) == "MinerMale")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap PrisonerSpectre");
    }

    if ((UnitGetType(EventUnit()) == "SentryGun")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap GunTower");
    }

    if ((UnitGetType(EventUnit()) == "HERC")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap HERCHeavens");
    }

    if ((UnitGetType(EventUnit()) == "UmojanLabMicrobot")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap GhostAcademy_Silver");
    }

    if ((UnitGetType(EventUnit()) == "NukeSiloNova")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap MissileSilo");
    }

    if ((UnitGetType(EventUnit()) == "Marauder")) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("TerranBuild", 16), false);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Marauder_Silver");
    }

    if ((UnitGetType(EventUnit()) == "Barracks")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Barracks_Silver");
    }

    if ((UnitGetType(EventUnit()) == "EngineeringBay")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap EngineeringBay_Silver");
    }

    if ((UnitGetType(EventUnit()) == "BarracksTechLab")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap TechLab_Silver");
    }

    if ((UnitGetType(EventUnit()) == "BarracksReactor")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Reactor_Silver");
    }

    if ((UnitGetType(EventUnit()) == "SupplyDepot")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        UnitBehaviorAdd(EventUnit(), "PremiumSkins", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap SupplyDepot_Silver");
    }

    if ((UnitGetType(EventUnit()) == "Bunker")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Bunker_Silver_Upgrade");
    }

    if ((UnitGetType(EventUnit()) == "Ghost2")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Ghost_Silver");
    }

    if ((UnitGetType(EventUnit()) == "WarPig")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Marine_Silver");
    }

    if ((UnitGetType(EventUnit()) == "MercReaper")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Reaper_Silver");
    }

    if ((UnitGetType(EventUnit()) == "RoboticsBay")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap RoboticsBayPurifier");
    }

    if ((UnitGetType(EventUnit()) == "Pylon")) {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "CorsairVoidPylon1", c_techCountCompleteOnly) > 0)) {
            while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
                Wait(0.2, c_timeGame);
            }
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap PylonGun");
        }
        else {
            while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
                Wait(0.2, c_timeGame);
            }
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap PylonPurifier");
        }
    }

    if ((UnitGetType(EventUnit()) == "CorsairMP")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap CorsairPurifier");
    }

    if ((UnitGetType(EventUnit()) == "Obelisk")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap XelNagaObelisk");
    }

    if ((UnitGetType(EventUnit()) == "DarkShrine")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap DarkShrine_Forged");
    }

    if ((UnitGetType(EventUnit()) == "XelNagaTower")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap XelNagaTowerPurifier");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderBundle5Units_Init () {
    gt_BuilderBundle5Units = TriggerCreate("gt_BuilderBundle5Units_Func");
    TriggerAddEventUnitRegion(gt_BuilderBundle5Units, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CorsairOnlySkins
//--------------------------------------------------------------------------------------------------
bool gt_CorsairOnlySkins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6113000") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11726890") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10719944") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-2666085") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-10720643") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-4028331") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-6344063") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11882150")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "CorsairMP") || (UnitGetType(EventUnit()) == "RoboticsBay") || (UnitGetType(EventUnit()) == "Pylon") || (UnitGetType(EventUnit()) == "Obelisk") || (UnitGetType(EventUnit()) == "XelNagaTower") || (UnitGetType(EventUnit()) == "DarkShrine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "BuilderBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "RoboticsBay")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap RoboticsBayPurifier");
    }

    if ((UnitGetType(EventUnit()) == "Pylon")) {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "CorsairVoidPylon1", c_techCountCompleteOnly) > 0)) {
            while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
                Wait(0.2, c_timeGame);
            }
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap PylonGun");
        }
        else {
            while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
                Wait(0.2, c_timeGame);
            }
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap PylonPurifier");
        }
    }

    if ((UnitGetType(EventUnit()) == "CorsairMP")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap CorsairPurifier");
    }

    if ((UnitGetType(EventUnit()) == "Obelisk")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap XelNagaObelisk");
    }

    if ((UnitGetType(EventUnit()) == "DarkShrine")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap DarkShrine_Forged");
    }

    if ((UnitGetType(EventUnit()) == "XelNagaTower")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap XelNagaTowerPurifier");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorsairOnlySkins_Init () {
    gt_CorsairOnlySkins = TriggerCreate("gt_CorsairOnlySkins_Func");
    TriggerAddEventUnitRegion(gt_CorsairOnlySkins, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarauderOnlySkins
//--------------------------------------------------------------------------------------------------
bool gt_MarauderOnlySkins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-11726890") || (PlayerHandle(UnitGetOwner(EventUnit())) == "1-S2-1-8601750")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marauder") || (UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "EngineeringBay") || (UnitGetType(EventUnit()) == "BarracksTechLab") || (UnitGetType(EventUnit()) == "BarracksReactor") || (UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "SupplyDepotLowered") || (UnitGetType(EventUnit()) == "Bunker") || (UnitGetType(EventUnit()) == "Ghost2") || (UnitGetType(EventUnit()) == "WarPig") || (UnitGetType(EventUnit()) == "MercReaper")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "BuilderBundlePortraits", 1);
    if ((UnitGetType(EventUnit()) == "Marauder")) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("TerranBuild", 16), false);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Marauder_Silver");
    }

    if ((UnitGetType(EventUnit()) == "Barracks")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Barracks_Silver");
    }

    if ((UnitGetType(EventUnit()) == "EngineeringBay")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap EngineeringBay_Silver");
    }

    if ((UnitGetType(EventUnit()) == "BarracksTechLab")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap TechLab_Silver");
    }

    if ((UnitGetType(EventUnit()) == "BarracksReactor")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Reactor_Silver");
    }

    if ((UnitGetType(EventUnit()) == "SupplyDepot")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        UnitBehaviorAdd(EventUnit(), "PremiumSkins", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap SupplyDepot_Silver");
    }

    if ((UnitGetType(EventUnit()) == "Bunker")) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            Wait(0.2, c_timeGame);
        }
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Bunker_Silver_Upgrade");
    }

    if ((UnitGetType(EventUnit()) == "Ghost2")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Ghost_Silver");
    }

    if ((UnitGetType(EventUnit()) == "WarPig")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Marine_Silver");
    }

    if ((UnitGetType(EventUnit()) == "MercReaper")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "ModelSwap Reaper_Silver");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarauderOnlySkins_Init () {
    gt_MarauderOnlySkins = TriggerCreate("gt_MarauderOnlySkins_Func");
    TriggerAddEventUnitRegion(gt_MarauderOnlySkins, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HealBoss&Move
//--------------------------------------------------------------------------------------------------
bool gt_HealBossMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(74567088)), c_orderQueueReplace);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeRegen, 100000.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, 20000.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 1000.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 5.13);
    UnitWaitUntilIdle(EventUnit(), true);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeRegen, 15.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, 50.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 10.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 2.66);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealBossMove_Init () {
    gt_HealBossMove = TriggerCreate("gt_HealBossMove_Func");
    TriggerAddEventUnitRegion(gt_HealBossMove, UnitRefFromVariable("gv_leftBoss1"), RegionFromId(37), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LeftBossDies
//--------------------------------------------------------------------------------------------------
bool gt_LeftBossDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC55B5283_ae = 6;
    int autoC55B5283_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC55B5283_var = 1;
    for ( ; autoC55B5283_var <= autoC55B5283_ae; autoC55B5283_var += 1 ) {
        if ((PlayerGetPropertyInt(autoC55B5283_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoC55B5283_var, c_playerPropCustom, c_playerPropOperAdd, (gv_leftBossDeaths + 3));
        }

        UnitXPAddXP(gv_playerInfo[autoC55B5283_var].lv_hero, "CheckMyLevel", (250 + (gv_leftBossDeaths * 50)));
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/4A7B26A8"));
    gv_leftBossDeaths += 1;
    Wait(300.0, c_timeGame);
    UnitCreate(1, "Siegegolem", 0, 9, PointFromId(74567088), 270.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D56655D4"));
    UnitBehaviorAdd(UnitLastCreated(), "BossBuff", UnitLastCreated(), gv_leftBossDeaths);
    gv_leftBoss1 = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftBossDies_Init () {
    gt_LeftBossDies = TriggerCreate("gt_LeftBossDies_Func");
    TriggerAddEventUnitDied(gt_LeftBossDies, UnitRefFromVariable("gv_leftBoss1"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: HealBoss&Move 2
//--------------------------------------------------------------------------------------------------
bool gt_HealBossMove2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1927124558)), c_orderQueueReplace);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeRegen, 100000.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, 20000.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 1000.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 5.13);
    UnitWaitUntilIdle(EventUnit(), true);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeRegen, 15.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, 50.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 10.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 2.66);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealBossMove2_Init () {
    gt_HealBossMove2 = TriggerCreate("gt_HealBossMove2_Func");
    TriggerAddEventUnitRegion(gt_HealBossMove2, UnitRefFromVariable("gv_rightBoss1"), RegionFromId(56), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RightBossDies
//--------------------------------------------------------------------------------------------------
bool gt_RightBossDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto98C39D2C_ae = 6;
    int auto98C39D2C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto98C39D2C_var = 1;
    for ( ; auto98C39D2C_var <= auto98C39D2C_ae; auto98C39D2C_var += 1 ) {
        if ((PlayerGetPropertyInt(auto98C39D2C_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto98C39D2C_var, c_playerPropCustom, c_playerPropOperAdd, (gv_rightBossDeaths + 3));
        }

        UnitXPAddXP(gv_playerInfo[auto98C39D2C_var].lv_hero, "CheckMyLevel", (250 + (gv_rightBossDeaths * 50)));
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9A0AAC68"));
    gv_rightBossDeaths += 1;
    Wait(300.0, c_timeGame);
    UnitCreate(1, "Netherdragon", 0, 9, PointFromId(1927124558), 270.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/63637444"));
    UnitBehaviorAdd(UnitLastCreated(), "BossBuff", UnitLastCreated(), gv_rightBossDeaths);
    gv_rightBoss1 = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightBossDies_Init () {
    gt_RightBossDies = TriggerCreate("gt_RightBossDies_Func");
    TriggerAddEventUnitDied(gt_RightBossDies, UnitRefFromVariable("gv_rightBoss1"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddAllStats
//--------------------------------------------------------------------------------------------------
bool gt_AddAllStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_damagePoints += 500;
    gv_playerInfo[EventPlayer()].lv_moveSpeedPoints = 100;
    gv_playerInfo[EventPlayer()].lv_lifePoints += 500;
    gv_playerInfo[EventPlayer()].lv_shieldPoints += 500;
    gv_playerInfo[EventPlayer()].lv_mineralStartPoints = 5000;
    gv_playerInfo[EventPlayer()].lv_lifeRegenPoints += 500;
    gv_playerInfo[EventPlayer()].lv_shieldRegenPoints += 500;
    gv_playerInfo[EventPlayer()].lv_respawnTimerPoints = 20;
    gv_playerInfo[EventPlayer()].lv_energyPoints = 100;
    gv_playerInfo[EventPlayer()].lv_energyRegenPoints = 100;
    gv_playerInfo[EventPlayer()].lv_cooldownPoints = 25;
    gv_playerInfo[EventPlayer()].lv_vespeneStartPoints = 500;
    gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints = 100;
    gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints = 100;
    gv_playerInfo[EventPlayer()].lv_damageReductionPoints = 10;
    gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints = 50;
    gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints = 100;
    gv_playerInfo[EventPlayer()].lv_expPoints = 100;
    gv_playerInfo[EventPlayer()].lv_masteryPoints = 15;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddAllStats_Init () {
    gt_AddAllStats = TriggerCreate("gt_AddAllStats_Func");
    TriggerAddEventChatMessage(gt_AddAllStats, c_playerAny, "-Tp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Stats
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_showHideStats[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6F18907A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 665, 305);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/282B030B"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_showHideStats[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 98, 48);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_showHideStats[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_showHideStats[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideStats_Init () {
    gt_ShowHideStats = TriggerCreate("gt_ShowHideStats_Func");
    TriggerAddEventMapInit(gt_ShowHideStats);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open/Close Stats
//--------------------------------------------------------------------------------------------------
bool gt_OpenCloseStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_showHideStats[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_showHideStatsOnOff2 == 1)) {
        libNtve_gf_SetDialogItemText(gv_damageCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_damagePoints) + StringExternal("Param/Value/48F7A509")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_moveSpeedCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_moveSpeedPoints) + StringExternal("Param/Value/70B7F66D")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_energyCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_energyPoints) + StringExternal("Param/Value/EFD05BB9")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_lifeArmorCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints) + StringExternal("Param/Value/3E49E1EF")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_shieldArmorCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints) + StringExternal("Param/Value/16BD1DA2")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_shieldArmorMultiplierCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints) + StringExternal("Param/Value/179AD8F6")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_xpCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_expPoints) + StringExternal("Param/Value/6DD1685B")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_masterCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_masteryPoints) + StringExternal("Param/Value/C8217302")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_lifeArmorMultiplierCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints) + StringExternal("Param/Value/94F331F3")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_energyRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_energyRegenPoints) + StringExternal("Param/Value/867655A1")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_damageReductionCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_damageReductionPoints) + StringExternal("Param/Value/167D8709")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_cooldownCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_cooldownPoints) + StringExternal("Param/Value/30B92982")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_lifeCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifePoints) + StringExternal("Param/Value/74CE2EB4")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_shieldCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldPoints) + StringExternal("Param/Value/2391149C")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_mineralStartCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_mineralStartPoints) + StringExternal("Param/Value/F3C65E37")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_vespeneStartCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_vespeneStartPoints) + StringExternal("Param/Value/99E38E3B")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_respawnTimeCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_respawnTimerPoints) + StringExternal("Param/Value/AD6655B1")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_lifeRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeRegenPoints) + StringExternal("Param/Value/049A9A2C")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_shieldRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldRegenPoints) + StringExternal("Param/Value/135B554D")), PlayerGroupSingle(EventPlayer()));
        DialogControlSetVisible(gv_statsMenu[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_menuText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_damageCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_damageText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addDamage[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addDamage[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractDamage[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractDamage[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldArmorCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldArmorText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShieldArmor[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShieldArmor[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShieldArmor[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShieldArmor[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldArmorMultiplierCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldArmorMultiplierText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShieldArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShieldArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShieldArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShieldArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_moveSpeedCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_moveSpeedText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addMoveSpeed[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addMoveSpeed[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractMoveSpeed[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractMoveSpeed[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_damageReductionCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_damageReductionText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addDamageReduction[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addDamageReduction[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractDamageReduction[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractDamageReduction[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_energyCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_energyText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addEnergy[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addEnergy[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractEnergy[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractEnergy[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_energyRegenCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_energyRegenText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addEnergyRegen[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addEnergyRegen[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractEnergyRegen[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractEnergyRegen[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeArmorCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeArmorText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLifeArmor[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLifeArmor[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLifeArmor[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLifeArmor[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeArmorMultiplierCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeArmorMultiplierText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLifeArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLifeArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLifeArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLifeArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLife[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLife[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLife[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLife[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_xpCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_xpText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addXp[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addXp[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractXp[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractXp[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_masterCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_masteryText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addMastery[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addMastery[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractMastery[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractMastery[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_cooldownCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_cooldownText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addCooldown[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addCooldown[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractCooldown[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractCooldown[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_mineralStartCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_mineralStartText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addMineralStart[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addMineralStart[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_vespeneStartCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_vespeneStartText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addVespeneStart[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addVespeneStart[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeRegenCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_lifeRegenText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLifeRegen[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addLifeRegen[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLifeRegen[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractLifeRegen[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_respawnTimeCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_respawnTimeText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addRespawnTime[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addRespawnTime[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShield[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShield[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShield[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShield[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldRegenCount[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_shieldRegenText[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShieldRegen[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_addShieldRegen[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShieldRegen[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_subtractShieldRegen[2], PlayerGroupSingle(EventPlayer()), true);
        gv_showHideStatsOnOff2 = 2;
        libNtve_gf_SetDialogItemText(gv_showHideStats[1], StringExternal("Param/Value/E39743B8"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((gv_showHideStatsOnOff2 == 2)) {
            DialogControlSetVisible(gv_statsMenu[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_menuText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_damageCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_damageText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addDamage[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addDamage[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractDamage[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractDamage[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldArmorCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldArmorText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShieldArmor[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShieldArmor[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShieldArmor[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShieldArmor[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldArmorMultiplierCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldArmorMultiplierText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShieldArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShieldArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShieldArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShieldArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_moveSpeedCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_moveSpeedText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addMoveSpeed[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addMoveSpeed[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractMoveSpeed[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractMoveSpeed[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_damageReductionCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_damageReductionText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addDamageReduction[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addDamageReduction[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractDamageReduction[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractDamageReduction[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_energyCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_energyText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addEnergy[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addEnergy[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractEnergy[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractEnergy[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeArmorCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeArmorText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLifeArmor[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLifeArmor[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLifeArmor[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLifeArmor[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeArmorMultiplierCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeArmorMultiplierText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLifeArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLifeArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLifeArmorMultiplier[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLifeArmorMultiplier[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_xpCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_xpText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addXp[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addXp[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractXp[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractXp[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_masterCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_masteryText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addMastery[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addMastery[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractMastery[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractMastery[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_energyRegenCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_energyRegenText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addEnergyRegen[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addEnergyRegen[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractEnergyRegen[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractEnergyRegen[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLife[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLife[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLife[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLife[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_cooldownCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_cooldownText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addCooldown[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addCooldown[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractCooldown[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractCooldown[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_mineralStartCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_mineralStartText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addMineralStart[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addMineralStart[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_vespeneStartCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_vespeneStartText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addVespeneStart[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addVespeneStart[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeRegenCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_lifeRegenText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLifeRegen[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addLifeRegen[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLifeRegen[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractLifeRegen[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_respawnTimeCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_respawnTimeText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addRespawnTime[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addRespawnTime[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShield[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShield[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShield[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShield[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldRegenCount[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_shieldRegenText[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShieldRegen[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_addShieldRegen[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShieldRegen[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_subtractShieldRegen[2], PlayerGroupSingle(EventPlayer()), false);
            gv_showHideStatsOnOff2 = 1;
            libNtve_gf_SetDialogItemText(gv_showHideStats[1], StringExternal("Param/Value/CBDA4293"), PlayerGroupSingle(EventPlayer()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenCloseStats_Init () {
    gt_OpenCloseStats = TriggerCreate("gt_OpenCloseStats_Func");
    TriggerEnable(gt_OpenCloseStats, false);
    TriggerAddEventDialogControl(gt_OpenCloseStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StatsMenuCreation
//--------------------------------------------------------------------------------------------------
bool gt_StatsMenuCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/400CA53F"), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_statsMenu[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/ED605C13"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1050, 900);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -75, -75);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_statsMenu[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1050, 900);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_statsMenu[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(gv_statsMenu[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsMenuCreation_Init () {
    gt_StatsMenuCreation = TriggerCreate("gt_StatsMenuCreation_Func");
    TriggerAddEventMapInit(gt_StatsMenuCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MenuTextCreation
//--------------------------------------------------------------------------------------------------
bool gt_MenuTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_menuText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E22357D6"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 350, 75);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -45, -450);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5F83E806"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_menuText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_menuText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_menuText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_menuText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MenuTextCreation_Init () {
    gt_MenuTextCreation = TriggerCreate("gt_MenuTextCreation_Func");
    TriggerAddEventMapInit(gt_MenuTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageText Creation
//--------------------------------------------------------------------------------------------------
bool gt_DamageTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_damageText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E8E794B1"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9317BA3E"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_damageText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_damageText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_damageText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_damageText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageTextCreation_Init () {
    gt_DamageTextCreation = TriggerCreate("gt_DamageTextCreation_Func");
    TriggerAddEventMapInit(gt_DamageTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_DamageCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_damageCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(0), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_damageCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_damageCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_damageCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_damageCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageCountCreation_Init () {
    gt_DamageCountCreation = TriggerCreate("gt_DamageCountCreation_Func");
    TriggerAddEventMapInit(gt_DamageCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddDamage Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddDamageCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addDamage[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addDamage[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addDamage[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addDamage[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addDamage[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddDamageCreation_Init () {
    gt_AddDamageCreation = TriggerCreate("gt_AddDamageCreation_Func");
    TriggerAddEventMapInit(gt_AddDamageCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddDamage Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddDamageActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addDamage[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 10))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_damagePoints < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_damagePoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 10);
    libNtve_gf_SetDialogItemText(gv_damageCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_damagePoints) + StringExternal("Param/Value/1AC2EFD3")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1001", 1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1002", 1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1003", 1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1004", 1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1005", 1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1006", 1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1007", 1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1008", 1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1009", 1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints10010", 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddDamageActivate_Init () {
    gt_AddDamageActivate = TriggerCreate("gt_AddDamageActivate_Func");
    TriggerAddEventDialogControl(gt_AddDamageActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractDamage Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractDamageCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractDamage[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractDamage[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractDamage[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractDamage[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractDamage[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractDamageCreation_Init () {
    gt_SubtractDamageCreation = TriggerCreate("gt_SubtractDamageCreation_Func");
    TriggerAddEventMapInit(gt_SubtractDamageCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractDamage Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractDamageActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractDamage[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_damagePoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_damagePoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 10);
    libNtve_gf_SetDialogItemText(gv_damageCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_damagePoints) + StringExternal("Param/Value/12740BB1")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1001", -1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1002", -1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1003", -1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1004", -1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1005", -1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1006", -1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1007", -1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1008", -1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints1009", -1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_damagePoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "DamagePoints10010", -1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractDamageActivate_Init () {
    gt_SubtractDamageActivate = TriggerCreate("gt_SubtractDamageActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractDamageActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveSpeedText Creation
//--------------------------------------------------------------------------------------------------
bool gt_MoveSpeedTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_moveSpeedText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DE6A120D"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/766E3F46"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_moveSpeedText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_moveSpeedText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_moveSpeedText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_moveSpeedText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveSpeedTextCreation_Init () {
    gt_MoveSpeedTextCreation = TriggerCreate("gt_MoveSpeedTextCreation_Func");
    TriggerAddEventMapInit(gt_MoveSpeedTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveSpeedCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_MoveSpeedCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_moveSpeedCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6D6F8430"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_moveSpeedCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_moveSpeedCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_moveSpeedCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_moveSpeedCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveSpeedCountCreation_Init () {
    gt_MoveSpeedCountCreation = TriggerCreate("gt_MoveSpeedCountCreation_Func");
    TriggerAddEventMapInit(gt_MoveSpeedCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMoveSpeed Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddMoveSpeedCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addMoveSpeed[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addMoveSpeed[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addMoveSpeed[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addMoveSpeed[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addMoveSpeed[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMoveSpeedCreation_Init () {
    gt_AddMoveSpeedCreation = TriggerCreate("gt_AddMoveSpeedCreation_Func");
    TriggerAddEventMapInit(gt_AddMoveSpeedCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMoveSpeed Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddMoveSpeedActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addMoveSpeed[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 2))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_moveSpeedPoints < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_moveSpeedPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 2);
    libNtve_gf_SetDialogItemText(gv_moveSpeedCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_moveSpeedPoints) + StringExternal("Param/Value/3CF07426")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "MoveSpeedPoints100", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMoveSpeedActivate_Init () {
    gt_AddMoveSpeedActivate = TriggerCreate("gt_AddMoveSpeedActivate_Func");
    TriggerAddEventDialogControl(gt_AddMoveSpeedActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractMoveSpeed Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractMoveSpeedCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractMoveSpeed[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractMoveSpeed[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractMoveSpeed[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractMoveSpeed[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractMoveSpeed[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractMoveSpeedCreation_Init () {
    gt_SubtractMoveSpeedCreation = TriggerCreate("gt_SubtractMoveSpeedCreation_Func");
    TriggerAddEventMapInit(gt_SubtractMoveSpeedCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractMoveSpeed Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractMoveSpeedActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractMoveSpeed[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_moveSpeedPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_moveSpeedPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 2);
    libNtve_gf_SetDialogItemText(gv_moveSpeedCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_moveSpeedPoints) + StringExternal("Param/Value/C9D02327")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "MoveSpeedPoints100", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractMoveSpeedActivate_Init () {
    gt_SubtractMoveSpeedActivate = TriggerCreate("gt_SubtractMoveSpeedActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractMoveSpeedActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyTextCreation
//--------------------------------------------------------------------------------------------------
bool gt_EnergyTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_energyText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5FDABE0B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8F175A6C"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_energyText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_energyText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_energyText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_energyText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyTextCreation_Init () {
    gt_EnergyTextCreation = TriggerCreate("gt_EnergyTextCreation_Func");
    TriggerAddEventMapInit(gt_EnergyTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_EnergyCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_energyCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C723CF52"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_energyCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_energyCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_energyCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_energyCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyCountCreation_Init () {
    gt_EnergyCountCreation = TriggerCreate("gt_EnergyCountCreation_Func");
    TriggerAddEventMapInit(gt_EnergyCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddEnergy Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddEnergyCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addEnergy[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addEnergy[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addEnergy[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addEnergy[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addEnergy[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddEnergyCreation_Init () {
    gt_AddEnergyCreation = TriggerCreate("gt_AddEnergyCreation_Func");
    TriggerAddEventMapInit(gt_AddEnergyCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddEnergy Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddEnergyActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addEnergy[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 375))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_energyPoints < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_energyPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 375);
    libNtve_gf_SetDialogItemText(gv_energyCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_energyPoints) + StringExternal("Param/Value/46B074D7")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "EnergyPoints10", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddEnergyActivate_Init () {
    gt_AddEnergyActivate = TriggerCreate("gt_AddEnergyActivate_Func");
    TriggerAddEventDialogControl(gt_AddEnergyActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractEnergy Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractEnergyCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractEnergy[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractEnergy[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractEnergy[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractEnergy[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractEnergy[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractEnergyCreation_Init () {
    gt_SubtractEnergyCreation = TriggerCreate("gt_SubtractEnergyCreation_Func");
    TriggerAddEventMapInit(gt_SubtractEnergyCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractEnergy Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractEnergyActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractEnergy[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_energyPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_energyPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 375);
    libNtve_gf_SetDialogItemText(gv_energyCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_energyPoints) + StringExternal("Param/Value/ECE496B3")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "EnergyPoints10", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractEnergyActivate_Init () {
    gt_SubtractEnergyActivate = TriggerCreate("gt_SubtractEnergyActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractEnergyActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyRegenText Creation
//--------------------------------------------------------------------------------------------------
bool gt_EnergyRegenTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_energyRegenText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/24788095"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, 50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/15C17087"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_energyRegenText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_energyRegenText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_energyRegenText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_energyRegenText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyRegenTextCreation_Init () {
    gt_EnergyRegenTextCreation = TriggerCreate("gt_EnergyRegenTextCreation_Func");
    TriggerAddEventMapInit(gt_EnergyRegenTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyRegenCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_EnergyRegenCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_energyRegenCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D81EEC53"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_energyRegenCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_energyRegenCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_energyRegenCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_energyRegenCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyRegenCountCreation_Init () {
    gt_EnergyRegenCountCreation = TriggerCreate("gt_EnergyRegenCountCreation_Func");
    TriggerAddEventMapInit(gt_EnergyRegenCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddEnergyRegen Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddEnergyRegenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addEnergyRegen[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addEnergyRegen[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addEnergyRegen[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addEnergyRegen[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addEnergyRegen[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddEnergyRegenCreation_Init () {
    gt_AddEnergyRegenCreation = TriggerCreate("gt_AddEnergyRegenCreation_Func");
    TriggerAddEventMapInit(gt_AddEnergyRegenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddEnergyRegen Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddEnergyRegenActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addEnergyRegen[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 425))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_energyRegenPoints < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_energyRegenPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 425);
    libNtve_gf_SetDialogItemText(gv_energyRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_energyRegenPoints) + StringExternal("Param/Value/AD64A10A")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "EnergyRegenPoints10", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddEnergyRegenActivate_Init () {
    gt_AddEnergyRegenActivate = TriggerCreate("gt_AddEnergyRegenActivate_Func");
    TriggerAddEventDialogControl(gt_AddEnergyRegenActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractEnergyRegen Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractEnergyRegenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractEnergyRegen[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, 50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractEnergyRegen[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractEnergyRegen[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractEnergyRegen[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractEnergyRegen[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractEnergyRegenCreation_Init () {
    gt_SubtractEnergyRegenCreation = TriggerCreate("gt_SubtractEnergyRegenCreation_Func");
    TriggerAddEventMapInit(gt_SubtractEnergyRegenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractEnergyRegen Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractEnergyRegenActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractEnergyRegen[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_energyRegenPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_energyRegenPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 425);
    libNtve_gf_SetDialogItemText(gv_energyRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_energyRegenPoints) + StringExternal("Param/Value/A8D6BB57")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "EnergyRegenPoints10", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractEnergyRegenActivate_Init () {
    gt_SubtractEnergyRegenActivate = TriggerCreate("gt_SubtractEnergyRegenActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractEnergyRegenActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CooldownText Creation
//--------------------------------------------------------------------------------------------------
bool gt_CooldownTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_cooldownText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C468A047"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, 100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6660F787"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cooldownText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cooldownText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_cooldownText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_cooldownText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CooldownTextCreation_Init () {
    gt_CooldownTextCreation = TriggerCreate("gt_CooldownTextCreation_Func");
    TriggerAddEventMapInit(gt_CooldownTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CooldownCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_CooldownCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_cooldownCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/93A19D3A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cooldownCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cooldownCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_cooldownCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_cooldownCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CooldownCountCreation_Init () {
    gt_CooldownCountCreation = TriggerCreate("gt_CooldownCountCreation_Func");
    TriggerAddEventMapInit(gt_CooldownCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddCooldown Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddCooldownCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addCooldown[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addCooldown[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addCooldown[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addCooldown[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addCooldown[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddCooldownCreation_Init () {
    gt_AddCooldownCreation = TriggerCreate("gt_AddCooldownCreation_Func");
    TriggerAddEventMapInit(gt_AddCooldownCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddCooldown Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddCooldownActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addCooldown[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 2250))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_cooldownPoints < 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_cooldownPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 2250);
    libNtve_gf_SetDialogItemText(gv_cooldownCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_cooldownPoints) + StringExternal("Param/Value/AF73CF74")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "CooldownPoints25", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddCooldownActivate_Init () {
    gt_AddCooldownActivate = TriggerCreate("gt_AddCooldownActivate_Func");
    TriggerAddEventDialogControl(gt_AddCooldownActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractCooldown Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractCooldownCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractCooldown[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, 100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractCooldown[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractCooldown[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractCooldown[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractCooldown[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractCooldownCreation_Init () {
    gt_SubtractCooldownCreation = TriggerCreate("gt_SubtractCooldownCreation_Func");
    TriggerAddEventMapInit(gt_SubtractCooldownCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractCooldown Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractCooldownActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractCooldown[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_cooldownPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_cooldownPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 2250);
    libNtve_gf_SetDialogItemText(gv_cooldownCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_cooldownPoints) + StringExternal("Param/Value/31CC30A3")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "CooldownPoints25", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractCooldownActivate_Init () {
    gt_SubtractCooldownActivate = TriggerCreate("gt_SubtractCooldownActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractCooldownActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeAmorTextCreation
//--------------------------------------------------------------------------------------------------
bool gt_LifeAmorTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeArmorText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2FF5F60A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, 200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/546CAE32"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeArmorText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeArmorText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeArmorText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeArmorText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeAmorTextCreation_Init () {
    gt_LifeAmorTextCreation = TriggerCreate("gt_LifeAmorTextCreation_Func");
    TriggerAddEventMapInit(gt_LifeAmorTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeArmorCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_LifeArmorCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeArmorCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BBD5B56E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeArmorCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeArmorCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeArmorCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeArmorCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeArmorCountCreation_Init () {
    gt_LifeArmorCountCreation = TriggerCreate("gt_LifeArmorCountCreation_Func");
    TriggerAddEventMapInit(gt_LifeArmorCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLifeArmor Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeArmorCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addLifeArmor[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addLifeArmor[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addLifeArmor[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addLifeArmor[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addLifeArmor[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeArmorCreation_Init () {
    gt_AddLifeArmorCreation = TriggerCreate("gt_AddLifeArmorCreation_Func");
    TriggerAddEventMapInit(gt_AddLifeArmorCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLifeArmor Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeArmorActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addLifeArmor[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 625))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 625);
    libNtve_gf_SetDialogItemText(gv_lifeArmorCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints) + StringExternal("Param/Value/D48FF05D")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "LifeArmorBonusPoints100", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeArmorActivate_Init () {
    gt_AddLifeArmorActivate = TriggerCreate("gt_AddLifeArmorActivate_Func");
    TriggerAddEventDialogControl(gt_AddLifeArmorActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLifeArmor Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeArmorCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractLifeArmor[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, 200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractLifeArmor[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractLifeArmor[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractLifeArmor[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractLifeArmor[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeArmorCreation_Init () {
    gt_SubtractLifeArmorCreation = TriggerCreate("gt_SubtractLifeArmorCreation_Func");
    TriggerAddEventMapInit(gt_SubtractLifeArmorCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLifeArmor Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeArmorActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractLifeArmor[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 625);
    libNtve_gf_SetDialogItemText(gv_lifeArmorCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeArmorBonusPoints) + StringExternal("Param/Value/B12BA56F")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "LifeArmorBonusPoints100", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeArmorActivate_Init () {
    gt_SubtractLifeArmorActivate = TriggerCreate("gt_SubtractLifeArmorActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractLifeArmorActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldArmorText Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldArmorTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldArmorText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E4FBDAB6"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 75, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/519FF47D"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldArmorText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldArmorText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldArmorText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldArmorText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldArmorTextCreation_Init () {
    gt_ShieldArmorTextCreation = TriggerCreate("gt_ShieldArmorTextCreation_Func");
    TriggerAddEventMapInit(gt_ShieldArmorTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldArmorCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldArmorCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldArmorCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/711FE827"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 275, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldArmorCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldArmorCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldArmorCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldArmorCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldArmorCountCreation_Init () {
    gt_ShieldArmorCountCreation = TriggerCreate("gt_ShieldArmorCountCreation_Func");
    TriggerAddEventMapInit(gt_ShieldArmorCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShieldArmor Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldArmorCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addShieldArmor[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addShieldArmor[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addShieldArmor[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addShieldArmor[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addShieldArmor[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldArmorCreation_Init () {
    gt_AddShieldArmorCreation = TriggerCreate("gt_AddShieldArmorCreation_Func");
    TriggerAddEventMapInit(gt_AddShieldArmorCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShieldArmor Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldArmorActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addShieldArmor[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 325))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints < 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 325);
    libNtve_gf_SetDialogItemText(gv_shieldArmorCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints) + StringExternal("Param/Value/9A259E24")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldArmorBonusPoints50", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldArmorActivate_Init () {
    gt_AddShieldArmorActivate = TriggerCreate("gt_AddShieldArmorActivate_Func");
    TriggerAddEventDialogControl(gt_AddShieldArmorActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShieldArmor Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldArmorCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractShieldArmor[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 390, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractShieldArmor[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractShieldArmor[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractShieldArmor[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractShieldArmor[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldArmorCreation_Init () {
    gt_SubtractShieldArmorCreation = TriggerCreate("gt_SubtractShieldArmorCreation_Func");
    TriggerAddEventMapInit(gt_SubtractShieldArmorCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShieldArmor Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldArmorActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractShieldArmor[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 325);
    libNtve_gf_SetDialogItemText(gv_shieldArmorCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldArmorBonusPoints) + StringExternal("Param/Value/35C2C3E5")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldArmorBonusPoints50", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldArmorActivate_Init () {
    gt_SubtractShieldArmorActivate = TriggerCreate("gt_SubtractShieldArmorActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractShieldArmorActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldArmorMultiplierText Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldArmorMultiplierTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldArmorMultiplierText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BA7DDFB4"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 75, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AB33E2C4"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldArmorMultiplierText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldArmorMultiplierText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldArmorMultiplierText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldArmorMultiplierText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldArmorMultiplierTextCreation_Init () {
    gt_ShieldArmorMultiplierTextCreation = TriggerCreate("gt_ShieldArmorMultiplierTextCreation_Func");
    TriggerAddEventMapInit(gt_ShieldArmorMultiplierTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldArmorMultiplierCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldArmorMultiplierCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldArmorMultiplierCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BECF3323"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 275, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldArmorMultiplierCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldArmorMultiplierCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldArmorMultiplierCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldArmorMultiplierCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldArmorMultiplierCountCreation_Init () {
    gt_ShieldArmorMultiplierCountCreation = TriggerCreate("gt_ShieldArmorMultiplierCountCreation_Func");
    TriggerAddEventMapInit(gt_ShieldArmorMultiplierCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShieldArmorMultiplier Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldArmorMultiplierCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addShieldArmorMultiplier[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addShieldArmorMultiplier[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addShieldArmorMultiplier[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addShieldArmorMultiplier[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addShieldArmorMultiplier[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldArmorMultiplierCreation_Init () {
    gt_AddShieldArmorMultiplierCreation = TriggerCreate("gt_AddShieldArmorMultiplierCreation_Func");
    TriggerAddEventMapInit(gt_AddShieldArmorMultiplierCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShieldArmorMultiplier Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldArmorMultiplierActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addShieldArmorMultiplier[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 225))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 225);
    libNtve_gf_SetDialogItemText(gv_shieldArmorMultiplierCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints) + StringExternal("Param/Value/3F004F58")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldArmorBonusPoints50", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldArmorMultiplierActivate_Init () {
    gt_AddShieldArmorMultiplierActivate = TriggerCreate("gt_AddShieldArmorMultiplierActivate_Func");
    TriggerAddEventDialogControl(gt_AddShieldArmorMultiplierActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShieldArmorMultiplier Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldArmorMultiplierCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractShieldArmorMultiplier[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 390, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractShieldArmorMultiplier[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractShieldArmorMultiplier[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractShieldArmorMultiplier[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractShieldArmorMultiplier[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldArmorMultiplierCreation_Init () {
    gt_SubtractShieldArmorMultiplierCreation = TriggerCreate("gt_SubtractShieldArmorMultiplierCreation_Func");
    TriggerAddEventMapInit(gt_SubtractShieldArmorMultiplierCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShieldArmorMultiplier Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldArmorMultiplierActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractShieldArmorMultiplier[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 225);
    libNtve_gf_SetDialogItemText(gv_shieldArmorMultiplierCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldArmorMultiplyPoints) + StringExternal("Param/Value/C69259E6")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldArmorBonusPoints50", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldArmorMultiplierActivate_Init () {
    gt_SubtractShieldArmorMultiplierActivate = TriggerCreate("gt_SubtractShieldArmorMultiplierActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractShieldArmorMultiplierActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XpText Creation
//--------------------------------------------------------------------------------------------------
bool gt_XpTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_xpText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/FB6938D5"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 75, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FD01E224"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_xpText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_xpText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_xpText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_xpText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XpTextCreation_Init () {
    gt_XpTextCreation = TriggerCreate("gt_XpTextCreation_Func");
    TriggerAddEventMapInit(gt_XpTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XpCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_XpCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_xpCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5A71EB27"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 275, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_xpCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_xpCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_xpCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_xpCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XpCountCreation_Init () {
    gt_XpCountCreation = TriggerCreate("gt_XpCountCreation_Func");
    TriggerAddEventMapInit(gt_XpCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddXp Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddXpCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addXp[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addXp[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addXp[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addXp[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addXp[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddXpCreation_Init () {
    gt_AddXpCreation = TriggerCreate("gt_AddXpCreation_Func");
    TriggerAddEventMapInit(gt_AddXpCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddXp Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddXpActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addXp[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 300))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_expPoints < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_expPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 300);
    libNtve_gf_SetDialogItemText(gv_xpCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_expPoints) + StringExternal("Param/Value/86ABABC7")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "EXPPoints100", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddXpActivate_Init () {
    gt_AddXpActivate = TriggerCreate("gt_AddXpActivate_Func");
    TriggerAddEventDialogControl(gt_AddXpActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractXp Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractXpCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractXp[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 390, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractXp[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractXp[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractXp[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractXp[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractXpCreation_Init () {
    gt_SubtractXpCreation = TriggerCreate("gt_SubtractXpCreation_Func");
    TriggerAddEventMapInit(gt_SubtractXpCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractXp Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractXpActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractXp[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_expPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_expPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 300);
    libNtve_gf_SetDialogItemText(gv_xpCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_expPoints) + StringExternal("Param/Value/F7F81DD7")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "EXPPoints100", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractXpActivate_Init () {
    gt_SubtractXpActivate = TriggerCreate("gt_SubtractXpActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractXpActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MasteryText Creation
//--------------------------------------------------------------------------------------------------
bool gt_MasteryTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_masteryText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1CF457FF"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 75, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9E0A8AE4"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_masteryText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_masteryText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_masteryText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_masteryText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryTextCreation_Init () {
    gt_MasteryTextCreation = TriggerCreate("gt_MasteryTextCreation_Func");
    TriggerAddEventMapInit(gt_MasteryTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MasteryCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_MasteryCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_masterCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/FFBB963E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 275, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_masterCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_masterCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_masterCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_masterCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryCountCreation_Init () {
    gt_MasteryCountCreation = TriggerCreate("gt_MasteryCountCreation_Func");
    TriggerAddEventMapInit(gt_MasteryCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMastery Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddMasteryCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addMastery[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addMastery[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addMastery[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addMastery[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addMastery[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMasteryCreation_Init () {
    gt_AddMasteryCreation = TriggerCreate("gt_AddMasteryCreation_Func");
    TriggerAddEventMapInit(gt_AddMasteryCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMastery Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddMasteryActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addMastery[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 20000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_masteryPoints < 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_masteryPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 20000);
    libNtve_gf_SetDialogItemText(gv_masterCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_masteryPoints) + StringExternal("Param/Value/BCE8D149")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "MasteryPoints15", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMasteryActivate_Init () {
    gt_AddMasteryActivate = TriggerCreate("gt_AddMasteryActivate_Func");
    TriggerAddEventDialogControl(gt_AddMasteryActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractMastery Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractMasteryCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractMastery[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 390, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractMastery[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractMastery[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractMastery[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractMastery[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractMasteryCreation_Init () {
    gt_SubtractMasteryCreation = TriggerCreate("gt_SubtractMasteryCreation_Func");
    TriggerAddEventMapInit(gt_SubtractMasteryCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractMastery Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractMasteryActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractMastery[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 25000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_masteryPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_masteryPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 20000);
    libNtve_gf_SetDialogItemText(gv_masterCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_masteryPoints) + StringExternal("Param/Value/DBA4E52B")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "MasteryPoints15", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractMasteryActivate_Init () {
    gt_SubtractMasteryActivate = TriggerCreate("gt_SubtractMasteryActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractMasteryActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageReductionText Creation
//--------------------------------------------------------------------------------------------------
bool gt_DamageReductionTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_damageReductionText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BC1AE10B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, 300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/19B445CF"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_damageReductionText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_damageReductionText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_damageReductionText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_damageReductionText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageReductionTextCreation_Init () {
    gt_DamageReductionTextCreation = TriggerCreate("gt_DamageReductionTextCreation_Func");
    TriggerAddEventMapInit(gt_DamageReductionTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageReductionCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_DamageReductionCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_damageReductionCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D87C1A0A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_damageReductionCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_damageReductionCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_damageReductionCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_damageReductionCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageReductionCountCreation_Init () {
    gt_DamageReductionCountCreation = TriggerCreate("gt_DamageReductionCountCreation_Func");
    TriggerAddEventMapInit(gt_DamageReductionCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddDamageReduction Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddDamageReductionCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addDamageReduction[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addDamageReduction[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addDamageReduction[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addDamageReduction[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addDamageReduction[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddDamageReductionCreation_Init () {
    gt_AddDamageReductionCreation = TriggerCreate("gt_AddDamageReductionCreation_Func");
    TriggerAddEventMapInit(gt_AddDamageReductionCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddDamageReduction Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddDamageReductionActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addDamageReduction[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 3250))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_damageReductionPoints < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_damageReductionPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 3250);
    libNtve_gf_SetDialogItemText(gv_damageReductionCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_damageReductionPoints) + StringExternal("Param/Value/92E18704")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "DamageReductionPoints10", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddDamageReductionActivate_Init () {
    gt_AddDamageReductionActivate = TriggerCreate("gt_AddDamageReductionActivate_Func");
    TriggerAddEventDialogControl(gt_AddDamageReductionActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractDamageReduction Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractDamageReductionCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractDamageReduction[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, 300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractDamageReduction[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractDamageReduction[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractDamageReduction[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractDamageReduction[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractDamageReductionCreation_Init () {
    gt_SubtractDamageReductionCreation = TriggerCreate("gt_SubtractDamageReductionCreation_Func");
    TriggerAddEventMapInit(gt_SubtractDamageReductionCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractDamageReduction Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractDamageReductionActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractDamageReduction[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_damageReductionPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_damageReductionPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 3250);
    libNtve_gf_SetDialogItemText(gv_damageReductionCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_damageReductionPoints) + StringExternal("Param/Value/09D4FC17")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "DamageReductionPoints10", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractDamageReductionActivate_Init () {
    gt_SubtractDamageReductionActivate = TriggerCreate("gt_SubtractDamageReductionActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractDamageReductionActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeArmorMultiplierText Creation
//--------------------------------------------------------------------------------------------------
bool gt_LifeArmorMultiplierTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeArmorMultiplierText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9002C404"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -462, 250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/0C603F60"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeArmorMultiplierText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeArmorMultiplierText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeArmorMultiplierText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeArmorMultiplierText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeArmorMultiplierTextCreation_Init () {
    gt_LifeArmorMultiplierTextCreation = TriggerCreate("gt_LifeArmorMultiplierTextCreation_Func");
    TriggerAddEventMapInit(gt_LifeArmorMultiplierTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeArmorMultiplierCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_LifeArmorMultiplierCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeArmorMultiplierCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/49B86703"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeArmorMultiplierCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeArmorMultiplierCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeArmorMultiplierCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeArmorMultiplierCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeArmorMultiplierCountCreation_Init () {
    gt_LifeArmorMultiplierCountCreation = TriggerCreate("gt_LifeArmorMultiplierCountCreation_Func");
    TriggerAddEventMapInit(gt_LifeArmorMultiplierCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLifeArmorMultiplier Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeArmorMultiplierCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addLifeArmorMultiplier[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addLifeArmorMultiplier[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addLifeArmorMultiplier[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addLifeArmorMultiplier[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addLifeArmorMultiplier[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeArmorMultiplierCreation_Init () {
    gt_AddLifeArmorMultiplierCreation = TriggerCreate("gt_AddLifeArmorMultiplierCreation_Func");
    TriggerAddEventMapInit(gt_AddLifeArmorMultiplierCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLifeArmorMultiplier Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeArmorMultiplierActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addLifeArmorMultiplier[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 200))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints < 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 200);
    libNtve_gf_SetDialogItemText(gv_lifeArmorMultiplierCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints) + StringExternal("Param/Value/779E11D1")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "LifeArmorMultiplyPoints100", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeArmorMultiplierActivate_Init () {
    gt_AddLifeArmorMultiplierActivate = TriggerCreate("gt_AddLifeArmorMultiplierActivate_Func");
    TriggerAddEventDialogControl(gt_AddLifeArmorMultiplierActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLifeArmorMultiplier Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeArmorMultiplierCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractLifeArmorMultiplier[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, 250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractLifeArmorMultiplier[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractLifeArmorMultiplier[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractLifeArmorMultiplier[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractLifeArmorMultiplier[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeArmorMultiplierCreation_Init () {
    gt_SubtractLifeArmorMultiplierCreation = TriggerCreate("gt_SubtractLifeArmorMultiplierCreation_Func");
    TriggerAddEventMapInit(gt_SubtractLifeArmorMultiplierCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLifeArmorMultiplier Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeArmorMultiplierActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractLifeArmorMultiplier[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 200);
    libNtve_gf_SetDialogItemText(gv_lifeArmorMultiplierCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeArmorMultiplyPoints) + StringExternal("Param/Value/6735D900")), PlayerGroupSingle(EventPlayer()));
    TechTreeUpgradeAddLevel(EventPlayer(), "LifeArmorMultiplyPoints100", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeArmorMultiplierActivate_Init () {
    gt_SubtractLifeArmorMultiplierActivate = TriggerCreate("gt_SubtractLifeArmorMultiplierActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractLifeArmorMultiplierActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeTextCreation
//--------------------------------------------------------------------------------------------------
bool gt_LifeTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B5A85379"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/C26B1043"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeTextCreation_Init () {
    gt_LifeTextCreation = TriggerCreate("gt_LifeTextCreation_Func");
    TriggerAddEventMapInit(gt_LifeTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_LifeCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6B5D8918"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeCountCreation_Init () {
    gt_LifeCountCreation = TriggerCreate("gt_LifeCountCreation_Func");
    TriggerAddEventMapInit(gt_LifeCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLife Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addLife[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addLife[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addLife[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addLife[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addLife[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeCreation_Init () {
    gt_AddLifeCreation = TriggerCreate("gt_AddLifeCreation_Func");
    TriggerAddEventMapInit(gt_AddLifeCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLife Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addLife[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 5))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifePoints < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifePoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 5);
    libNtve_gf_SetDialogItemText(gv_lifeCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifePoints) + StringExternal("Param/Value/455E43F3")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1001", 1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1002", 1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1003", 1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1004", 1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1005", 1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1006", 1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1007", 1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1008", 1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1009", 1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints10010", 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeActivate_Init () {
    gt_AddLifeActivate = TriggerCreate("gt_AddLifeActivate_Func");
    TriggerAddEventDialogControl(gt_AddLifeActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLife Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractLife[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, -300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractLife[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractLife[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractLife[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractLife[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeCreation_Init () {
    gt_SubtractLifeCreation = TriggerCreate("gt_SubtractLifeCreation_Func");
    TriggerAddEventMapInit(gt_SubtractLifeCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLife Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractLife[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifePoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifePoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 5);
    libNtve_gf_SetDialogItemText(gv_lifeCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifePoints) + StringExternal("Param/Value/58EAC965")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1001", -1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1002", -1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1003", -1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1004", -1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1005", -1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1006", -1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1007", -1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1008", -1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints1009", -1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_lifePoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "LifePoints10010", -1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeActivate_Init () {
    gt_SubtractLifeActivate = TriggerCreate("gt_SubtractLifeActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractLifeActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldText Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/33F6928B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B9182444"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldTextCreation_Init () {
    gt_ShieldTextCreation = TriggerCreate("gt_ShieldTextCreation_Func");
    TriggerAddEventMapInit(gt_ShieldTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E33715F4"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldCountCreation_Init () {
    gt_ShieldCountCreation = TriggerCreate("gt_ShieldCountCreation_Func");
    TriggerAddEventMapInit(gt_ShieldCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShield Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addShield[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addShield[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addShield[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addShield[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addShield[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldCreation_Init () {
    gt_AddShieldCreation = TriggerCreate("gt_AddShieldCreation_Func");
    TriggerAddEventMapInit(gt_AddShieldCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShield Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addShield[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 3);
    libNtve_gf_SetDialogItemText(gv_shieldCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldPoints) + StringExternal("Param/Value/4AB820FD")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1001", 1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1002", 1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1003", 1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1004", 1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1005", 1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1006", 1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1007", 1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1008", 1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1009", 1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints10010", 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldActivate_Init () {
    gt_AddShieldActivate = TriggerCreate("gt_AddShieldActivate_Func");
    TriggerAddEventDialogControl(gt_AddShieldActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShield Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractShield[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, -100);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractShield[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractShield[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractShield[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractShield[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldCreation_Init () {
    gt_SubtractShieldCreation = TriggerCreate("gt_SubtractShieldCreation_Func");
    TriggerAddEventMapInit(gt_SubtractShieldCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShield Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractShield[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_shieldPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 3);
    libNtve_gf_SetDialogItemText(gv_shieldCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldPoints) + StringExternal("Param/Value/16490F84")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1001", -1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1002", -1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1003", -1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1004", -1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1005", -1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1006", -1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1007", -1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1008", -1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints1009", -1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_shieldPoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldPoints10010", -1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldActivate_Init () {
    gt_SubtractShieldActivate = TriggerCreate("gt_SubtractShieldActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractShieldActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldRegenText Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldRegenTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldRegenText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DF3706CA"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AFC02B05"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldRegenText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldRegenText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldRegenText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldRegenText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldRegenTextCreation_Init () {
    gt_ShieldRegenTextCreation = TriggerCreate("gt_ShieldRegenTextCreation_Func");
    TriggerAddEventMapInit(gt_ShieldRegenTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldRegenCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShieldRegenCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_shieldRegenCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/3F79F125"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_shieldRegenCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_shieldRegenCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_shieldRegenCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_shieldRegenCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldRegenCountCreation_Init () {
    gt_ShieldRegenCountCreation = TriggerCreate("gt_ShieldRegenCountCreation_Func");
    TriggerAddEventMapInit(gt_ShieldRegenCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShieldRegen Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldRegenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addShieldRegen[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addShieldRegen[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addShieldRegen[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addShieldRegen[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addShieldRegen[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldRegenCreation_Init () {
    gt_AddShieldRegenCreation = TriggerCreate("gt_AddShieldRegenCreation_Func");
    TriggerAddEventMapInit(gt_AddShieldRegenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddShieldRegen Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddShieldRegenActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addShieldRegen[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldRegenPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 3);
    libNtve_gf_SetDialogItemText(gv_shieldRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldRegenPoints) + StringExternal("Param/Value/0C00BDE7")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints1001", 1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10012", 1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10013", 1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10014", 1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10015", 1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10016", 1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10017", 1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10018", 1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10019", 1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints100110", 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddShieldRegenActivate_Init () {
    gt_AddShieldRegenActivate = TriggerCreate("gt_AddShieldRegenActivate_Func");
    TriggerAddEventDialogControl(gt_AddShieldRegenActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShieldRegen Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldRegenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractShieldRegen[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, -50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractShieldRegen[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractShieldRegen[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractShieldRegen[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractShieldRegen[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldRegenCreation_Init () {
    gt_SubtractShieldRegenCreation = TriggerCreate("gt_SubtractShieldRegenCreation_Func");
    TriggerAddEventMapInit(gt_SubtractShieldRegenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractShieldRegen Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractShieldRegenActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractShieldRegen[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_shieldRegenPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 3);
    libNtve_gf_SetDialogItemText(gv_shieldRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_shieldRegenPoints) + StringExternal("Param/Value/BD16AC49")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints1001", -1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10012", -1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10013", -1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10014", -1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10015", -1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10016", -1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10017", -1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10018", -1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints10019", -1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_shieldRegenPoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "ShieldRegenPoints100110", -1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractShieldRegenActivate_Init () {
    gt_SubtractShieldRegenActivate = TriggerCreate("gt_SubtractShieldRegenActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractShieldRegenActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralStartText Creation
//--------------------------------------------------------------------------------------------------
bool gt_MineralStartTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_mineralStartText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B702263B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8F6D277F"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_mineralStartText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_mineralStartText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_mineralStartText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_mineralStartText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralStartTextCreation_Init () {
    gt_MineralStartTextCreation = TriggerCreate("gt_MineralStartTextCreation_Func");
    TriggerAddEventMapInit(gt_MineralStartTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralStartCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_MineralStartCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_mineralStartCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7B66563C"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_mineralStartCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_mineralStartCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_mineralStartCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_mineralStartCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralStartCountCreation_Init () {
    gt_MineralStartCountCreation = TriggerCreate("gt_MineralStartCountCreation_Func");
    TriggerAddEventMapInit(gt_MineralStartCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMineralStart Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddMineralStartCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addMineralStart[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addMineralStart[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addMineralStart[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addMineralStart[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addMineralStart[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMineralStartCreation_Init () {
    gt_AddMineralStartCreation = TriggerCreate("gt_AddMineralStartCreation_Func");
    TriggerAddEventMapInit(gt_AddMineralStartCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMineralStart Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddMineralStartActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addMineralStart[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 4))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_mineralStartPoints < 5000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_mineralStartPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 4);
    libNtve_gf_SetDialogItemText(gv_mineralStartCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_mineralStartPoints) + StringExternal("Param/Value/4057A4B9")), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMineralStartActivate_Init () {
    gt_AddMineralStartActivate = TriggerCreate("gt_AddMineralStartActivate_Func");
    TriggerAddEventDialogControl(gt_AddMineralStartActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VespeneStartText Creation
//--------------------------------------------------------------------------------------------------
bool gt_VespeneStartTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_vespeneStartText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/25D12C5A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, 150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/44F88505"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_vespeneStartText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_vespeneStartText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_vespeneStartText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_vespeneStartText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneStartTextCreation_Init () {
    gt_VespeneStartTextCreation = TriggerCreate("gt_VespeneStartTextCreation_Func");
    TriggerAddEventMapInit(gt_VespeneStartTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VespeneStartCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_VespeneStartCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_vespeneStartCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/88521A14"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_vespeneStartCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_vespeneStartCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_vespeneStartCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_vespeneStartCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneStartCountCreation_Init () {
    gt_VespeneStartCountCreation = TriggerCreate("gt_VespeneStartCountCreation_Func");
    TriggerAddEventMapInit(gt_VespeneStartCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddVespeneStart Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddVespeneStartCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addVespeneStart[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, 150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addVespeneStart[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addVespeneStart[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addVespeneStart[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addVespeneStart[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddVespeneStartCreation_Init () {
    gt_AddVespeneStartCreation = TriggerCreate("gt_AddVespeneStartCreation_Func");
    TriggerAddEventMapInit(gt_AddVespeneStartCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddVespeneStart Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddVespeneStartActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addVespeneStart[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 100))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_vespeneStartPoints < 500))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_vespeneStartPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 100);
    libNtve_gf_SetDialogItemText(gv_vespeneStartCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_vespeneStartPoints) + StringExternal("Param/Value/84AE7D69")), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddVespeneStartActivate_Init () {
    gt_AddVespeneStartActivate = TriggerCreate("gt_AddVespeneStartActivate_Func");
    TriggerAddEventDialogControl(gt_AddVespeneStartActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RespawnTimeText Creation
//--------------------------------------------------------------------------------------------------
bool gt_RespawnTimeTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_respawnTimeText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/4DB4B185"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6EDFFCB1"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_respawnTimeText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_respawnTimeText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_respawnTimeText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_respawnTimeText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnTimeTextCreation_Init () {
    gt_RespawnTimeTextCreation = TriggerCreate("gt_RespawnTimeTextCreation_Func");
    TriggerAddEventMapInit(gt_RespawnTimeTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RespawnTimeCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_RespawnTimeCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_respawnTimeCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/135C93A5"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_respawnTimeCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_respawnTimeCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_respawnTimeCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_respawnTimeCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnTimeCountCreation_Init () {
    gt_RespawnTimeCountCreation = TriggerCreate("gt_RespawnTimeCountCreation_Func");
    TriggerAddEventMapInit(gt_RespawnTimeCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddRespawnTime Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddRespawnTimeCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addRespawnTime[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addRespawnTime[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addRespawnTime[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addRespawnTime[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addRespawnTime[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddRespawnTimeCreation_Init () {
    gt_AddRespawnTimeCreation = TriggerCreate("gt_AddRespawnTimeCreation_Func");
    TriggerAddEventMapInit(gt_AddRespawnTimeCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddRespawnTime Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddRespawnTimeActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addRespawnTime[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 10))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_respawnTimerPoints < 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_respawnTimerPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 10);
    libNtve_gf_SetDialogItemText(gv_respawnTimeCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_respawnTimerPoints) + StringExternal("Param/Value/FBEBDD97")), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddRespawnTimeActivate_Init () {
    gt_AddRespawnTimeActivate = TriggerCreate("gt_AddRespawnTimeActivate_Func");
    TriggerAddEventDialogControl(gt_AddRespawnTimeActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeRegenText Creation
//--------------------------------------------------------------------------------------------------
bool gt_LifeRegenTextCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeRegenText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/53DD3C00"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -475, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E120DF96"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeRegenText[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeRegenText[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeRegenText[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeRegenText[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeRegenTextCreation_Init () {
    gt_LifeRegenTextCreation = TriggerCreate("gt_LifeRegenTextCreation_Func");
    TriggerAddEventMapInit(gt_LifeRegenTextCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LifeRegenCount Creation
//--------------------------------------------------------------------------------------------------
bool gt_LifeRegenCountCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_lifeRegenCount[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9AE1C08A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_lifeRegenCount[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_lifeRegenCount[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_lifeRegenCount[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_lifeRegenCount[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeRegenCountCreation_Init () {
    gt_LifeRegenCountCreation = TriggerCreate("gt_LifeRegenCountCreation_Func");
    TriggerAddEventMapInit(gt_LifeRegenCountCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLifeRegen Creation
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeRegenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_addLifeRegen[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -175, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_addLifeRegen[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_addLifeRegen[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_up.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_addLifeRegen[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_addLifeRegen[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeRegenCreation_Init () {
    gt_AddLifeRegenCreation = TriggerCreate("gt_AddLifeRegenCreation_Func");
    TriggerAddEventMapInit(gt_AddLifeRegenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLifeRegen Activate
//--------------------------------------------------------------------------------------------------
bool gt_AddLifeRegenActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_addLifeRegen[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifeRegenPoints += 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 5);
    libNtve_gf_SetDialogItemText(gv_lifeRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeRegenPoints) + StringExternal("Param/Value/F3D6B0F2")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1001", 1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1002", 1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1003", 1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1004", 1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1005", 1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1006", 1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1007", 1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1008", 1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1009", 1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints10010", 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLifeRegenActivate_Init () {
    gt_AddLifeRegenActivate = TriggerCreate("gt_AddLifeRegenActivate_Func");
    TriggerAddEventDialogControl(gt_AddLifeRegenActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLifeRegen Creation
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeRegenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_subtractLifeRegen[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -135, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_subtractLifeRegen[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 30, 30);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_subtractLifeRegen[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_sortlistarrow_down.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_subtractLifeRegen[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_subtractLifeRegen[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeRegenCreation_Init () {
    gt_SubtractLifeRegenCreation = TriggerCreate("gt_SubtractLifeRegenCreation_Func");
    TriggerAddEventMapInit(gt_SubtractLifeRegenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SubtractLifeRegen Activate
//--------------------------------------------------------------------------------------------------
bool gt_SubtractLifeRegenActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_subtractLifeRegen[1] == EventDialogControl()))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_lifeRegenPoints -= 1;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 5);
    libNtve_gf_SetDialogItemText(gv_lifeRegenCount[1], (IntToText(gv_playerInfo[EventPlayer()].lv_lifeRegenPoints) + StringExternal("Param/Value/64763ABE")), PlayerGroupSingle(EventPlayer()));
    if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1001", -1);
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 200)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1002", -1);
        }
        else {
            if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 300)) {
                TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1003", -1);
            }
            else {
                if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 400)) {
                    TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1004", -1);
                }
                else {
                    if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 500)) {
                        TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1005", -1);
                    }
                    else {
                        if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 600)) {
                            TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1006", -1);
                        }
                        else {
                            if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 700)) {
                                TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1007", -1);
                            }
                            else {
                                if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 800)) {
                                    TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1008", -1);
                                }
                                else {
                                    if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 900)) {
                                        TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints1009", -1);
                                    }
                                    else {
                                        if ((gv_playerInfo[EventPlayer()].lv_lifeRegenPoints < 1000)) {
                                            TechTreeUpgradeAddLevel(EventPlayer(), "LifeRegenPoints10010", -1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractLifeRegenActivate_Init () {
    gt_SubtractLifeRegenActivate = TriggerCreate("gt_SubtractLifeRegenActivate_Func");
    TriggerAddEventDialogControl(gt_SubtractLifeRegenActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameVarient1
//--------------------------------------------------------------------------------------------------
bool gt_GameVarient1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBDE448B6_ae = 6;
    int autoBDE448B6_var;
    const int auto63B8EDFC_ae = 6;
    int auto63B8EDFC_var;
    const int auto99A393C1_ae = 6;
    int auto99A393C1_var;
    const int autoF1D192E1_ae = 6;
    int autoF1D192E1_var;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0786A07F"));
    if ((GameAttributeGameValue("1") == "0005")) {
        gv_killMultiplier += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B91E15B5"));
        autoBDE448B6_var = 1;
        for ( ; autoBDE448B6_var <= autoBDE448B6_ae; autoBDE448B6_var += 1 ) {
            TriggerEnable(gt_MoveBack1, true);
            TriggerEnable(gt_MoveBack2, true);
            TriggerEnable(gt_MoveToCenter, true);
            TriggerEnable(gt_MoveBack3, true);
            TriggerEnable(gt_MoveBack4, true);
            TriggerEnable(gt_MoveBack5, true);
            TriggerEnable(gt_MoveBack6, true);
            TriggerEnable(gt_MoveBack7, true);
            TriggerEnable(gt_MoveBack8, true);
            TriggerEnable(gt_MoveBack9, true);
            PlayerSetBounds(autoBDE448B6_var, RegionEntireMap());
            UISetMiniMapBounds(PlayerGroupAll(), RegionFromId(1));
            Wait(0.01, c_timeGame);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoBDE448B6_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoBDE448B6_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoBDE448B6_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoBDE448B6_var), false);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoBDE448B6_var), false);
        }
    }

    if ((GameAttributeGameValue("1") == "0001")) {
        gv_killMultiplier += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/682CAACA"));
        auto63B8EDFC_var = 1;
        for ( ; auto63B8EDFC_var <= auto63B8EDFC_ae; auto63B8EDFC_var += 1 ) {
            TriggerEnable(gt_MoveBack1, true);
            TriggerEnable(gt_MoveBack2, true);
            TriggerEnable(gt_MoveToCenter, true);
            TriggerEnable(gt_MoveBack3, true);
            TriggerEnable(gt_MoveBack4, true);
            TriggerEnable(gt_MoveBack5, true);
            TriggerEnable(gt_MoveBack6, true);
            TriggerEnable(gt_MoveBack7, true);
            TriggerEnable(gt_MoveBack8, true);
            TriggerEnable(gt_MoveBack9, true);
            PlayerSetBounds(auto63B8EDFC_var, RegionEntireMap());
            UISetMiniMapBounds(PlayerGroupAll(), RegionFromId(1));
            Wait(0.01, c_timeGame);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto63B8EDFC_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto63B8EDFC_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto63B8EDFC_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto63B8EDFC_var), false);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto63B8EDFC_var), false);
        }
    }

    if ((GameAttributeGameValue("1") == "0002")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/DADBDC75"));
        gv_killMultiplier += 1;
        auto99A393C1_var = 1;
        for ( ; auto99A393C1_var <= auto99A393C1_ae; auto99A393C1_var += 1 ) {
            TriggerEnable(gt_MoveBack1, true);
            TriggerEnable(gt_MoveBack2, true);
            TriggerEnable(gt_MoveToCenter, true);
            TriggerEnable(gt_MoveBack3, true);
            TriggerEnable(gt_MoveBack4, true);
            TriggerEnable(gt_MoveBack5, true);
            TriggerEnable(gt_MoveBack6, true);
            TriggerEnable(gt_MoveBack7, true);
            TriggerEnable(gt_MoveBack8, true);
            TriggerEnable(gt_MoveBack9, true);
            PlayerSetBounds(auto99A393C1_var, RegionEntireMap());
            UISetMiniMapBounds(PlayerGroupAll(), RegionFromId(1));
            Wait(0.01, c_timeGame);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto99A393C1_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto99A393C1_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto99A393C1_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto99A393C1_var), false);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto99A393C1_var), false);
        }
    }

    if ((GameAttributeGameValue("1") == "0003")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0B7A1BAA"));
        gv_killMultiplier += 1;
        autoF1D192E1_var = 1;
        for ( ; autoF1D192E1_var <= autoF1D192E1_ae; autoF1D192E1_var += 1 ) {
            TriggerEnable(gt_MoveBack1, true);
            TriggerEnable(gt_MoveBack2, true);
            TriggerEnable(gt_MoveToCenter, true);
            TriggerEnable(gt_MoveBack3, true);
            TriggerEnable(gt_MoveBack4, true);
            TriggerEnable(gt_MoveBack5, true);
            TriggerEnable(gt_MoveBack6, true);
            TriggerEnable(gt_MoveBack7, true);
            TriggerEnable(gt_MoveBack8, true);
            TriggerEnable(gt_MoveBack9, true);
            PlayerSetBounds(autoF1D192E1_var, RegionEntireMap());
            UISetMiniMapBounds(PlayerGroupAll(), RegionFromId(1));
            Wait(0.01, c_timeGame);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoF1D192E1_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoF1D192E1_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoF1D192E1_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoF1D192E1_var), false);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoF1D192E1_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameVarient1_Init () {
    gt_GameVarient1 = TriggerCreate("gt_GameVarient1_Func");
    TriggerAddEventMapInit(gt_GameVarient1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameVarient2
//--------------------------------------------------------------------------------------------------
bool gt_GameVarient2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4B771E06_ae = 6;
    int auto4B771E06_var;
    const int autoDB67F813_ae = 6;
    int autoDB67F813_var;
    const int auto338634CC_ae = 6;
    int auto338634CC_var;
    const int auto6686E6A3_ae = 6;
    int auto6686E6A3_var;
    const int autoC46CA259_ae = 6;
    int autoC46CA259_var;
    const int autoCA5CE331_ae = 6;
    int autoCA5CE331_var;
    const int autoB70D95D6_ae = 6;
    int autoB70D95D6_var;
    const int autoE39A2981_ae = 6;
    int autoE39A2981_var;
    const int autoCD3BF73A_ae = 6;
    int autoCD3BF73A_var;
    const int auto7AA177DE_ae = 6;
    int auto7AA177DE_var;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("3") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/17DDEEA2"));
        gv_killMultiplier += 1;
        auto4B771E06_var = 1;
        for ( ; auto4B771E06_var <= auto4B771E06_ae; auto4B771E06_var += 1 ) {
            TechTreeAbilityAllow(auto4B771E06_var, AbilityCommand("ZealotUpgrades", 1), false);
            TechTreeAbilityAllow(auto4B771E06_var, AbilityCommand("SniperUpgrades", 2), false);
            TechTreeAbilityAllow(auto4B771E06_var, AbilityCommand("VultureUpgrades", 0), false);
            TechTreeAbilityAllow(auto4B771E06_var, AbilityCommand("StalkerUpgrades", 0), false);
        }
    }

    if ((GameAttributeGameValue("3") == "0002")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/4B6E58F4"));
        gv_killMultiplier += 1;
        autoDB67F813_var = 1;
        for ( ; autoDB67F813_var <= autoDB67F813_ae; autoDB67F813_var += 1 ) {
            TechTreeAbilityAllow(autoDB67F813_var, AbilityCommand("ZealotUpgrades", 2), false);
            TechTreeAbilityAllow(autoDB67F813_var, AbilityCommand("SniperUpgrades", 0), false);
            TechTreeAbilityAllow(autoDB67F813_var, AbilityCommand("VultureUpgrades", 1), false);
            TechTreeAbilityAllow(autoDB67F813_var, AbilityCommand("StalkerUpgrades", 2), false);
        }
    }

    if ((GameAttributeGameValue("3") == "0004")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/338393AF"));
        gv_killMultiplier += 1;
        auto338634CC_var = 1;
        for ( ; auto338634CC_var <= auto338634CC_ae; auto338634CC_var += 1 ) {
            TechTreeAbilityAllow(auto338634CC_var, AbilityCommand("ZealotUpgrades", 3), false);
            TechTreeAbilityAllow(auto338634CC_var, AbilityCommand("SniperUpgrades", 6), false);
            TechTreeAbilityAllow(auto338634CC_var, AbilityCommand("VultureUpgrades", 2), false);
        }
    }

    if ((GameAttributeGameValue("3") == "0005")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/C2D38B82"));
        gv_killMultiplier += 1;
        auto6686E6A3_var = 1;
        for ( ; auto6686E6A3_var <= auto6686E6A3_ae; auto6686E6A3_var += 1 ) {
            TechTreeAbilityAllow(auto6686E6A3_var, AbilityCommand("ZealotUpgrades", 0), false);
        }
    }

    if ((GameAttributeGameValue("3") == "0006")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/20F2C33A"));
        gv_killMultiplier += 2;
        autoC46CA259_var = 1;
        for ( ; autoC46CA259_var <= autoC46CA259_ae; autoC46CA259_var += 1 ) {
            TechTreeAbilityAllow(autoC46CA259_var, AbilityCommand("VultureUpgrades", 6), false);
        }
    }

    if ((GameAttributeGameValue("4") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/590E7707"));
        gv_killMultiplier += 2;
        autoCA5CE331_var = 1;
        for ( ; autoCA5CE331_var <= autoCA5CE331_ae; autoCA5CE331_var += 1 ) {
            TechTreeAbilityAllow(autoCA5CE331_var, AbilityCommand("GhostCloak", 0), false);
        }
    }

    if ((GameAttributeGameValue("5") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/FE037708"));
        gv_killMultiplier += 2;
        autoB70D95D6_var = 1;
        for ( ; autoB70D95D6_var <= autoB70D95D6_ae; autoB70D95D6_var += 1 ) {
            TechTreeAbilityAllow(autoB70D95D6_var, AbilityCommand("BuildAutoTurret", 0), false);
        }
    }

    if ((GameAttributeGameValue("6") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9ADF9FBA"));
        gv_killMultiplier += 2;
        autoE39A2981_var = 1;
        for ( ; autoE39A2981_var <= autoE39A2981_ae; autoE39A2981_var += 1 ) {
            TechTreeAbilityAllow(autoE39A2981_var, AbilityCommand("Blink", 0), false);
        }
    }

    if ((GameAttributeGameValue("7") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0DD8C2F6"));
        gv_killMultiplier += 1;
        autoCD3BF73A_var = 1;
        for ( ; autoCD3BF73A_var <= autoCD3BF73A_ae; autoCD3BF73A_var += 1 ) {
            TechTreeAbilityAllow(autoCD3BF73A_var, AbilityCommand("VultureSpiderMines", 0), false);
        }
    }

    if ((GameAttributeGameValue("3") == "0007")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F1BFEF72"));
        gv_killMultiplier += 10;
        auto7AA177DE_var = 1;
        for ( ; auto7AA177DE_var <= auto7AA177DE_ae; auto7AA177DE_var += 1 ) {
            TriggerEnable(gt_DisableAll, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameVarient2_Init () {
    gt_GameVarient2 = TriggerCreate("gt_GameVarient2_Func");
    TriggerAddEventMapInit(gt_GameVarient2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisableAll
//--------------------------------------------------------------------------------------------------
bool gt_DisableAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0170CD3D_ae = 6;
    int auto0170CD3D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0170CD3D_var = 1;
    for ( ; auto0170CD3D_var <= auto0170CD3D_ae; auto0170CD3D_var += 1 ) {
        PlayerModifyPropertyInt(auto0170CD3D_var, c_playerPropMinerals, c_playerPropOperSetTo, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableAll_Init () {
    gt_DisableAll = TriggerCreate("gt_DisableAll_Func");
    TriggerEnable(gt_DisableAll, false);
    TriggerAddEventTimePeriodic(gt_DisableAll, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameVarient3
//--------------------------------------------------------------------------------------------------
bool gt_GameVarient3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    Wait(5.5, c_timeGame);
    TriggerEnable(gt_RespawnChallengeMode, true);
    TriggerEnable(gt_Respawn, false);
    TriggerEnable(gt_EndGame, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameVarient3_Init () {
    gt_GameVarient3 = TriggerCreate("gt_GameVarient3_Func");
    TriggerAddEventMapInit(gt_GameVarient3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LastOneAlive
//--------------------------------------------------------------------------------------------------
bool gt_LastOneAlive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto21EA2DBB_ae = 6;
    int auto21EA2DBB_var;
    const int autoA911E73D_ae = 6;
    int autoA911E73D_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_tEAM, c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto21EA2DBB_var = 1;
    for ( ; auto21EA2DBB_var <= auto21EA2DBB_ae; auto21EA2DBB_var += 1 ) {
        if ((UnitIsAlive(gv_playerInfo[auto21EA2DBB_var].lv_hero) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(auto21EA2DBB_var) + (StringExternal("Param/Value/76F02A99") + (IntToText((gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier)) + StringExternal("Param/Value/7012E571")))));
            BoardItemSetText(gv_thisgmaeleader, 3, auto21EA2DBB_var, StringExternal("Param/Value/349A6EC1"));
            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "Zealot"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_tankKills = (gv_playerInfo[auto21EA2DBB_var].lv_tankKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 3, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_tankKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "Medic"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_supportKills = (gv_playerInfo[auto21EA2DBB_var].lv_supportKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 4, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_supportKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "Stalker") || (UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "AutoTurret"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_specialistKills = (gv_playerInfo[auto21EA2DBB_var].lv_specialistKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 5, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_specialistKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "Vulture") || (UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "SpiderMine"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_splashKills = (gv_playerInfo[auto21EA2DBB_var].lv_splashKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 6, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_splashKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "Ghost"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_asassinKills = (gv_playerInfo[auto21EA2DBB_var].lv_asassinKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 7, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_asassinKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "Marine"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_singleTargetKills = (gv_playerInfo[auto21EA2DBB_var].lv_singleTargetKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 8, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_singleTargetKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

            if (((UnitGetType(gv_playerInfo[auto21EA2DBB_var].lv_hero) == "SCV"))) {
                gv_playerInfo[auto21EA2DBB_var].lv_kills = (gv_playerInfo[auto21EA2DBB_var].lv_kills * gv_killMultiplier);
                gv_playerInfo[auto21EA2DBB_var].lv_builderKills = (gv_playerInfo[auto21EA2DBB_var].lv_builderKills + gv_playerInfo[auto21EA2DBB_var].lv_kills);
                BoardItemSetText(gv_thisgmaeleader, 2, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_kills));
                BoardItemSetText(gv_leaderboard, 9, auto21EA2DBB_var, IntToText(gv_playerInfo[auto21EA2DBB_var].lv_builderKills));
                BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
                BoardItemSetTextColor(gv_thisgmaeleader, 2, auto21EA2DBB_var, Color(0.00, 65.10, 0.00));
                BoardItemSetFontSize(gv_thisgmaeleader, 2, auto21EA2DBB_var, 16);
            }

        }

    }
    Wait(16.0, c_timeGame);
    autoA911E73D_var = 1;
    for ( ; autoA911E73D_var <= autoA911E73D_ae; autoA911E73D_var += 1 ) {
        GameOver(autoA911E73D_var, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LastOneAlive_Init () {
    gt_LastOneAlive = TriggerCreate("gt_LastOneAlive_Func");
    TriggerEnable(gt_LastOneAlive, false);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_LastOneAlive, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade1Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade1Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup autoF1D2B0B2_g;
    int autoF1D2B0B2_u;
    unit autoF1D2B0B2_var;
    unitgroup auto14D02E1A_g;
    int auto14D02E1A_u;
    unit auto14D02E1A_var;
    unitgroup autoAD57CD97_g;
    int autoAD57CD97_u;
    unit autoAD57CD97_var;
    unitgroup autoB7F9DE25_g;
    int autoB7F9DE25_u;
    unit autoB7F9DE25_var;
    unitgroup auto03164234_g;
    int auto03164234_u;
    unit auto03164234_var;
    unitgroup autoF05EE41C_g;
    int autoF05EE41C_u;
    unit autoF05EE41C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF1D2B0B2_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF1D2B0B2_u = UnitGroupCount(autoF1D2B0B2_g, c_unitCountAll);
    for (;; autoF1D2B0B2_u -= 1) {
        autoF1D2B0B2_var = UnitGroupUnitFromEnd(autoF1D2B0B2_g, autoF1D2B0B2_u);
        if (autoF1D2B0B2_var == null) { break; }
        lv_stackCount1 = (gv_upgrade1Count[1] - UnitBehaviorCount(autoF1D2B0B2_var, "ShopUpgrade1"));
        UnitBehaviorAdd(autoF1D2B0B2_var, "ShopUpgrade1", UnitFromId(1637809687), lv_stackCount1);
    }
    auto14D02E1A_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto14D02E1A_u = UnitGroupCount(auto14D02E1A_g, c_unitCountAll);
    for (;; auto14D02E1A_u -= 1) {
        auto14D02E1A_var = UnitGroupUnitFromEnd(auto14D02E1A_g, auto14D02E1A_u);
        if (auto14D02E1A_var == null) { break; }
        lv_stackCount1 = (gv_upgrade1Count[2] - UnitBehaviorCount(auto14D02E1A_var, "ShopUpgrade1"));
        UnitBehaviorAdd(auto14D02E1A_var, "ShopUpgrade1", UnitFromId(1637809687), lv_stackCount1);
    }
    autoAD57CD97_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD57CD97_u = UnitGroupCount(autoAD57CD97_g, c_unitCountAll);
    for (;; autoAD57CD97_u -= 1) {
        autoAD57CD97_var = UnitGroupUnitFromEnd(autoAD57CD97_g, autoAD57CD97_u);
        if (autoAD57CD97_var == null) { break; }
        lv_stackCount1 = (gv_upgrade1Count[3] - UnitBehaviorCount(autoAD57CD97_var, "ShopUpgrade1"));
        UnitBehaviorAdd(autoAD57CD97_var, "ShopUpgrade1", UnitFromId(1637809687), lv_stackCount1);
    }
    autoB7F9DE25_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB7F9DE25_u = UnitGroupCount(autoB7F9DE25_g, c_unitCountAll);
    for (;; autoB7F9DE25_u -= 1) {
        autoB7F9DE25_var = UnitGroupUnitFromEnd(autoB7F9DE25_g, autoB7F9DE25_u);
        if (autoB7F9DE25_var == null) { break; }
        lv_stackCount1 = (gv_upgrade1Count[4] - UnitBehaviorCount(autoB7F9DE25_var, "ShopUpgrade1"));
        UnitBehaviorAdd(autoB7F9DE25_var, "ShopUpgrade1", UnitFromId(1637809687), lv_stackCount1);
    }
    auto03164234_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto03164234_u = UnitGroupCount(auto03164234_g, c_unitCountAll);
    for (;; auto03164234_u -= 1) {
        auto03164234_var = UnitGroupUnitFromEnd(auto03164234_g, auto03164234_u);
        if (auto03164234_var == null) { break; }
        lv_stackCount1 = (gv_upgrade1Count[5] - UnitBehaviorCount(auto03164234_var, "ShopUpgrade1"));
        UnitBehaviorAdd(auto03164234_var, "ShopUpgrade1", UnitFromId(1637809687), lv_stackCount1);
    }
    autoF05EE41C_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF05EE41C_u = UnitGroupCount(autoF05EE41C_g, c_unitCountAll);
    for (;; autoF05EE41C_u -= 1) {
        autoF05EE41C_var = UnitGroupUnitFromEnd(autoF05EE41C_g, autoF05EE41C_u);
        if (autoF05EE41C_var == null) { break; }
        lv_stackCount1 = (gv_upgrade1Count[6] - UnitBehaviorCount(autoF05EE41C_var, "ShopUpgrade1"));
        UnitBehaviorAdd(autoF05EE41C_var, "ShopUpgrade1", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade1Search_Init () {
    gt_Upgrade1Search = TriggerCreate("gt_Upgrade1Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade1Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade2Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade2Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup autoC1EE3758_g;
    int autoC1EE3758_u;
    unit autoC1EE3758_var;
    unitgroup autoDAFCE6D8_g;
    int autoDAFCE6D8_u;
    unit autoDAFCE6D8_var;
    unitgroup auto346CDE6F_g;
    int auto346CDE6F_u;
    unit auto346CDE6F_var;
    unitgroup autoC84F2E15_g;
    int autoC84F2E15_u;
    unit autoC84F2E15_var;
    unitgroup autoAB196BF4_g;
    int autoAB196BF4_u;
    unit autoAB196BF4_var;
    unitgroup auto1420E7EE_g;
    int auto1420E7EE_u;
    unit auto1420E7EE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC1EE3758_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC1EE3758_u = UnitGroupCount(autoC1EE3758_g, c_unitCountAll);
    for (;; autoC1EE3758_u -= 1) {
        autoC1EE3758_var = UnitGroupUnitFromEnd(autoC1EE3758_g, autoC1EE3758_u);
        if (autoC1EE3758_var == null) { break; }
        lv_stackCount1 = (gv_upgrade2Count[1] - UnitBehaviorCount(autoC1EE3758_var, "AssassinBonus"));
        UnitBehaviorAdd(autoC1EE3758_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoDAFCE6D8_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDAFCE6D8_u = UnitGroupCount(autoDAFCE6D8_g, c_unitCountAll);
    for (;; autoDAFCE6D8_u -= 1) {
        autoDAFCE6D8_var = UnitGroupUnitFromEnd(autoDAFCE6D8_g, autoDAFCE6D8_u);
        if (autoDAFCE6D8_var == null) { break; }
        lv_stackCount1 = (gv_upgrade2Count[2] - UnitBehaviorCount(autoDAFCE6D8_var, "AssassinBonus"));
        UnitBehaviorAdd(autoDAFCE6D8_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto346CDE6F_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto346CDE6F_u = UnitGroupCount(auto346CDE6F_g, c_unitCountAll);
    for (;; auto346CDE6F_u -= 1) {
        auto346CDE6F_var = UnitGroupUnitFromEnd(auto346CDE6F_g, auto346CDE6F_u);
        if (auto346CDE6F_var == null) { break; }
        lv_stackCount1 = (gv_upgrade2Count[3] - UnitBehaviorCount(auto346CDE6F_var, "AssassinBonus"));
        UnitBehaviorAdd(auto346CDE6F_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoC84F2E15_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC84F2E15_u = UnitGroupCount(autoC84F2E15_g, c_unitCountAll);
    for (;; autoC84F2E15_u -= 1) {
        autoC84F2E15_var = UnitGroupUnitFromEnd(autoC84F2E15_g, autoC84F2E15_u);
        if (autoC84F2E15_var == null) { break; }
        lv_stackCount1 = (gv_upgrade2Count[4] - UnitBehaviorCount(autoC84F2E15_var, "AssassinBonus"));
        UnitBehaviorAdd(autoC84F2E15_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoAB196BF4_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB196BF4_u = UnitGroupCount(autoAB196BF4_g, c_unitCountAll);
    for (;; autoAB196BF4_u -= 1) {
        autoAB196BF4_var = UnitGroupUnitFromEnd(autoAB196BF4_g, autoAB196BF4_u);
        if (autoAB196BF4_var == null) { break; }
        lv_stackCount1 = (gv_upgrade2Count[5] - UnitBehaviorCount(autoAB196BF4_var, "AssassinBonus"));
        UnitBehaviorAdd(autoAB196BF4_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto1420E7EE_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1420E7EE_u = UnitGroupCount(auto1420E7EE_g, c_unitCountAll);
    for (;; auto1420E7EE_u -= 1) {
        auto1420E7EE_var = UnitGroupUnitFromEnd(auto1420E7EE_g, auto1420E7EE_u);
        if (auto1420E7EE_var == null) { break; }
        lv_stackCount1 = (gv_upgrade2Count[6] - UnitBehaviorCount(auto1420E7EE_var, "AssassinBonus"));
        UnitBehaviorAdd(auto1420E7EE_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade2Search_Init () {
    gt_Upgrade2Search = TriggerCreate("gt_Upgrade2Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade2Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade3Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade3Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup auto7614B254_g;
    int auto7614B254_u;
    unit auto7614B254_var;
    unitgroup autoE1E4F7FB_g;
    int autoE1E4F7FB_u;
    unit autoE1E4F7FB_var;
    unitgroup auto4781F917_g;
    int auto4781F917_u;
    unit auto4781F917_var;
    unitgroup auto23E2C82B_g;
    int auto23E2C82B_u;
    unit auto23E2C82B_var;
    unitgroup auto7A581665_g;
    int auto7A581665_u;
    unit auto7A581665_var;
    unitgroup auto7D0C0188_g;
    int auto7D0C0188_u;
    unit auto7D0C0188_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7614B254_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7614B254_u = UnitGroupCount(auto7614B254_g, c_unitCountAll);
    for (;; auto7614B254_u -= 1) {
        auto7614B254_var = UnitGroupUnitFromEnd(auto7614B254_g, auto7614B254_u);
        if (auto7614B254_var == null) { break; }
        lv_stackCount1 = (gv_upgrade3Count[1] - UnitBehaviorCount(auto7614B254_var, "SupportBonus"));
        UnitBehaviorAdd(auto7614B254_var, "SupportBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoE1E4F7FB_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1E4F7FB_u = UnitGroupCount(autoE1E4F7FB_g, c_unitCountAll);
    for (;; autoE1E4F7FB_u -= 1) {
        autoE1E4F7FB_var = UnitGroupUnitFromEnd(autoE1E4F7FB_g, autoE1E4F7FB_u);
        if (autoE1E4F7FB_var == null) { break; }
        lv_stackCount1 = (gv_upgrade3Count[2] - UnitBehaviorCount(autoE1E4F7FB_var, "SupportBonus"));
        UnitBehaviorAdd(autoE1E4F7FB_var, "SupportBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto4781F917_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4781F917_u = UnitGroupCount(auto4781F917_g, c_unitCountAll);
    for (;; auto4781F917_u -= 1) {
        auto4781F917_var = UnitGroupUnitFromEnd(auto4781F917_g, auto4781F917_u);
        if (auto4781F917_var == null) { break; }
        lv_stackCount1 = (gv_upgrade3Count[3] - UnitBehaviorCount(auto4781F917_var, "SupportBonus"));
        UnitBehaviorAdd(auto4781F917_var, "SupportBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto23E2C82B_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto23E2C82B_u = UnitGroupCount(auto23E2C82B_g, c_unitCountAll);
    for (;; auto23E2C82B_u -= 1) {
        auto23E2C82B_var = UnitGroupUnitFromEnd(auto23E2C82B_g, auto23E2C82B_u);
        if (auto23E2C82B_var == null) { break; }
        lv_stackCount1 = (gv_upgrade3Count[4] - UnitBehaviorCount(auto23E2C82B_var, "SupportBonus"));
        UnitBehaviorAdd(auto23E2C82B_var, "SupportBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto7A581665_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A581665_u = UnitGroupCount(auto7A581665_g, c_unitCountAll);
    for (;; auto7A581665_u -= 1) {
        auto7A581665_var = UnitGroupUnitFromEnd(auto7A581665_g, auto7A581665_u);
        if (auto7A581665_var == null) { break; }
        lv_stackCount1 = (gv_upgrade3Count[5] - UnitBehaviorCount(auto7A581665_var, "SupportBonus"));
        UnitBehaviorAdd(auto7A581665_var, "SupportBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto7D0C0188_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D0C0188_u = UnitGroupCount(auto7D0C0188_g, c_unitCountAll);
    for (;; auto7D0C0188_u -= 1) {
        auto7D0C0188_var = UnitGroupUnitFromEnd(auto7D0C0188_g, auto7D0C0188_u);
        if (auto7D0C0188_var == null) { break; }
        lv_stackCount1 = (gv_upgrade3Count[6] - UnitBehaviorCount(auto7D0C0188_var, "SupportBonus"));
        UnitBehaviorAdd(auto7D0C0188_var, "SupportBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade3Search_Init () {
    gt_Upgrade3Search = TriggerCreate("gt_Upgrade3Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade3Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade4Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade4Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup auto29B48E75_g;
    int auto29B48E75_u;
    unit auto29B48E75_var;
    unitgroup autoF490BB62_g;
    int autoF490BB62_u;
    unit autoF490BB62_var;
    unitgroup auto829A5D1A_g;
    int auto829A5D1A_u;
    unit auto829A5D1A_var;
    unitgroup autoBD020879_g;
    int autoBD020879_u;
    unit autoBD020879_var;
    unitgroup autoC299B4A3_g;
    int autoC299B4A3_u;
    unit autoC299B4A3_var;
    unitgroup auto0CF24300_g;
    int auto0CF24300_u;
    unit auto0CF24300_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto29B48E75_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29B48E75_u = UnitGroupCount(auto29B48E75_g, c_unitCountAll);
    for (;; auto29B48E75_u -= 1) {
        auto29B48E75_var = UnitGroupUnitFromEnd(auto29B48E75_g, auto29B48E75_u);
        if (auto29B48E75_var == null) { break; }
        lv_stackCount1 = (gv_upgrade4Count[1] - UnitBehaviorCount(auto29B48E75_var, "TankBonus"));
        UnitBehaviorAdd(auto29B48E75_var, "TankBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoF490BB62_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF490BB62_u = UnitGroupCount(autoF490BB62_g, c_unitCountAll);
    for (;; autoF490BB62_u -= 1) {
        autoF490BB62_var = UnitGroupUnitFromEnd(autoF490BB62_g, autoF490BB62_u);
        if (autoF490BB62_var == null) { break; }
        lv_stackCount1 = (gv_upgrade4Count[2] - UnitBehaviorCount(autoF490BB62_var, "TankBonus"));
        UnitBehaviorAdd(autoF490BB62_var, "TankBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto829A5D1A_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto829A5D1A_u = UnitGroupCount(auto829A5D1A_g, c_unitCountAll);
    for (;; auto829A5D1A_u -= 1) {
        auto829A5D1A_var = UnitGroupUnitFromEnd(auto829A5D1A_g, auto829A5D1A_u);
        if (auto829A5D1A_var == null) { break; }
        lv_stackCount1 = (gv_upgrade4Count[3] - UnitBehaviorCount(auto829A5D1A_var, "TankBonus"));
        UnitBehaviorAdd(auto829A5D1A_var, "TankBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoBD020879_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD020879_u = UnitGroupCount(autoBD020879_g, c_unitCountAll);
    for (;; autoBD020879_u -= 1) {
        autoBD020879_var = UnitGroupUnitFromEnd(autoBD020879_g, autoBD020879_u);
        if (autoBD020879_var == null) { break; }
        lv_stackCount1 = (gv_upgrade4Count[4] - UnitBehaviorCount(autoBD020879_var, "TankBonus"));
        UnitBehaviorAdd(autoBD020879_var, "TankBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoC299B4A3_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC299B4A3_u = UnitGroupCount(autoC299B4A3_g, c_unitCountAll);
    for (;; autoC299B4A3_u -= 1) {
        autoC299B4A3_var = UnitGroupUnitFromEnd(autoC299B4A3_g, autoC299B4A3_u);
        if (autoC299B4A3_var == null) { break; }
        lv_stackCount1 = (gv_upgrade4Count[5] - UnitBehaviorCount(autoC299B4A3_var, "TankBonus"));
        UnitBehaviorAdd(autoC299B4A3_var, "TankBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto0CF24300_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CF24300_u = UnitGroupCount(auto0CF24300_g, c_unitCountAll);
    for (;; auto0CF24300_u -= 1) {
        auto0CF24300_var = UnitGroupUnitFromEnd(auto0CF24300_g, auto0CF24300_u);
        if (auto0CF24300_var == null) { break; }
        lv_stackCount1 = (gv_upgrade4Count[6] - UnitBehaviorCount(auto0CF24300_var, "TankBonus"));
        UnitBehaviorAdd(auto0CF24300_var, "TankBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade4Search_Init () {
    gt_Upgrade4Search = TriggerCreate("gt_Upgrade4Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade4Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade5Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade5Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup auto498C23A9_g;
    int auto498C23A9_u;
    unit auto498C23A9_var;
    unitgroup auto159CED1E_g;
    int auto159CED1E_u;
    unit auto159CED1E_var;
    unitgroup auto4B20A77A_g;
    int auto4B20A77A_u;
    unit auto4B20A77A_var;
    unitgroup auto8B622001_g;
    int auto8B622001_u;
    unit auto8B622001_var;
    unitgroup auto2721BE46_g;
    int auto2721BE46_u;
    unit auto2721BE46_var;
    unitgroup auto71F70937_g;
    int auto71F70937_u;
    unit auto71F70937_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto498C23A9_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto498C23A9_u = UnitGroupCount(auto498C23A9_g, c_unitCountAll);
    for (;; auto498C23A9_u -= 1) {
        auto498C23A9_var = UnitGroupUnitFromEnd(auto498C23A9_g, auto498C23A9_u);
        if (auto498C23A9_var == null) { break; }
        lv_stackCount1 = (gv_upgrade5Count[1] - UnitBehaviorCount(auto498C23A9_var, "AssaultBonus"));
        UnitBehaviorAdd(auto498C23A9_var, "AssaultBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto159CED1E_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto159CED1E_u = UnitGroupCount(auto159CED1E_g, c_unitCountAll);
    for (;; auto159CED1E_u -= 1) {
        auto159CED1E_var = UnitGroupUnitFromEnd(auto159CED1E_g, auto159CED1E_u);
        if (auto159CED1E_var == null) { break; }
        lv_stackCount1 = (gv_upgrade5Count[2] - UnitBehaviorCount(auto159CED1E_var, "AssaultBonus"));
        UnitBehaviorAdd(auto159CED1E_var, "AssaultBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto4B20A77A_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B20A77A_u = UnitGroupCount(auto4B20A77A_g, c_unitCountAll);
    for (;; auto4B20A77A_u -= 1) {
        auto4B20A77A_var = UnitGroupUnitFromEnd(auto4B20A77A_g, auto4B20A77A_u);
        if (auto4B20A77A_var == null) { break; }
        lv_stackCount1 = (gv_upgrade5Count[3] - UnitBehaviorCount(auto4B20A77A_var, "AssaultBonus"));
        UnitBehaviorAdd(auto4B20A77A_var, "AssaultBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto8B622001_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B622001_u = UnitGroupCount(auto8B622001_g, c_unitCountAll);
    for (;; auto8B622001_u -= 1) {
        auto8B622001_var = UnitGroupUnitFromEnd(auto8B622001_g, auto8B622001_u);
        if (auto8B622001_var == null) { break; }
        lv_stackCount1 = (gv_upgrade5Count[4] - UnitBehaviorCount(auto8B622001_var, "AssaultBonus"));
        UnitBehaviorAdd(auto8B622001_var, "AssaultBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto2721BE46_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2721BE46_u = UnitGroupCount(auto2721BE46_g, c_unitCountAll);
    for (;; auto2721BE46_u -= 1) {
        auto2721BE46_var = UnitGroupUnitFromEnd(auto2721BE46_g, auto2721BE46_u);
        if (auto2721BE46_var == null) { break; }
        lv_stackCount1 = (gv_upgrade5Count[5] - UnitBehaviorCount(auto2721BE46_var, "AssaultBonus"));
        UnitBehaviorAdd(auto2721BE46_var, "AssaultBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto71F70937_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71F70937_u = UnitGroupCount(auto71F70937_g, c_unitCountAll);
    for (;; auto71F70937_u -= 1) {
        auto71F70937_var = UnitGroupUnitFromEnd(auto71F70937_g, auto71F70937_u);
        if (auto71F70937_var == null) { break; }
        lv_stackCount1 = (gv_upgrade5Count[6] - UnitBehaviorCount(auto71F70937_var, "AssaultBonus"));
        UnitBehaviorAdd(auto71F70937_var, "AssaultBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade5Search_Init () {
    gt_Upgrade5Search = TriggerCreate("gt_Upgrade5Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade5Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade6Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade6Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup autoBAAA1540_g;
    int autoBAAA1540_u;
    unit autoBAAA1540_var;
    unitgroup autoEBD3B593_g;
    int autoEBD3B593_u;
    unit autoEBD3B593_var;
    unitgroup auto1FAAF7AA_g;
    int auto1FAAF7AA_u;
    unit auto1FAAF7AA_var;
    unitgroup autoC6C38742_g;
    int autoC6C38742_u;
    unit autoC6C38742_var;
    unitgroup autoEB401CA9_g;
    int autoEB401CA9_u;
    unit autoEB401CA9_var;
    unitgroup auto8DDE7A95_g;
    int auto8DDE7A95_u;
    unit auto8DDE7A95_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBAAA1540_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBAAA1540_u = UnitGroupCount(autoBAAA1540_g, c_unitCountAll);
    for (;; autoBAAA1540_u -= 1) {
        autoBAAA1540_var = UnitGroupUnitFromEnd(autoBAAA1540_g, autoBAAA1540_u);
        if (autoBAAA1540_var == null) { break; }
        lv_stackCount1 = (gv_upgrade6Count[1] - UnitBehaviorCount(autoBAAA1540_var, "SplashBonus"));
        UnitBehaviorAdd(autoBAAA1540_var, "SplashBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoEBD3B593_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEBD3B593_u = UnitGroupCount(autoEBD3B593_g, c_unitCountAll);
    for (;; autoEBD3B593_u -= 1) {
        autoEBD3B593_var = UnitGroupUnitFromEnd(autoEBD3B593_g, autoEBD3B593_u);
        if (autoEBD3B593_var == null) { break; }
        lv_stackCount1 = (gv_upgrade6Count[2] - UnitBehaviorCount(autoEBD3B593_var, "SplashBonus"));
        UnitBehaviorAdd(autoEBD3B593_var, "SplashBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto1FAAF7AA_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1FAAF7AA_u = UnitGroupCount(auto1FAAF7AA_g, c_unitCountAll);
    for (;; auto1FAAF7AA_u -= 1) {
        auto1FAAF7AA_var = UnitGroupUnitFromEnd(auto1FAAF7AA_g, auto1FAAF7AA_u);
        if (auto1FAAF7AA_var == null) { break; }
        lv_stackCount1 = (gv_upgrade6Count[3] - UnitBehaviorCount(auto1FAAF7AA_var, "SplashBonus"));
        UnitBehaviorAdd(auto1FAAF7AA_var, "SplashBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoC6C38742_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6C38742_u = UnitGroupCount(autoC6C38742_g, c_unitCountAll);
    for (;; autoC6C38742_u -= 1) {
        autoC6C38742_var = UnitGroupUnitFromEnd(autoC6C38742_g, autoC6C38742_u);
        if (autoC6C38742_var == null) { break; }
        lv_stackCount1 = (gv_upgrade6Count[4] - UnitBehaviorCount(autoC6C38742_var, "SplashBonus"));
        UnitBehaviorAdd(autoC6C38742_var, "SplashBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoEB401CA9_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB401CA9_u = UnitGroupCount(autoEB401CA9_g, c_unitCountAll);
    for (;; autoEB401CA9_u -= 1) {
        autoEB401CA9_var = UnitGroupUnitFromEnd(autoEB401CA9_g, autoEB401CA9_u);
        if (autoEB401CA9_var == null) { break; }
        lv_stackCount1 = (gv_upgrade6Count[5] - UnitBehaviorCount(autoEB401CA9_var, "SplashBonus"));
        UnitBehaviorAdd(autoEB401CA9_var, "SplashBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto8DDE7A95_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8DDE7A95_u = UnitGroupCount(auto8DDE7A95_g, c_unitCountAll);
    for (;; auto8DDE7A95_u -= 1) {
        auto8DDE7A95_var = UnitGroupUnitFromEnd(auto8DDE7A95_g, auto8DDE7A95_u);
        if (auto8DDE7A95_var == null) { break; }
        lv_stackCount1 = (gv_upgrade6Count[6] - UnitBehaviorCount(auto8DDE7A95_var, "SplashBonus"));
        UnitBehaviorAdd(auto8DDE7A95_var, "SplashBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade6Search_Init () {
    gt_Upgrade6Search = TriggerCreate("gt_Upgrade6Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade6Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade7Search
//--------------------------------------------------------------------------------------------------
bool gt_Upgrade7Search_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount1;

    // Automatic Variable Declarations
    unitgroup autoCEB14AB3_g;
    int autoCEB14AB3_u;
    unit autoCEB14AB3_var;
    unitgroup autoAC083413_g;
    int autoAC083413_u;
    unit autoAC083413_var;
    unitgroup auto769C57EC_g;
    int auto769C57EC_u;
    unit auto769C57EC_var;
    unitgroup auto5A6E42B6_g;
    int auto5A6E42B6_u;
    unit auto5A6E42B6_var;
    unitgroup autoEDEA737D_g;
    int autoEDEA737D_u;
    unit autoEDEA737D_var;
    unitgroup autoA0DC745C_g;
    int autoA0DC745C_u;
    unit autoA0DC745C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCEB14AB3_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCEB14AB3_u = UnitGroupCount(autoCEB14AB3_g, c_unitCountAll);
    for (;; autoCEB14AB3_u -= 1) {
        autoCEB14AB3_var = UnitGroupUnitFromEnd(autoCEB14AB3_g, autoCEB14AB3_u);
        if (autoCEB14AB3_var == null) { break; }
        lv_stackCount1 = (gv_upgrade7Count[1] - UnitBehaviorCount(autoCEB14AB3_var, "AssassinBonus"));
        UnitBehaviorAdd(autoCEB14AB3_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoAC083413_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC083413_u = UnitGroupCount(autoAC083413_g, c_unitCountAll);
    for (;; autoAC083413_u -= 1) {
        autoAC083413_var = UnitGroupUnitFromEnd(autoAC083413_g, autoAC083413_u);
        if (autoAC083413_var == null) { break; }
        lv_stackCount1 = (gv_upgrade7Count[2] - UnitBehaviorCount(autoAC083413_var, "AssassinBonus"));
        UnitBehaviorAdd(autoAC083413_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto769C57EC_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto769C57EC_u = UnitGroupCount(auto769C57EC_g, c_unitCountAll);
    for (;; auto769C57EC_u -= 1) {
        auto769C57EC_var = UnitGroupUnitFromEnd(auto769C57EC_g, auto769C57EC_u);
        if (auto769C57EC_var == null) { break; }
        lv_stackCount1 = (gv_upgrade7Count[3] - UnitBehaviorCount(auto769C57EC_var, "AssassinBonus"));
        UnitBehaviorAdd(auto769C57EC_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    auto5A6E42B6_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5A6E42B6_u = UnitGroupCount(auto5A6E42B6_g, c_unitCountAll);
    for (;; auto5A6E42B6_u -= 1) {
        auto5A6E42B6_var = UnitGroupUnitFromEnd(auto5A6E42B6_g, auto5A6E42B6_u);
        if (auto5A6E42B6_var == null) { break; }
        lv_stackCount1 = (gv_upgrade7Count[4] - UnitBehaviorCount(auto5A6E42B6_var, "AssassinBonus"));
        UnitBehaviorAdd(auto5A6E42B6_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoEDEA737D_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEDEA737D_u = UnitGroupCount(autoEDEA737D_g, c_unitCountAll);
    for (;; autoEDEA737D_u -= 1) {
        autoEDEA737D_var = UnitGroupUnitFromEnd(autoEDEA737D_g, autoEDEA737D_u);
        if (autoEDEA737D_var == null) { break; }
        lv_stackCount1 = (gv_upgrade7Count[5] - UnitBehaviorCount(autoEDEA737D_var, "AssassinBonus"));
        UnitBehaviorAdd(autoEDEA737D_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    autoA0DC745C_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA0DC745C_u = UnitGroupCount(autoA0DC745C_g, c_unitCountAll);
    for (;; autoA0DC745C_u -= 1) {
        autoA0DC745C_var = UnitGroupUnitFromEnd(autoA0DC745C_g, autoA0DC745C_u);
        if (autoA0DC745C_var == null) { break; }
        lv_stackCount1 = (gv_upgrade7Count[6] - UnitBehaviorCount(autoA0DC745C_var, "AssassinBonus"));
        UnitBehaviorAdd(autoA0DC745C_var, "AssassinBonus", UnitFromId(1637809687), lv_stackCount1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrade7Search_Init () {
    gt_Upgrade7Search = TriggerCreate("gt_Upgrade7Search_Func");
    TriggerAddEventTimePeriodic(gt_Upgrade7Search, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitEntersRegionForShop
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersRegionForShop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(UnitFromId(1637809687), UnitGetOwner(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersRegionForShop_Init () {
    gt_UnitEntersRegionForShop = TriggerCreate("gt_UnitEntersRegionForShop_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersRegionForShop, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitLeavesRegionForShop
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesRegionForShop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(UnitFromId(1637809687), 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesRegionForShop_Init () {
    gt_UnitLeavesRegionForShop = TriggerCreate("gt_UnitLeavesRegionForShop_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesRegionForShop, null, RegionFromId(53), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade1
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[UnitGetOwner(EventUnit())].lv_hero, "ShopUpgrade1", UnitFromId(1637809687), 1);
    gv_upgrade1Count[UnitGetOwner(EventUnit())] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade1_Init () {
    gt_UnitBuysUpgrade1 = TriggerCreate("gt_UnitBuysUpgrade1_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade1, null, AbilityCommand("ShopUpgrades", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade2
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesMade, c_playerPropOperAdd, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade2_Init () {
    gt_UnitBuysUpgrade2 = TriggerCreate("gt_UnitBuysUpgrade2_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade2, null, AbilityCommand("ShopUpgrades", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade3
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[UnitGetOwner(EventUnit())].lv_hero, "SupportBonus", UnitFromId(1637809687), 1);
    gv_upgrade3Count[UnitGetOwner(EventUnit())] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade3_Init () {
    gt_UnitBuysUpgrade3 = TriggerCreate("gt_UnitBuysUpgrade3_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade3, null, AbilityCommand("ShopUpgrades", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade4
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[UnitGetOwner(EventUnit())].lv_hero, "TankBonus", UnitFromId(1637809687), 1);
    gv_upgrade4Count[UnitGetOwner(EventUnit())] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade4_Init () {
    gt_UnitBuysUpgrade4 = TriggerCreate("gt_UnitBuysUpgrade4_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade4, null, AbilityCommand("ShopUpgrades", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade5
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[UnitGetOwner(EventUnit())].lv_hero, "AssaultBonus", UnitFromId(1637809687), 1);
    gv_upgrade5Count[UnitGetOwner(EventUnit())] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade5_Init () {
    gt_UnitBuysUpgrade5 = TriggerCreate("gt_UnitBuysUpgrade5_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade5, null, AbilityCommand("ShopUpgrades", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade6
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[UnitGetOwner(EventUnit())].lv_hero, "SplashBonus", UnitFromId(1637809687), 1);
    gv_upgrade6Count[UnitGetOwner(EventUnit())] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade6_Init () {
    gt_UnitBuysUpgrade6 = TriggerCreate("gt_UnitBuysUpgrade6_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade6, null, AbilityCommand("ShopUpgrades", 6), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitBuysUpgrade7
//--------------------------------------------------------------------------------------------------
bool gt_UnitBuysUpgrade7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[UnitGetOwner(EventUnit())].lv_hero, "AssassinBonus", UnitFromId(1637809687), 1);
    gv_upgrade7Count[UnitGetOwner(EventUnit())] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitBuysUpgrade7_Init () {
    gt_UnitBuysUpgrade7 = TriggerCreate("gt_UnitBuysUpgrade7_Func");
    TriggerAddEventUnitAbility(gt_UnitBuysUpgrade7, null, AbilityCommand("ShopUpgrades", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateCargoTruck
//--------------------------------------------------------------------------------------------------
bool gt_CreateCargoTruck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numba;
    int lv_truckLife;
    fixed lv_truckSpeed;

    // Automatic Variable Declarations
    const int autoF45C2519_ae = 6;
    int autoF45C2519_var;
    const int autoCBCD8BAD_ae = 6;
    int autoCBCD8BAD_var;
    const int auto4E904410_ae = 6;
    int auto4E904410_var;
    const int auto409D3BB6_ae = 6;
    int auto409D3BB6_var;
    const int auto00C5149B_ae = 6;
    int auto00C5149B_var;
    const int auto4E1186B7_ae = 6;
    int auto4E1186B7_var;
    const int auto08C6B75C_ae = 6;
    int auto08C6B75C_var;
    const int auto7BD2784D_ae = 6;
    int auto7BD2784D_var;
    const int auto75690BFF_ae = 6;
    int auto75690BFF_var;
    const int autoFBFD0251_ae = 6;
    int autoFBFD0251_var;

    // Variable Initialization
    lv_numba = RandomInt(1, 5);
    lv_truckLife = RandomInt(250, 2500);
    lv_truckSpeed = RandomFixed(1.5, 2.5);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_numba == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/66EF7A8D"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/9205C079"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        Wait(15.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(1313584221));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/EF0B8E26"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2135831915)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        autoF45C2519_var = 1;
        for ( ; autoF45C2519_var <= autoF45C2519_ae; autoF45C2519_var += 1 ) {
            PlayerModifyPropertyInt(autoF45C2519_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/3486BDA6") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/B659B150") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/85B827A4") + (FixedToText(((4.0 - lv_truckSpeed) * (100 * ((gv_wave / 50) + 1))), c_fixedPrecisionAny) + StringExternal("Param/Value/58AB918D"))))))));
        PingDestroyAll();
        autoCBCD8BAD_var = 1;
        for ( ; autoCBCD8BAD_var <= autoCBCD8BAD_ae; autoCBCD8BAD_var += 1 ) {
            PlayerModifyPropertyInt(autoCBCD8BAD_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            PlayerModifyPropertyInt(autoCBCD8BAD_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            UnitXPAddXP(gv_playerInfo[autoCBCD8BAD_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * (100 * ((gv_wave / 50) + 1))));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 2)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/745EE3B3"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/77AB01FD"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(204056418));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/8FFA7332"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(867846409)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        auto4E904410_var = 1;
        for ( ; auto4E904410_var <= auto4E904410_ae; auto4E904410_var += 1 ) {
            PlayerModifyPropertyInt(auto4E904410_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/D1B14628") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/51E505C1") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/084ACEAA") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/98E85FED"))))))));
        PingDestroyAll();
        auto409D3BB6_var = 1;
        for ( ; auto409D3BB6_var <= auto409D3BB6_ae; auto409D3BB6_var += 1 ) {
            PlayerModifyPropertyInt(auto409D3BB6_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(auto409D3BB6_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[auto409D3BB6_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 3)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/C2621E69"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/95C4E950"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(1765499927));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/61CBE0CA"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(204056418)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        auto00C5149B_var = 1;
        for ( ; auto00C5149B_var <= auto00C5149B_ae; auto00C5149B_var += 1 ) {
            PlayerModifyPropertyInt(auto00C5149B_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/FE3E25EB") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/98ADAC1F") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/1B9D7FCE") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/BE19C054"))))))));
        PingDestroyAll();
        auto4E1186B7_var = 1;
        for ( ; auto4E1186B7_var <= auto4E1186B7_ae; auto4E1186B7_var += 1 ) {
            PlayerModifyPropertyInt(auto4E1186B7_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(auto4E1186B7_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[auto4E1186B7_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 4)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3F6E21CD"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/E85F3346"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(867846409));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E8268734"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1313584221)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        auto08C6B75C_var = 1;
        for ( ; auto08C6B75C_var <= auto08C6B75C_ae; auto08C6B75C_var += 1 ) {
            PlayerModifyPropertyInt(auto08C6B75C_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/9B027C74") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/6AB24118") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/330C39FD") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/14BA8591"))))))));
        PingDestroyAll();
        auto7BD2784D_var = 1;
        for ( ; auto7BD2784D_var <= auto7BD2784D_ae; auto7BD2784D_var += 1 ) {
            PlayerModifyPropertyInt(auto7BD2784D_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(auto7BD2784D_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[auto7BD2784D_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/00F73275"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/5BF60ED5"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(2135831915));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/45966F27"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1765499927)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        auto75690BFF_var = 1;
        for ( ; auto75690BFF_var <= auto75690BFF_ae; auto75690BFF_var += 1 ) {
            PlayerModifyPropertyInt(auto75690BFF_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/AFD6CDAB") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/1D5B3581") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/EA2B604F") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/FBAA48E6"))))))));
        PingDestroyAll();
        autoFBFD0251_var = 1;
        for ( ; autoFBFD0251_var <= autoFBFD0251_ae; autoFBFD0251_var += 1 ) {
            PlayerModifyPropertyInt(autoFBFD0251_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(autoFBFD0251_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[autoFBFD0251_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateCargoTruck_Init () {
    gt_CreateCargoTruck = TriggerCreate("gt_CreateCargoTruck_Func");
    TriggerAddEventTimePeriodic(gt_CreateCargoTruck, RandomInt(1200, 2400), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnLateWaveTruckOn
//--------------------------------------------------------------------------------------------------
bool gt_TurnLateWaveTruckOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 149))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CreateCargoTruckHighWave, true);
    TriggerEnable(gt_CreateCargoTruck, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnLateWaveTruckOn_Init () {
    gt_TurnLateWaveTruckOn = TriggerCreate("gt_TurnLateWaveTruckOn_Func");
    TriggerAddEventTimePeriodic(gt_TurnLateWaveTruckOn, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateCargoTruckHighWave
//--------------------------------------------------------------------------------------------------
bool gt_CreateCargoTruckHighWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numba;
    int lv_truckLife;
    fixed lv_truckSpeed;

    // Automatic Variable Declarations
    const int autoAA802C3B_ae = 6;
    int autoAA802C3B_var;
    const int autoC8B21AC0_ae = 6;
    int autoC8B21AC0_var;
    const int auto04C4F80D_ae = 6;
    int auto04C4F80D_var;
    const int auto934605D0_ae = 6;
    int auto934605D0_var;
    const int auto794CC28C_ae = 6;
    int auto794CC28C_var;

    // Variable Initialization
    lv_numba = RandomInt(1, 5);
    lv_truckLife = RandomInt(250, 2500);
    lv_truckSpeed = RandomFixed(1.5, 2.5);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_numba == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9DB4AC2C"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/F026DA7D"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        Wait(15.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(1313584221));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/296D89C2"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2135831915)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/4CAE38EA") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/3F7835D6") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/E719DBB6") + (FixedToText(((4.0 - lv_truckSpeed) * (100 * ((gv_wave / 50) + 1))), c_fixedPrecisionAny) + StringExternal("Param/Value/991327CA"))))))));
        PingDestroyAll();
        autoAA802C3B_var = 1;
        for ( ; autoAA802C3B_var <= autoAA802C3B_ae; autoAA802C3B_var += 1 ) {
            PlayerModifyPropertyInt(autoAA802C3B_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(autoAA802C3B_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[autoAA802C3B_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * (100 * ((gv_wave / 50) + 1))));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 2)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/AC2940D9"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/D133F00F"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(204056418));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/8F73409C"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(867846409)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/9AE7B8AF") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/57C4D8D0") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/E6AA3229") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/933990CE"))))))));
        PingDestroyAll();
        autoC8B21AC0_var = 1;
        for ( ; autoC8B21AC0_var <= autoC8B21AC0_ae; autoC8B21AC0_var += 1 ) {
            PlayerModifyPropertyInt(autoC8B21AC0_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(autoC8B21AC0_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[autoC8B21AC0_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 3)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CFC56C21"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/3E9C8849"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(1765499927));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/94E9C8B1"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(204056418)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/5C956543") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/A085EBEA") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/816A0BC9") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/B631F2C2"))))))));
        PingDestroyAll();
        auto04C4F80D_var = 1;
        for ( ; auto04C4F80D_var <= auto04C4F80D_ae; auto04C4F80D_var += 1 ) {
            PlayerModifyPropertyInt(auto04C4F80D_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(auto04C4F80D_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[auto04C4F80D_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 4)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/A7CC4E80"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/B1BDEB9C"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(867846409));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/1D62DF74"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1313584221)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/5BD60AEE") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/471750C8") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/43DD76A6") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/2FE837E3"))))))));
        PingDestroyAll();
        auto934605D0_var = 1;
        for ( ; auto934605D0_var <= auto934605D0_ae; auto934605D0_var += 1 ) {
            PlayerModifyPropertyInt(auto934605D0_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(auto934605D0_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[auto934605D0_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    if ((lv_numba == 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/5B92C2A1"));
        Wait(5.0, c_timeGame);
        ObjectiveCreateForPlayers(StringExternal("Param/Value/658C559F"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
        gv_objective = ObjectiveLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 8, PointFromId(2135831915));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_truckLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lv_truckSpeed);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/97A502B5"));
        gv_cargoTruck1 = UnitLastCreated();
        gv_ping = PingLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1765499927)), c_orderQueueReplace);
        TriggerEnable(gt_TruckDies, true);
        TriggerEnable(gt_ReApplyPingPosition, true);
        UnitWaitUntilIdle(UnitLastCreated(), true);
        ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/852F68A4") + (IntToText((3000 - lv_truckLife)) + (StringExternal("Param/Value/BB3AEECE") + (IntToText(((3000 - lv_truckLife) / 2)) + (StringExternal("Param/Value/96583869") + (FixedToText(((4.0 - lv_truckSpeed) * 100.0), c_fixedPrecisionAny) + StringExternal("Param/Value/7C2BD23F"))))))));
        PingDestroyAll();
        auto794CC28C_var = 1;
        for ( ; auto794CC28C_var <= auto794CC28C_ae; auto794CC28C_var += 1 ) {
            PlayerModifyPropertyInt(auto794CC28C_var, c_playerPropMinerals, c_playerPropOperAdd, (3000 - lv_truckLife));
            PlayerModifyPropertyInt(auto794CC28C_var, c_playerPropVespene, c_playerPropOperAdd, ((3000 - lv_truckLife) / 2));
            UnitXPAddXP(gv_playerInfo[auto794CC28C_var].lv_hero, "CheckMyLevel", ((4.0 - lv_truckSpeed) * 100.0));
        }
        TriggerEnable(gt_ReApplyPingPosition, false);
        TriggerEnable(gt_TruckDies, false);
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_objective);
        UnitKill(UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateCargoTruckHighWave_Init () {
    gt_CreateCargoTruckHighWave = TriggerCreate("gt_CreateCargoTruckHighWave_Func");
    TriggerEnable(gt_CreateCargoTruckHighWave, false);
    TriggerAddEventTimePeriodic(gt_CreateCargoTruckHighWave, RandomInt(600, 1200), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level1
//--------------------------------------------------------------------------------------------------
bool gt_Level1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 2))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/7FC0D78F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1_Init () {
    gt_Level1 = TriggerCreate("gt_Level1_Func");
    TriggerAddEventUnitGainLevel(gt_Level1, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level2
//--------------------------------------------------------------------------------------------------
bool gt_Level2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 3))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/F9CBEA71"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level2_Init () {
    gt_Level2 = TriggerCreate("gt_Level2_Func");
    TriggerAddEventUnitGainLevel(gt_Level2, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level3
//--------------------------------------------------------------------------------------------------
bool gt_Level3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 4))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/31E5AE1E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level3_Init () {
    gt_Level3 = TriggerCreate("gt_Level3_Func");
    TriggerAddEventUnitGainLevel(gt_Level3, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level4
//--------------------------------------------------------------------------------------------------
bool gt_Level4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 5))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/531583B5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level4_Init () {
    gt_Level4 = TriggerCreate("gt_Level4_Func");
    TriggerAddEventUnitGainLevel(gt_Level4, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level5
//--------------------------------------------------------------------------------------------------
bool gt_Level5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 6))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/DFBA8715"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level5_Init () {
    gt_Level5 = TriggerCreate("gt_Level5_Func");
    TriggerAddEventUnitGainLevel(gt_Level5, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level6
//--------------------------------------------------------------------------------------------------
bool gt_Level6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 7))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/2A34152F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level6_Init () {
    gt_Level6 = TriggerCreate("gt_Level6_Func");
    TriggerAddEventUnitGainLevel(gt_Level6, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level7
//--------------------------------------------------------------------------------------------------
bool gt_Level7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 8))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/10E0E3B5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level7_Init () {
    gt_Level7 = TriggerCreate("gt_Level7_Func");
    TriggerAddEventUnitGainLevel(gt_Level7, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level8
//--------------------------------------------------------------------------------------------------
bool gt_Level8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 9))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/E4218F68"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level8_Init () {
    gt_Level8 = TriggerCreate("gt_Level8_Func");
    TriggerAddEventUnitGainLevel(gt_Level8, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level9
//--------------------------------------------------------------------------------------------------
bool gt_Level9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 10))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/C0FA660D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level9_Init () {
    gt_Level9 = TriggerCreate("gt_Level9_Func");
    TriggerAddEventUnitGainLevel(gt_Level9, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level100
//--------------------------------------------------------------------------------------------------
bool gt_Level100_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CommandCenter"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutomatedRefinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Refinery"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SentryGun"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LabTurretUp"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Barracks"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HotSRaptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksTechLab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BarracksReactor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "EngineeringBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SupplyDepotLowered"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Bunker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ghost2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WarPig"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoboticsBay"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTower"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkShrine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Obelisk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercReaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PoisonWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FireWard"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachCorpser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RoachVile"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Roachling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PhaseCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierCannon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PowerCannon"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "FakeColossus") == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") == 100))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/565E544F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level100_Init () {
    gt_Level100 = TriggerCreate("gt_Level100_Func");
    TriggerAddEventUnitGainLevel(gt_Level100, UnitRefFromVariable("gv_playerInfo[c_playerAny].lv_hero"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Info Link
//--------------------------------------------------------------------------------------------------
bool gt_LevelInfoLink_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_levelInfoLink[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/A4E6999B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 185, 265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D8195216"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_levelInfoLink[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 98, 48);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_levelInfoLink[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_levelInfoLink[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelInfoLink_Init () {
    gt_LevelInfoLink = TriggerCreate("gt_LevelInfoLink_Func");
    TriggerAddEventMapInit(gt_LevelInfoLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open/Close Level Info
//--------------------------------------------------------------------------------------------------
bool gt_OpenCloseLevelInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_levelInfoLink[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_levelInfoOnOff == 1)) {
        DialogControlSetVisible(gv_infoLevel1[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel1[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel2[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel2[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel3[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel3[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel4[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel4[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel5[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel5[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel6[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel6[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel7[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel7[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel8[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel8[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel9[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel9[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel10[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_infoLevel10[2], PlayerGroupSingle(EventPlayer()), true);
        gv_levelInfoOnOff = 2;
    }
    else {
        if ((gv_levelInfoOnOff == 2)) {
            DialogControlSetVisible(gv_infoLevel1[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel1[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel2[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel2[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel3[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel3[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel4[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel4[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel5[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel5[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel6[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel6[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel7[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel7[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel8[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel8[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel9[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel9[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel10[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_infoLevel10[2], PlayerGroupSingle(EventPlayer()), false);
            gv_levelInfoOnOff = 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenCloseLevelInfo_Init () {
    gt_OpenCloseLevelInfo = TriggerCreate("gt_OpenCloseLevelInfo_Func");
    TriggerAddEventDialogControl(gt_OpenCloseLevelInfo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel1
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel1[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 185, -5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/680CDF7C"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel1[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel1[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\icon-health-nobg.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel1[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel1[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel1_Init () {
    gt_InfoLevel1 = TriggerCreate("gt_InfoLevel1_Func");
    TriggerAddEventMapInit(gt_InfoLevel1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel2
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel2[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 240, -5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B71EFFF5"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\speedfreaks_coop.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel2[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel2[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel2_Init () {
    gt_InfoLevel2 = TriggerCreate("gt_InfoLevel2_Func");
    TriggerAddEventMapInit(gt_InfoLevel2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel3
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel3[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 185, 50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D16FEDBE"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel3[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel3[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-protoss-fenix-fenixweapondamage.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel3[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel3[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel3_Init () {
    gt_InfoLevel3 = TriggerCreate("gt_InfoLevel3_Func");
    TriggerAddEventMapInit(gt_InfoLevel3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel4
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel4[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 240, 50);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/88952164"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel4[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel4[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-nova-equipment-canisterrifle.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel4[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel4[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel4_Init () {
    gt_InfoLevel4 = TriggerCreate("gt_InfoLevel4_Func");
    TriggerAddEventMapInit(gt_InfoLevel4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel5
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel5[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 185, 105);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/1EC854C1"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel5[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel5[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-zerg-rapidregeneration-color.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel5[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel5[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel5_Init () {
    gt_InfoLevel5 = TriggerCreate("gt_InfoLevel5_Func");
    TriggerAddEventMapInit(gt_InfoLevel5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel6
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel6[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 240, 105);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2734ED46"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel6[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel6[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel6[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel6[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel6_Init () {
    gt_InfoLevel6 = TriggerCreate("gt_InfoLevel6_Func");
    TriggerAddEventMapInit(gt_InfoLevel6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel7
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel7[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 185, 160);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/769D67B5"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel7[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel7[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-protoss-voidarmor.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel7[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel7[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel7_Init () {
    gt_InfoLevel7 = TriggerCreate("gt_InfoLevel7_Func");
    TriggerAddEventMapInit(gt_InfoLevel7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel8
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel8[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 240, 160);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9E29048F"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel8[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel8[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-progression-protoss-fenix-5-immortalandscoutchampions.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel8[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel8[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel8_Init () {
    gt_InfoLevel8 = TriggerCreate("gt_InfoLevel8_Func");
    TriggerAddEventMapInit(gt_InfoLevel8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel9
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel9[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 185, 215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/C50662F4"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel9[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel9[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\bioticleech_coop.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel9[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel9[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel9_Init () {
    gt_InfoLevel9 = TriggerCreate("gt_InfoLevel9_Func");
    TriggerAddEventMapInit(gt_InfoLevel9);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoLevel10
//--------------------------------------------------------------------------------------------------
bool gt_InfoLevel10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_infoLevel10[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 240, 215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/260DAD45"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.1, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_infoLevel10[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_infoLevel10[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-kerrigan-crushinggripwave.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_infoLevel10[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_infoLevel10[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoLevel10_Init () {
    gt_InfoLevel10 = TriggerCreate("gt_InfoLevel10_Func");
    TriggerAddEventMapInit(gt_InfoLevel10);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScanForNothingStopsMeNow
//--------------------------------------------------------------------------------------------------
bool gt_ScanForNothingStopsMeNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoEA0A462A_ae = 6;
    int autoEA0A462A_var;
    unitgroup autoB191B236_g;
    int autoB191B236_u;
    unit autoB191B236_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEA0A462A_var = 1;
    for ( ; autoEA0A462A_var <= autoEA0A462A_ae; autoEA0A462A_var += 1 ) {
        if ((gv_playerInfo[autoEA0A462A_var].lv_hasNothingStopsNow == true)) {
            autoB191B236_g = UnitGroup(null, autoEA0A462A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB191B236_u = UnitGroupCount(autoB191B236_g, c_unitCountAll);
            for (;; autoB191B236_u -= 1) {
                autoB191B236_var = UnitGroupUnitFromEnd(autoB191B236_g, autoB191B236_u);
                if (autoB191B236_var == null) { break; }
                UnitBehaviorAdd(autoB191B236_var, "NothingStopsMeNow", gv_playerInfo[autoEA0A462A_var].lv_hero, 1);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanForNothingStopsMeNow_Init () {
    gt_ScanForNothingStopsMeNow = TriggerCreate("gt_ScanForNothingStopsMeNow_Func");
    TriggerAddEventTimePeriodic(gt_ScanForNothingStopsMeNow, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn1
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss0Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn1_Init () {
    gt_InstaBossSpawn1 = TriggerCreate("gt_InstaBossSpawn1_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn1, c_playerAny, "-bountyboss1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn2
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss1Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn2_Init () {
    gt_InstaBossSpawn2 = TriggerCreate("gt_InstaBossSpawn2_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn2, c_playerAny, "-bountyboss2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn3
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss2Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn3_Init () {
    gt_InstaBossSpawn3 = TriggerCreate("gt_InstaBossSpawn3_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn3, c_playerAny, "-bountyboss3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn4
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss3Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn4_Init () {
    gt_InstaBossSpawn4 = TriggerCreate("gt_InstaBossSpawn4_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn4, c_playerAny, "-bountyboss4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn5
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss4Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn5_Init () {
    gt_InstaBossSpawn5 = TriggerCreate("gt_InstaBossSpawn5_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn5, c_playerAny, "-bountyboss5", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn6
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss5Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn6_Init () {
    gt_InstaBossSpawn6 = TriggerCreate("gt_InstaBossSpawn6_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn6, c_playerAny, "-bountyboss6", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn7
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss6Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn7_Init () {
    gt_InstaBossSpawn7 = TriggerCreate("gt_InstaBossSpawn7_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn7, c_playerAny, "-bountyboss7", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn8
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss7Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn8_Init () {
    gt_InstaBossSpawn8 = TriggerCreate("gt_InstaBossSpawn8_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn8, c_playerAny, "-bountyboss8", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn9
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss8Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn9_Init () {
    gt_InstaBossSpawn9 = TriggerCreate("gt_InstaBossSpawn9_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn9, c_playerAny, "-bountyboss9", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn10
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss9Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn10_Init () {
    gt_InstaBossSpawn10 = TriggerCreate("gt_InstaBossSpawn10_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn10, c_playerAny, "-bountyboss10", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn11
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss10Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn11_Init () {
    gt_InstaBossSpawn11 = TriggerCreate("gt_InstaBossSpawn11_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn11, c_playerAny, "-bountyboss11", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn12
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss11Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn12_Init () {
    gt_InstaBossSpawn12 = TriggerCreate("gt_InstaBossSpawn12_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn12, c_playerAny, "-bountyboss12", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn13
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss12Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn13_Init () {
    gt_InstaBossSpawn13 = TriggerCreate("gt_InstaBossSpawn13_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn13, c_playerAny, "-bountyboss13", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InstaBossSpawn14
//--------------------------------------------------------------------------------------------------
bool gt_InstaBossSpawn14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Boss13Create, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstaBossSpawn14_Init () {
    gt_InstaBossSpawn14 = TriggerCreate("gt_InstaBossSpawn14_Func");
    TriggerAddEventChatMessage(gt_InstaBossSpawn14, c_playerAny, "-bountyboss14", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kel'ThuzadIceVisual
//--------------------------------------------------------------------------------------------------
bool gt_KelThuzadIceVisual_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("War3_FrostNovaTarget", EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KelThuzadIceVisual_Init () {
    gt_KelThuzadIceVisual = TriggerCreate("gt_KelThuzadIceVisual_Func");
    TriggerAddEventUnitAbility(gt_KelThuzadIceVisual, null, AbilityCommand("FrostNova", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss0Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss0Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1560D9DD_ae = 6;
    int auto1560D9DD_var;
    const int auto08C8FB2A_ae = 8;
    int auto08C8FB2A_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((450.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (450.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B163BD17"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach2", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (5000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (5000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (15 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/5FB84DA3"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/5C9791C2"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/19CAB1C6"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/93B66558"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto1560D9DD_var = 1;
        for ( ; auto1560D9DD_var <= auto1560D9DD_ae; auto1560D9DD_var += 1 ) {
            if ((PlayerGetPropertyInt(auto1560D9DD_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto1560D9DD_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        auto08C8FB2A_var = 1;
        for ( ; auto08C8FB2A_var <= auto08C8FB2A_ae; auto08C8FB2A_var += 1 ) {
            gv_playerInfo[auto08C8FB2A_var].lv_specialistKills += 100;
            PlayerModifyPropertyInt(auto08C8FB2A_var, c_playerPropMinerals, c_playerPropOperAdd, 100);
            PlayerModifyPropertyInt(auto08C8FB2A_var, c_playerPropVespene, c_playerPropOperAdd, 100);
            UIDisplayMessage(PlayerGroupSingle(auto08C8FB2A_var), c_messageAreaChat, StringExternal("Param/Value/0AAAAE9B"));
            BoardItemSetText(gv_leaderboard, 5, auto08C8FB2A_var, IntToText(gv_playerInfo[auto08C8FB2A_var].lv_specialistKills));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/FB4FE677"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss0Create_Init () {
    gt_Boss0Create = TriggerCreate("gt_Boss0Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss0Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss1Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss1Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9C9D106D_ae = 6;
    int auto9C9D106D_var;
    const int auto783433AC_ae = 8;
    int auto783433AC_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((1200.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (1200.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/BBAB1C12"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Brutalisk", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (30000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (30000 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/431B70E2"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3215F93D"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/5002A4EA"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto9C9D106D_var = 1;
        for ( ; auto9C9D106D_var <= auto9C9D106D_ae; auto9C9D106D_var += 1 ) {
            if ((PlayerGetPropertyInt(auto9C9D106D_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto9C9D106D_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        auto783433AC_var = 1;
        for ( ; auto783433AC_var <= auto783433AC_ae; auto783433AC_var += 1 ) {
            gv_playerInfo[auto783433AC_var].lv_tankKills += 50;
            gv_playerInfo[auto783433AC_var].lv_splashKills += 100;
            gv_playerInfo[auto783433AC_var].lv_asassinKills += 75;
            PlayerModifyPropertyInt(auto783433AC_var, c_playerPropMinerals, c_playerPropOperAdd, 100);
            PlayerModifyPropertyInt(auto783433AC_var, c_playerPropVespene, c_playerPropOperAdd, 100);
            UIDisplayMessage(PlayerGroupSingle(auto783433AC_var), c_messageAreaChat, StringExternal("Param/Value/9702AB15"));
            BoardItemSetText(gv_leaderboard, 3, auto783433AC_var, IntToText(gv_playerInfo[auto783433AC_var].lv_tankKills));
            BoardItemSetText(gv_leaderboard, 6, auto783433AC_var, IntToText(gv_playerInfo[auto783433AC_var].lv_splashKills));
            BoardItemSetText(gv_leaderboard, 7, auto783433AC_var, IntToText(gv_playerInfo[auto783433AC_var].lv_asassinKills));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CED36135"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1Create_Init () {
    gt_Boss1Create = TriggerCreate("gt_Boss1Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss1Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss2Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss2Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto49467BA3_ae = 6;
    int auto49467BA3_var;
    const int auto70DEB838_ae = 8;
    int auto70DEB838_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((1800.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (1800.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/ED3B0A56"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalHydralisk", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (20000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (20000 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/A23B2070"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/EABFB0B9"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/E03B7541"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto49467BA3_var = 1;
        for ( ; auto49467BA3_var <= auto49467BA3_ae; auto49467BA3_var += 1 ) {
            if ((PlayerGetPropertyInt(auto49467BA3_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto49467BA3_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        auto70DEB838_var = 1;
        for ( ; auto70DEB838_var <= auto70DEB838_ae; auto70DEB838_var += 1 ) {
            gv_playerInfo[auto70DEB838_var].lv_builderKills += 200;
            gv_playerInfo[auto70DEB838_var].lv_supportKills += 175;
            gv_playerInfo[auto70DEB838_var].lv_singleTargetKills += 150;
            PlayerModifyPropertyInt(auto70DEB838_var, c_playerPropMinerals, c_playerPropOperAdd, 250);
            PlayerModifyPropertyInt(auto70DEB838_var, c_playerPropVespene, c_playerPropOperAdd, 250);
            UIDisplayMessage(PlayerGroupSingle(auto70DEB838_var), c_messageAreaChat, StringExternal("Param/Value/94C876C5"));
            BoardItemSetText(gv_leaderboard, 9, auto70DEB838_var, IntToText(gv_playerInfo[auto70DEB838_var].lv_builderKills));
            BoardItemSetText(gv_leaderboard, 4, auto70DEB838_var, IntToText(gv_playerInfo[auto70DEB838_var].lv_supportKills));
            BoardItemSetText(gv_leaderboard, 8, auto70DEB838_var, IntToText(gv_playerInfo[auto70DEB838_var].lv_singleTargetKills));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/1D6AABA4"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss2Create_Init () {
    gt_Boss2Create = TriggerCreate("gt_Boss2Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss2Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss3Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss3Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC6F718BF_ae = 6;
    int autoC6F718BF_var;
    const int autoC331635E_ae = 8;
    int autoC331635E_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((2400.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (2400.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/328574BF"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganInfestBroodling2", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (35000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (35000 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/A6643A10"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/807864D3"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/44A5B4C5"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        autoC6F718BF_var = 1;
        for ( ; autoC6F718BF_var <= autoC6F718BF_ae; autoC6F718BF_var += 1 ) {
            if ((PlayerGetPropertyInt(autoC6F718BF_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(autoC6F718BF_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoC331635E_var = 1;
        for ( ; autoC331635E_var <= autoC331635E_ae; autoC331635E_var += 1 ) {
            PlayerModifyPropertyInt(autoC331635E_var, c_playerPropMinerals, c_playerPropOperAdd, 250);
            PlayerModifyPropertyInt(autoC331635E_var, c_playerPropVespene, c_playerPropOperAdd, 250);
            UIDisplayMessage(PlayerGroupSingle(autoC331635E_var), c_messageAreaChat, StringExternal("Param/Value/78768F16"));
            gv_playerInfo[autoC331635E_var].lv_specialistKills += 100;
            gv_playerInfo[autoC331635E_var].lv_singleTargetKills += 100;
            gv_playerInfo[autoC331635E_var].lv_asassinKills += 100;
            gv_playerInfo[autoC331635E_var].lv_builderKills += 100;
            gv_playerInfo[autoC331635E_var].lv_tankKills += 100;
            gv_playerInfo[autoC331635E_var].lv_splashKills += 100;
            gv_playerInfo[autoC331635E_var].lv_supportKills += 100;
            BoardItemSetText(gv_leaderboard, 3, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_tankKills));
            BoardItemSetText(gv_leaderboard, 4, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_supportKills));
            BoardItemSetText(gv_leaderboard, 5, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_specialistKills));
            BoardItemSetText(gv_leaderboard, 6, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_splashKills));
            BoardItemSetText(gv_leaderboard, 7, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_asassinKills));
            BoardItemSetText(gv_leaderboard, 8, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_singleTargetKills));
            BoardItemSetText(gv_leaderboard, 9, autoC331635E_var, IntToText(gv_playerInfo[autoC331635E_var].lv_builderKills));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/ABA96700"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss3Create_Init () {
    gt_Boss3Create = TriggerCreate("gt_Boss3Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss3Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss4Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss4Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD17E13D4_ae = 6;
    int autoD17E13D4_var;
    const int autoAEAF4814_ae = 8;
    int autoAEAF4814_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((3000.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (3000.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/DCF0F8DB"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravasaur", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (42500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (42500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (175 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/AE4BFD4A"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3E16DFF3"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/46BAF92A"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        autoD17E13D4_var = 1;
        for ( ; autoD17E13D4_var <= autoD17E13D4_ae; autoD17E13D4_var += 1 ) {
            if ((PlayerGetPropertyInt(autoD17E13D4_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(autoD17E13D4_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoAEAF4814_var = 1;
        for ( ; autoAEAF4814_var <= autoAEAF4814_ae; autoAEAF4814_var += 1 ) {
            PlayerModifyPropertyInt(autoAEAF4814_var, c_playerPropMinerals, c_playerPropOperAdd, 500);
            PlayerModifyPropertyInt(autoAEAF4814_var, c_playerPropVespene, c_playerPropOperAdd, 500);
            UIDisplayMessage(PlayerGroupSingle(autoAEAF4814_var), c_messageAreaChat, StringExternal("Param/Value/DE79798A"));
            gv_playerInfo[autoAEAF4814_var].lv_specialistKills += 250;
            gv_playerInfo[autoAEAF4814_var].lv_singleTargetKills += 250;
            gv_playerInfo[autoAEAF4814_var].lv_asassinKills += 250;
            gv_playerInfo[autoAEAF4814_var].lv_builderKills += 250;
            gv_playerInfo[autoAEAF4814_var].lv_tankKills += 250;
            gv_playerInfo[autoAEAF4814_var].lv_splashKills += 250;
            gv_playerInfo[autoAEAF4814_var].lv_supportKills += 250;
            BoardItemSetText(gv_leaderboard, 3, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_tankKills));
            BoardItemSetText(gv_leaderboard, 4, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_supportKills));
            BoardItemSetText(gv_leaderboard, 5, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_specialistKills));
            BoardItemSetText(gv_leaderboard, 6, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_splashKills));
            BoardItemSetText(gv_leaderboard, 7, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_asassinKills));
            BoardItemSetText(gv_leaderboard, 8, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_singleTargetKills));
            BoardItemSetText(gv_leaderboard, 9, autoAEAF4814_var, IntToText(gv_playerInfo[autoAEAF4814_var].lv_builderKills));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F1CEC4A7"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss4Create_Init () {
    gt_Boss4Create = TriggerCreate("gt_Boss4Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss4Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss5Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss5Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3B33F666_ae = 6;
    int auto3B33F666_var;
    const int autoBC59CD6C_ae = 8;
    int autoBC59CD6C_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((3600.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (3600.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/91C4048E"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infestor", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (40000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (45000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (375 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyRegen, (1 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/064DED49"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B5A97E86"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/477F3FF7"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto3B33F666_var = 1;
        for ( ; auto3B33F666_var <= auto3B33F666_ae; auto3B33F666_var += 1 ) {
            if ((PlayerGetPropertyInt(auto3B33F666_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto3B33F666_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoBC59CD6C_var = 1;
        for ( ; autoBC59CD6C_var <= autoBC59CD6C_ae; autoBC59CD6C_var += 1 ) {
            PlayerModifyPropertyInt(autoBC59CD6C_var, c_playerPropMinerals, c_playerPropOperAdd, 600);
            PlayerModifyPropertyInt(autoBC59CD6C_var, c_playerPropVespene, c_playerPropOperAdd, 600);
            UIDisplayMessage(PlayerGroupSingle(autoBC59CD6C_var), c_messageAreaChat, StringExternal("Param/Value/08D44370"));
            gv_playerInfo[autoBC59CD6C_var].lv_splashKills += 1250;
            gv_playerInfo[autoBC59CD6C_var].lv_tankKills += 250;
            BoardItemSetText(gv_leaderboard, 3, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_tankKills));
            BoardItemSetText(gv_leaderboard, 4, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_supportKills));
            BoardItemSetText(gv_leaderboard, 5, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_specialistKills));
            BoardItemSetText(gv_leaderboard, 6, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_splashKills));
            BoardItemSetText(gv_leaderboard, 7, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_asassinKills));
            BoardItemSetText(gv_leaderboard, 8, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_singleTargetKills));
            BoardItemSetText(gv_leaderboard, 9, autoBC59CD6C_var, IntToText(gv_playerInfo[autoBC59CD6C_var].lv_builderKills));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F518CDF6"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss5Create_Init () {
    gt_Boss5Create = TriggerCreate("gt_Boss5Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss5Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss6Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss6Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto203258CC_ae = 6;
    int auto203258CC_var;
    const int autoC96379B8_ae = 8;
    int autoC96379B8_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((4200.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (4200.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(9, "StalkerBlinkBuildRange1", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0AE99E32"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedStukov", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (83250 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (83250 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (600 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E7CC41F0"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/45DD6164"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/60EB0AB3"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto203258CC_var = 1;
        for ( ; auto203258CC_var <= auto203258CC_ae; auto203258CC_var += 1 ) {
            if ((PlayerGetPropertyInt(auto203258CC_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto203258CC_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoC96379B8_var = 1;
        for ( ; autoC96379B8_var <= autoC96379B8_ae; autoC96379B8_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(autoC96379B8_var), c_messageAreaChat, StringExternal("Param/Value/292F2248"));
            DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(autoC96379B8_var), true);
            DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(autoC96379B8_var), true);
            DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(autoC96379B8_var), true);
            DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(autoC96379B8_var), true);
            DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(autoC96379B8_var), true);
            DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(autoC96379B8_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3B8D87AF"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss6Create_Init () {
    gt_Boss6Create = TriggerCreate("gt_Boss6Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss6Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create
//--------------------------------------------------------------------------------------------------
bool gt_G1Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1000KillGroup1[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/124FA1C2"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1000KillGroup1[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1000KillGroup1[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1000KillGroup1[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create_Init () {
    gt_G1Create = TriggerCreate("gt_G1Create_Func");
    TriggerAddEventMapInit(gt_G1Create);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G1
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1000KillGroup1[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss6RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss6RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1000;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1000;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1000;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1000;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG1_Init () {
    gt_ActivateG1 = TriggerCreate("gt_ActivateG1_Func");
    TriggerAddEventDialogControl(gt_ActivateG1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G2 Create 
//--------------------------------------------------------------------------------------------------
bool gt_G2Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1000KillGroup2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/F21618D6"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1000KillGroup2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1000KillGroup2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1000KillGroup2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G2Create_Init () {
    gt_G2Create = TriggerCreate("gt_G2Create_Func");
    TriggerAddEventMapInit(gt_G2Create);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1000KillGroup2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss6RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss6RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1000;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1000;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1000;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1000;
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG2_Init () {
    gt_ActivateG2 = TriggerCreate("gt_ActivateG2_Func");
    TriggerAddEventDialogControl(gt_ActivateG2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create
//--------------------------------------------------------------------------------------------------
bool gt_G3Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1000KillGroup3[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7B7FED25"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1000KillGroup3[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1000KillGroup3[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1000KillGroup3[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create_Init () {
    gt_G3Create = TriggerCreate("gt_G3Create_Func");
    TriggerAddEventMapInit(gt_G3Create);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G3
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1000KillGroup3[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss6RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss6RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1000;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1000;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1000;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1000;
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG3_Init () {
    gt_ActivateG3 = TriggerCreate("gt_ActivateG3_Func");
    TriggerAddEventDialogControl(gt_ActivateG3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DC1C0A75"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate_Init () {
    gt_DoubleKillCreate = TriggerCreate("gt_DoubleKillCreate_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss6RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss6RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill_Init () {
    gt_ActivateDoubleKill = TriggerCreate("gt_ActivateDoubleKill_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Create
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resources[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2DF4AE79"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resources[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resources[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resources[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resources[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesCreate_Init () {
    gt_ResourcesCreate = TriggerCreate("gt_ResourcesCreate_Func");
    TriggerAddEventMapInit(gt_ResourcesCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Resources
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resources[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss6RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss6RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 10000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 7500);
    DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResources_Init () {
    gt_ActivateResources = TriggerCreate("gt_ActivateResources_Func");
    TriggerAddEventDialogControl(gt_ActivateResources, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_unlockaherocomingsoon[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/808D3912"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_unlockaherocomingsoon[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_unlockaherocomingsoon[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_unlockaherocomingsoon[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate_Init () {
    gt_UnlockCreate = TriggerCreate("gt_UnlockCreate_Func");
    TriggerAddEventMapInit(gt_UnlockCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_unlockaherocomingsoon[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss6RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[EventPlayer()].lv_unlockaHerotruefalse == false)) {
        gv_boss6RewardBought[EventPlayer()] = true;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 10000);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 7500);
        gv_playerInfo[EventPlayer()].lv_unlockaHerotruefalse = true;
        DialogControlSetVisible(gv__1000KillGroup1[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv__1000KillGroup2[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv__1000KillGroup3[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_unlockaherocomingsoon[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_doubleKill[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_resources[1], PlayerGroupSingle(EventPlayer()), false);
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromFlag(BankLastCreated(), "j", "unlockhero", gv_playerInfo[EventPlayer()].lv_unlockaHerotruefalse);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3F2B411D"));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock_Init () {
    gt_ActivateUnlock = TriggerCreate("gt_ActivateUnlock_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss7Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss7Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9680DAD6_ae = 6;
    int auto9680DAD6_var;
    const int auto16F99C00_ae = 8;
    int auto16F99C00_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((4800.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (4800.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(9, "StalkerBlinkBuildRange1", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F89BFBF2"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kraith", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (83250 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (83250 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (1250 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F1EF2A02"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/C4CECAB8"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/0D2607E6"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto9680DAD6_var = 1;
        for ( ; auto9680DAD6_var <= auto9680DAD6_ae; auto9680DAD6_var += 1 ) {
            if ((PlayerGetPropertyInt(auto9680DAD6_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto9680DAD6_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        auto16F99C00_var = 1;
        for ( ; auto16F99C00_var <= auto16F99C00_ae; auto16F99C00_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(auto16F99C00_var), c_messageAreaChat, StringExternal("Param/Value/CAB03DCB"));
            DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(auto16F99C00_var), true);
            DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(auto16F99C00_var), true);
            DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(auto16F99C00_var), true);
            DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(auto16F99C00_var), true);
            DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(auto16F99C00_var), true);
            DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(auto16F99C00_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/6A40345C"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss7Create_Init () {
    gt_Boss7Create = TriggerCreate("gt_Boss7Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss7Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 2
//--------------------------------------------------------------------------------------------------
bool gt_G1Create2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__500kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DCAF762A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__500kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__500kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__500kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__500kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create2_Init () {
    gt_G1Create2 = TriggerCreate("gt_G1Create2_Func");
    TriggerAddEventMapInit(gt_G1Create2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G4
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__500kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss7RewardsBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss7RewardsBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 500;
    gv_playerInfo[EventPlayer()].lv_supportKills += 500;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 500;
    gv_playerInfo[EventPlayer()].lv_builderKills += 500;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 500;
    gv_playerInfo[EventPlayer()].lv_splashKills += 500;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 500;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG4_Init () {
    gt_ActivateG4 = TriggerCreate("gt_ActivateG4_Func");
    TriggerAddEventDialogControl(gt_ActivateG4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G2 Create  2
//--------------------------------------------------------------------------------------------------
bool gt_G2Create2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__5range[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E78ECD9D"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__5range[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__5range[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__5range[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__5range[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G2Create2_Init () {
    gt_G2Create2 = TriggerCreate("gt_G2Create2_Func");
    TriggerAddEventMapInit(gt_G2Create2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G5
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__5range[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss7RewardsBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss7RewardsBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "SeeingIsBelieving", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG5_Init () {
    gt_ActivateG5 = TriggerCreate("gt_ActivateG5_Func");
    TriggerAddEventDialogControl(gt_ActivateG5, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 2
//--------------------------------------------------------------------------------------------------
bool gt_G3Create2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_heroBuff[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5F42630A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_heroBuff[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_heroBuff[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroBuff[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create2_Init () {
    gt_G3Create2 = TriggerCreate("gt_G3Create2_Func");
    TriggerAddEventMapInit(gt_G3Create2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G6
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_heroBuff[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss7RewardsBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss7RewardsBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "NothingStopsMeNow", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(EventPlayer()), false);
    gv_playerInfo[EventPlayer()].lv_hasNothingStopsNow = true;
    TriggerEnable(gt_ScanForNothingStopsMeNow, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG6_Init () {
    gt_ActivateG6 = TriggerCreate("gt_ActivateG6_Func");
    TriggerAddEventDialogControl(gt_ActivateG6, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 2
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/ADA052D3"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate2_Init () {
    gt_DoubleKillCreate2 = TriggerCreate("gt_DoubleKillCreate2_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss7RewardsBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss7RewardsBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill2_Init () {
    gt_ActivateDoubleKill2 = TriggerCreate("gt_ActivateDoubleKill2_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Create 2
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesCreate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resources2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/55A52A56"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resources2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resources2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resources2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesCreate2_Init () {
    gt_ResourcesCreate2 = TriggerCreate("gt_ResourcesCreate2_Func");
    TriggerAddEventMapInit(gt_ResourcesCreate2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Resources 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResources2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resources2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss7RewardsBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss7RewardsBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 10000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 7500);
    DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResources2_Init () {
    gt_ActivateResources2 = TriggerCreate("gt_ActivateResources2_Func");
    TriggerAddEventDialogControl(gt_ActivateResources2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 2
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_extraProbe[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9F230B0A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_extraProbe[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_extraProbe[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_extraProbe[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate2_Init () {
    gt_UnlockCreate2 = TriggerCreate("gt_UnlockCreate2_Func");
    TriggerAddEventMapInit(gt_UnlockCreate2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_extraProbe[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss7RewardsBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss7RewardsBought[EventPlayer()] = true;
    gv_probeCnt[EventPlayer()] = 0;
    DialogControlSetVisible(gv__500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5range[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_extraProbe[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock2_Init () {
    gt_ActivateUnlock2 = TriggerCreate("gt_ActivateUnlock2_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss8Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss8Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto259C13DA_ae = 6;
    int auto259C13DA_var;
    const int autoE551B9DF_ae = 6;
    int autoE551B9DF_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((5400.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (5400.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/50F31ED7"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganChar", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (1750 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/585526CF"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/985CBCB2"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/771FF270"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto259C13DA_var = 1;
        for ( ; auto259C13DA_var <= auto259C13DA_ae; auto259C13DA_var += 1 ) {
            if ((PlayerGetPropertyInt(auto259C13DA_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto259C13DA_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoE551B9DF_var = 1;
        for ( ; autoE551B9DF_var <= autoE551B9DF_ae; autoE551B9DF_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(autoE551B9DF_var), c_messageAreaChat, StringExternal("Param/Value/49887749"));
            DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(autoE551B9DF_var), true);
            DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(autoE551B9DF_var), true);
            DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(autoE551B9DF_var), true);
            DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(autoE551B9DF_var), true);
            DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(autoE551B9DF_var), true);
            DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(autoE551B9DF_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/DA8FFE74"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss8Create_Init () {
    gt_Boss8Create = TriggerCreate("gt_Boss8Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss8Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 3
//--------------------------------------------------------------------------------------------------
bool gt_G1Create3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__750kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0F3D723F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__750kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__750kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__750kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__750kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create3_Init () {
    gt_G1Create3 = TriggerCreate("gt_G1Create3_Func");
    TriggerAddEventMapInit(gt_G1Create3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G7
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__750kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss8RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss8RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 750;
    gv_playerInfo[EventPlayer()].lv_supportKills += 750;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 750;
    gv_playerInfo[EventPlayer()].lv_builderKills += 750;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 750;
    gv_playerInfo[EventPlayer()].lv_splashKills += 750;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 750;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG7_Init () {
    gt_ActivateG7 = TriggerCreate("gt_ActivateG7_Func");
    TriggerAddEventDialogControl(gt_ActivateG7, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G2 Create  3
//--------------------------------------------------------------------------------------------------
bool gt_G2Create3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__3armor[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/A347D0DC"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__3armor[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__3armor[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__3armor[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G2Create3_Init () {
    gt_G2Create3 = TriggerCreate("gt_G2Create3_Func");
    TriggerAddEventMapInit(gt_G2Create3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G8
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__3armor[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss8RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss8RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "StrongandHopefullyhealthy", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG8_Init () {
    gt_ActivateG8 = TriggerCreate("gt_ActivateG8_Func");
    TriggerAddEventDialogControl(gt_ActivateG8, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 3
//--------------------------------------------------------------------------------------------------
bool gt_G3Create3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_abilityCooldown[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5C980051"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_abilityCooldown[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_abilityCooldown[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_abilityCooldown[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create3_Init () {
    gt_G3Create3 = TriggerCreate("gt_G3Create3_Func");
    TriggerAddEventMapInit(gt_G3Create3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G9
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_abilityCooldown[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss8RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss8RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "ATrueWizard", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG9_Init () {
    gt_ActivateG9 = TriggerCreate("gt_ActivateG9_Func");
    TriggerAddEventDialogControl(gt_ActivateG9, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 3
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill3[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DCD31377"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill3[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill3[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill3[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate3_Init () {
    gt_DoubleKillCreate3 = TriggerCreate("gt_DoubleKillCreate3_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 3
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill3[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss8RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss8RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill3_Init () {
    gt_ActivateDoubleKill3 = TriggerCreate("gt_ActivateDoubleKill3_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Create 3
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesCreate3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resources3[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/A27128F0"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resources3[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resources3[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resources3[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesCreate3_Init () {
    gt_ResourcesCreate3 = TriggerCreate("gt_ResourcesCreate3_Func");
    TriggerAddEventMapInit(gt_ResourcesCreate3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Resources 3
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResources3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resources3[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss8RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss8RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 150000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResources3_Init () {
    gt_ActivateResources3 = TriggerCreate("gt_ActivateResources3_Func");
    TriggerAddEventDialogControl(gt_ActivateResources3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 3
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__5minfreedom[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/3D2462A4"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__5minfreedom[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__5minfreedom[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__5minfreedom[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate3_Init () {
    gt_UnlockCreate3 = TriggerCreate("gt_UnlockCreate3_Func");
    TriggerAddEventMapInit(gt_UnlockCreate3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 3
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__5minfreedom[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss8RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss8RewardBought[EventPlayer()] = true;
    libNtve_gf_MakeUnitInvulnerable(gv_playerInfo[EventPlayer()].lv_hero, true);
    DialogControlSetVisible(gv__750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__3armor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_abilityCooldown[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources3[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__5minfreedom[1], PlayerGroupSingle(EventPlayer()), false);
    Wait(300.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_playerInfo[EventPlayer()].lv_hero, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock3_Init () {
    gt_ActivateUnlock3 = TriggerCreate("gt_ActivateUnlock3_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss9Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss9Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA89C53D8_ae = 6;
    int autoA89C53D8_var;
    const int autoF62B04B4_ae = 6;
    int autoF62B04B4_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((6000.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (6000.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9DA8ADCD"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (2250 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B55AD00D"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F503EEAF"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/846EBFD5"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        autoA89C53D8_var = 1;
        for ( ; autoA89C53D8_var <= autoA89C53D8_ae; autoA89C53D8_var += 1 ) {
            if ((PlayerGetPropertyInt(autoA89C53D8_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(autoA89C53D8_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoF62B04B4_var = 1;
        for ( ; autoF62B04B4_var <= autoF62B04B4_ae; autoF62B04B4_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(autoF62B04B4_var), c_messageAreaChat, StringExternal("Param/Value/3CC0149E"));
            DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(autoF62B04B4_var), true);
            DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(autoF62B04B4_var), true);
            DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(autoF62B04B4_var), true);
            DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(autoF62B04B4_var), true);
            DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(autoF62B04B4_var), true);
            DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(autoF62B04B4_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/06C1B3F9"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss9Create_Init () {
    gt_Boss9Create = TriggerCreate("gt_Boss9Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss9Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 4
//--------------------------------------------------------------------------------------------------
bool gt_G1Create4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1000kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6C84BB33"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1000kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1000kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1000kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create4_Init () {
    gt_G1Create4 = TriggerCreate("gt_G1Create4_Func");
    TriggerAddEventMapInit(gt_G1Create4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G10
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1000kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss9RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss9RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1000;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1000;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1000;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1000;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1000;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1000;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 1000;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG10_Init () {
    gt_ActivateG10 = TriggerCreate("gt_ActivateG10_Func");
    TriggerAddEventDialogControl(gt_ActivateG10, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G2 Create  4
//--------------------------------------------------------------------------------------------------
bool gt_G2Create4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleSpeed[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9D53F003"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleSpeed[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleSpeed[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleSpeed[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G2Create4_Init () {
    gt_G2Create4 = TriggerCreate("gt_G2Create4_Func");
    TriggerAddEventMapInit(gt_G2Create4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G11
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleSpeed[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss9RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss9RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "MovementSpeed100", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG11_Init () {
    gt_ActivateG11 = TriggerCreate("gt_ActivateG11_Func");
    TriggerAddEventDialogControl(gt_ActivateG11, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 4
//--------------------------------------------------------------------------------------------------
bool gt_G3Create4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__20dmgReducer[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C9CABB0D"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__20dmgReducer[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__20dmgReducer[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__20dmgReducer[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create4_Init () {
    gt_G3Create4 = TriggerCreate("gt_G3Create4_Func");
    TriggerAddEventMapInit(gt_G3Create4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G12
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__20dmgReducer[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss9RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss9RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "20DamageReduction", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG12_Init () {
    gt_ActivateG12 = TriggerCreate("gt_ActivateG12_Func");
    TriggerAddEventDialogControl(gt_ActivateG12, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 4
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill4[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5635F6F4"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill4[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill4[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill4[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate4_Init () {
    gt_DoubleKillCreate4 = TriggerCreate("gt_DoubleKillCreate4_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 4
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill4[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss9RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss9RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill4_Init () {
    gt_ActivateDoubleKill4 = TriggerCreate("gt_ActivateDoubleKill4_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Create 4
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesCreate4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resources4[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/685CDD8E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resources4[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resources4[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resources4[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesCreate4_Init () {
    gt_ResourcesCreate4 = TriggerCreate("gt_ResourcesCreate4_Func");
    TriggerAddEventMapInit(gt_ResourcesCreate4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Resources 4
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResources4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resources4[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss9RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss9RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 250000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 25000);
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResources4_Init () {
    gt_ActivateResources4 = TriggerCreate("gt_ActivateResources4_Func");
    TriggerAddEventDialogControl(gt_ActivateResources4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 4
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_xpBoost[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BA34A3F2"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_xpBoost[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_xpBoost[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_xpBoost[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate4_Init () {
    gt_UnlockCreate4 = TriggerCreate("gt_UnlockCreate4_Func");
    TriggerAddEventMapInit(gt_UnlockCreate4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 4
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_xpBoost[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss9RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss9RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "XpRapid", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1000kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleSpeed[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv__20dmgReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources4[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock4_Init () {
    gt_ActivateUnlock4 = TriggerCreate("gt_ActivateUnlock4_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss10Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss10Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF9CA52F6_ae = 6;
    int autoF9CA52F6_var;
    const int auto0EB2762B_ae = 6;
    int auto0EB2762B_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((6600.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (6600.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/88A662D1"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dehaka", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (2500 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/350E1823"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/38DAE4CC"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/E6A629F8"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        autoF9CA52F6_var = 1;
        for ( ; autoF9CA52F6_var <= autoF9CA52F6_ae; autoF9CA52F6_var += 1 ) {
            if ((PlayerGetPropertyInt(autoF9CA52F6_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(autoF9CA52F6_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        auto0EB2762B_var = 1;
        for ( ; auto0EB2762B_var <= auto0EB2762B_ae; auto0EB2762B_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(auto0EB2762B_var), c_messageAreaChat, StringExternal("Param/Value/E3F55004"));
            DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(auto0EB2762B_var), true);
            DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(auto0EB2762B_var), true);
            DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(auto0EB2762B_var), true);
            DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(auto0EB2762B_var), true);
            DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(auto0EB2762B_var), true);
            DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(auto0EB2762B_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/FF4833DE"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss10Create_Init () {
    gt_Boss10Create = TriggerCreate("gt_Boss10Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss10Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 5
//--------------------------------------------------------------------------------------------------
bool gt_G1Create5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1250kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6B47FD57"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1250kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1250kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1250kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create5_Init () {
    gt_G1Create5 = TriggerCreate("gt_G1Create5_Func");
    TriggerAddEventMapInit(gt_G1Create5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G13
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1250kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss10RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss10RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1250;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1250;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1250;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1250;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1250;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1250;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 1250;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG13_Init () {
    gt_ActivateG13 = TriggerCreate("gt_ActivateG13_Func");
    TriggerAddEventDialogControl(gt_ActivateG13, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G2 Create  5
//--------------------------------------------------------------------------------------------------
bool gt_G2Create5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_vitals[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/EFD59C34"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_vitals[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_vitals[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_vitals[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G2Create5_Init () {
    gt_G2Create5 = TriggerCreate("gt_G2Create5_Func");
    TriggerAddEventMapInit(gt_G2Create5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G14
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_vitals[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss10RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss10RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "VitalBoss", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG14_Init () {
    gt_ActivateG14 = TriggerCreate("gt_ActivateG14_Func");
    TriggerAddEventDialogControl(gt_ActivateG14, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 5
//--------------------------------------------------------------------------------------------------
bool gt_G3Create5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hpReducer[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D5A2CAF5"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hpReducer[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hpReducer[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hpReducer[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create5_Init () {
    gt_G3Create5 = TriggerCreate("gt_G3Create5_Func");
    TriggerAddEventMapInit(gt_G3Create5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G15
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hpReducer[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss10RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss10RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "HeroApplyHPBehavior", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG15_Init () {
    gt_ActivateG15 = TriggerCreate("gt_ActivateG15_Func");
    TriggerAddEventDialogControl(gt_ActivateG15, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 5
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill5[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B08EE83C"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill5[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill5[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill5[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate5_Init () {
    gt_DoubleKillCreate5 = TriggerCreate("gt_DoubleKillCreate5_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 5
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill5[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss10RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss10RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill5_Init () {
    gt_ActivateDoubleKill5 = TriggerCreate("gt_ActivateDoubleKill5_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill5, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Create 5
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesCreate5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resources5[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9486DFEF"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resources5[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resources5[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resources5[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesCreate5_Init () {
    gt_ResourcesCreate5 = TriggerCreate("gt_ResourcesCreate5_Func");
    TriggerAddEventMapInit(gt_ResourcesCreate5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Resources 5
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResources5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resources5[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss10RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss10RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 300000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 30000);
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResources5_Init () {
    gt_ActivateResources5 = TriggerCreate("gt_ActivateResources5_Func");
    TriggerAddEventDialogControl(gt_ActivateResources5, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 5
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_xpBoost2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/F67A9648"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_xpBoost2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_xpBoost2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_xpBoost2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate5_Init () {
    gt_UnlockCreate5 = TriggerCreate("gt_UnlockCreate5_Func");
    TriggerAddEventMapInit(gt_UnlockCreate5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 5
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_xpBoost2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss10RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss10RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "XpRapid2", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1250kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vitals[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hpReducer[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources5[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost2[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock5_Init () {
    gt_ActivateUnlock5 = TriggerCreate("gt_ActivateUnlock5_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock5, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss11Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss11Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto574B7FAA_ae = 6;
    int auto574B7FAA_var;
    const int autoD822E38C_ae = 6;
    int autoD822E38C_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((7200.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (7200.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/12B0D41E"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Brakk", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (83333 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (2750 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E363AA3C"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0465BCFB"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/2F1D5967"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto574B7FAA_var = 1;
        for ( ; auto574B7FAA_var <= auto574B7FAA_ae; auto574B7FAA_var += 1 ) {
            if ((PlayerGetPropertyInt(auto574B7FAA_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto574B7FAA_var, c_playerPropCustom, c_playerPropOperAdd, (1 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoD822E38C_var = 1;
        for ( ; autoD822E38C_var <= autoD822E38C_ae; autoD822E38C_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(autoD822E38C_var), c_messageAreaChat, StringExternal("Param/Value/C7B63817"));
            DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(autoD822E38C_var), true);
            DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(autoD822E38C_var), true);
            DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(autoD822E38C_var), true);
            DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(autoD822E38C_var), true);
            DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(autoD822E38C_var), true);
            DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(autoD822E38C_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/8FA7D272"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss11Create_Init () {
    gt_Boss11Create = TriggerCreate("gt_Boss11Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss11Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 6
//--------------------------------------------------------------------------------------------------
bool gt_G1Create6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1500kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6AC1D06C"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1500kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1500kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1500kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create6_Init () {
    gt_G1Create6 = TriggerCreate("gt_G1Create6_Func");
    TriggerAddEventMapInit(gt_G1Create6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G16
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1500kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss11RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss11RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1500;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1500;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1500;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1500;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1500;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1500;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 1500;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG16_Init () {
    gt_ActivateG16 = TriggerCreate("gt_ActivateG16_Func");
    TriggerAddEventDialogControl(gt_ActivateG16, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G2 Create  6
//--------------------------------------------------------------------------------------------------
bool gt_G2Create6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_regeneration[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D5B14DC1"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_regeneration[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_regeneration[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_regeneration[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G2Create6_Init () {
    gt_G2Create6 = TriggerCreate("gt_G2Create6_Func");
    TriggerAddEventMapInit(gt_G2Create6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G17
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG17_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_regeneration[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss11RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss11RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "RegenerationFasterThanEver", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG17_Init () {
    gt_ActivateG17 = TriggerCreate("gt_ActivateG17_Func");
    TriggerAddEventDialogControl(gt_ActivateG17, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 6
//--------------------------------------------------------------------------------------------------
bool gt_G3Create6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_powerBuff[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/CFFFF161"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_powerBuff[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_powerBuff[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_powerBuff[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create6_Init () {
    gt_G3Create6 = TriggerCreate("gt_G3Create6_Func");
    TriggerAddEventMapInit(gt_G3Create6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G18
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_powerBuff[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss11RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss11RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "BrakkPowerHouseBuff", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG18_Init () {
    gt_ActivateG18 = TriggerCreate("gt_ActivateG18_Func");
    TriggerAddEventDialogControl(gt_ActivateG18, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 6
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill6[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/03877D5E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill6[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill6[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill6[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate6_Init () {
    gt_DoubleKillCreate6 = TriggerCreate("gt_DoubleKillCreate6_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 6
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill6[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss11RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss11RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill6_Init () {
    gt_ActivateDoubleKill6 = TriggerCreate("gt_ActivateDoubleKill6_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill6, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Create 6
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesCreate6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resources6[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1E813361"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resources6[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resources6[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resources6[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesCreate6_Init () {
    gt_ResourcesCreate6 = TriggerCreate("gt_ResourcesCreate6_Func");
    TriggerAddEventMapInit(gt_ResourcesCreate6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Resources 6
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResources6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resources6[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss11RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss11RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 400000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 40000);
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResources6_Init () {
    gt_ActivateResources6 = TriggerCreate("gt_ActivateResources6_Func");
    TriggerAddEventDialogControl(gt_ActivateResources6, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 6
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_xpBoost3[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/F1AE572E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_xpBoost3[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_xpBoost3[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_xpBoost3[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate6_Init () {
    gt_UnlockCreate6 = TriggerCreate("gt_UnlockCreate6_Func");
    TriggerAddEventMapInit(gt_UnlockCreate6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 6
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_xpBoost3[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss11RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss11RewardBought[EventPlayer()] = true;
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "XpRapid22", gv_playerInfo[EventPlayer()].lv_hero, 1);
    DialogControlSetVisible(gv__1500kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_regeneration[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_powerBuff[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resources6[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpBoost3[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock6_Init () {
    gt_ActivateUnlock6 = TriggerCreate("gt_ActivateUnlock6_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock6, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss12Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss12Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB301497F_ae = 6;
    int autoB301497F_var;
    const int autoC5B06F60_ae = 6;
    int autoC5B06F60_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((7800.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (7800.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/224B1FC6"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kelthuzadlich", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (82500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (82500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (3000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (41250 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, (41250 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsRegen, (7500 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/7426E2CD"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/80AA9B3B"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        autoB301497F_var = 1;
        for ( ; autoB301497F_var <= autoB301497F_ae; autoB301497F_var += 1 ) {
            if ((PlayerGetPropertyInt(autoB301497F_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(autoB301497F_var, c_playerPropCustom, c_playerPropOperAdd, (2 * FixedToInt(gv_bossSpeed)));
            }

        }
        autoC5B06F60_var = 1;
        for ( ; autoC5B06F60_var <= autoC5B06F60_ae; autoC5B06F60_var += 1 ) {
            UIDisplayMessage(PlayerGroupSingle(autoC5B06F60_var), c_messageAreaChat, StringExternal("Param/Value/BDD68747"));
            DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(autoC5B06F60_var), true);
            DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(autoC5B06F60_var), true);
            DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(autoC5B06F60_var), true);
            DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(autoC5B06F60_var), true);
            DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(autoC5B06F60_var), true);
            DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(autoC5B06F60_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/249A5D6A"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss12Create_Init () {
    gt_Boss12Create = TriggerCreate("gt_Boss12Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss12Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 7
//--------------------------------------------------------------------------------------------------
bool gt_G1Create7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1625kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/62C4A40E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1625kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1625kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1625kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create7_Init () {
    gt_G1Create7 = TriggerCreate("gt_G1Create7_Func");
    TriggerAddEventMapInit(gt_G1Create7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G19
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG19_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1625kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss12RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss12RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1625;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1625;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1625;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1625;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1625;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1625;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 1625;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG19_Init () {
    gt_ActivateG19 = TriggerCreate("gt_ActivateG19_Func");
    TriggerAddEventDialogControl(gt_ActivateG19, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcesM Create 7
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesMCreate7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resourcesM[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/FF88F0B8"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resourcesM[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resourcesM[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resourcesM[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesMCreate7_Init () {
    gt_ResourcesMCreate7 = TriggerCreate("gt_ResourcesMCreate7_Func");
    TriggerAddEventMapInit(gt_ResourcesMCreate7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate ResourcesM 7
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResourcesM7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resourcesM[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss12RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss12RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 1000000);
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResourcesM7_Init () {
    gt_ActivateResourcesM7 = TriggerCreate("gt_ActivateResourcesM7_Func");
    TriggerAddEventDialogControl(gt_ActivateResourcesM7, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 7
//--------------------------------------------------------------------------------------------------
bool gt_G3Create7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_kelthuzad[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D2DAA1A6"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_kelthuzad[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_kelthuzad[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_kelthuzad[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create7_Init () {
    gt_G3Create7 = TriggerCreate("gt_G3Create7_Func");
    TriggerAddEventMapInit(gt_G3Create7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G21
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG21_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_kelthuzad[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss12RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss12RewardBought[EventPlayer()] = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kelthuzadlich", 0, EventPlayer(), UnitGetPosition(gv_playerInfo[EventPlayer()].lv_hero));
    UnitAbilityEnable(UnitLastCreated(), "DarkRitual", false);
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG21_Init () {
    gt_ActivateG21 = TriggerCreate("gt_ActivateG21_Func");
    TriggerAddEventDialogControl(gt_ActivateG21, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 7
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill7[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/FCA46B4E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill7[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill7[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill7[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate7_Init () {
    gt_DoubleKillCreate7 = TriggerCreate("gt_DoubleKillCreate7_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 7
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill7[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss12RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss12RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill7_Init () {
    gt_ActivateDoubleKill7 = TriggerCreate("gt_ActivateDoubleKill7_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill7, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcesV Create 7
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesVCreate7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resourcesV[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/810DAB2E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resourcesV[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resourcesV[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resourcesV[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesVCreate7_Init () {
    gt_ResourcesVCreate7 = TriggerCreate("gt_ResourcesVCreate7_Func");
    TriggerAddEventMapInit(gt_ResourcesVCreate7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate ResourcesV 7
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResourcesV7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resourcesV[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss12RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss12RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 100000);
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResourcesV7_Init () {
    gt_ActivateResourcesV7 = TriggerCreate("gt_ActivateResourcesV7_Func");
    TriggerAddEventDialogControl(gt_ActivateResourcesV7, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 7
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_xpGrant[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C954CB24"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_xpGrant[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_xpGrant[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_xpGrant[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate7_Init () {
    gt_UnlockCreate7 = TriggerCreate("gt_UnlockCreate7_Func");
    TriggerAddEventMapInit(gt_UnlockCreate7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 7
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_xpGrant[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss12RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss12RewardBought[EventPlayer()] = true;
    UnitXPSetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel", (UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") + 5));
    DialogControlSetVisible(gv__1625kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_kelthuzad[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill7[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_xpGrant[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock7_Init () {
    gt_ActivateUnlock7 = TriggerCreate("gt_ActivateUnlock7_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock7, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HydraUnlocked
//--------------------------------------------------------------------------------------------------
bool gt_HydraUnlocked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto98F0D8D9_ae = 6;
    int auto98F0D8D9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto98F0D8D9_var = 1;
    for ( ; auto98F0D8D9_var <= auto98F0D8D9_ae; auto98F0D8D9_var += 1 ) {
        gv_playerInfo[auto98F0D8D9_var].lv_hydraliskYours = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, libNtve_gf_ConvertBooleanToText(gv_playerInfo[auto98F0D8D9_var].lv_hydraliskYours));
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraUnlocked_Init () {
    gt_HydraUnlocked = TriggerCreate("gt_HydraUnlocked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HydraUnlockedCHECK
//--------------------------------------------------------------------------------------------------
bool gt_HydraUnlockedCHECK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto617E6882_ae = 6;
    int auto617E6882_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto617E6882_var = 1;
    for ( ; auto617E6882_var <= auto617E6882_ae; auto617E6882_var += 1 ) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, libNtve_gf_ConvertBooleanToText(gv_playerInfo[auto617E6882_var].lv_hydraliskYours));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraUnlockedCHECK_Init () {
    gt_HydraUnlockedCHECK = TriggerCreate("gt_HydraUnlockedCHECK_Func");
    TriggerAddEventChatMessage(gt_HydraUnlockedCHECK, c_playerAny, "-HydraCheck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss13Create
//--------------------------------------------------------------------------------------------------
bool gt_Boss13Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto568837BF_ae = 6;
    int auto568837BF_var;
    const int auto36E43697_ae = 6;
    int auto36E43697_var;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() < ((8400.0 / gv_bossSpeed) + 20.0)))) {
            return false;
        }

        if (!((GameGetMissionTime() >= (8400.0 / gv_bossSpeed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/10A90C63"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dreadlord", 0, 10, PointFromId(61408733));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (82500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (82500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, (5000 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (82500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, (82500 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsRegen, (10000 * PlayerGroupCount(gf_HumanPlayers())));
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(100.00, 0.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 0.00, 100.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    MinimapPing(PlayerGroupAll(), PointFromId(61408733), 300.0, Color(64.71, 5.49, 72.94));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/FB55ADD3"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E93D545E"));
    TimerStart(TimerCreate(), 240.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/939F53F3"), true, false);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        auto568837BF_var = 1;
        for ( ; auto568837BF_var <= auto568837BF_ae; auto568837BF_var += 1 ) {
            if ((PlayerGetPropertyInt(auto568837BF_var, c_playerPropCustom) < 45000)) {
                PlayerModifyPropertyInt(auto568837BF_var, c_playerPropCustom, c_playerPropOperAdd, (2 * FixedToInt(gv_bossSpeed)));
            }

        }
        auto36E43697_var = 1;
        for ( ; auto36E43697_var <= auto36E43697_ae; auto36E43697_var += 1 ) {
            TriggerExecute(gt_HydraUnlocked, false, false);
            UIDisplayMessage(PlayerGroupSingle(auto36E43697_var), c_messageAreaChat, StringExternal("Param/Value/68457FE7"));
            DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(auto36E43697_var), true);
            DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(auto36E43697_var), true);
            DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(auto36E43697_var), true);
            DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(auto36E43697_var), true);
            DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(auto36E43697_var), true);
            DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(auto36E43697_var), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/AAF527D5"));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1047540244)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1047540244)) <= 1))) {
            Wait(1.0, c_timeGame);
        }
        UnitKill(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss13Create_Init () {
    gt_Boss13Create = TriggerCreate("gt_Boss13Create_Func");
    TriggerAddEventTimePeriodic(gt_Boss13Create, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G1 Create 8
//--------------------------------------------------------------------------------------------------
bool gt_G1Create8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv__1750kill[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/96EF36E9"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv__1750kill[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv__1750kill[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv__1750kill[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__1750kill[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G1Create8_Init () {
    gt_G1Create8 = TriggerCreate("gt_G1Create8_Func");
    TriggerAddEventMapInit(gt_G1Create8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G20
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv__1750kill[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss13RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss13RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_tankKills += 1750;
    gv_playerInfo[EventPlayer()].lv_supportKills += 1750;
    gv_playerInfo[EventPlayer()].lv_specialistKills += 1750;
    gv_playerInfo[EventPlayer()].lv_builderKills += 1750;
    gv_playerInfo[EventPlayer()].lv_asassinKills += 1750;
    gv_playerInfo[EventPlayer()].lv_splashKills += 1750;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills += 1750;
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG20_Init () {
    gt_ActivateG20 = TriggerCreate("gt_ActivateG20_Func");
    TriggerAddEventDialogControl(gt_ActivateG20, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcesM Create 8
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesMCreate8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resourcesM2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/16883753"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resourcesM2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resourcesM2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resourcesM2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesMCreate8_Init () {
    gt_ResourcesMCreate8 = TriggerCreate("gt_ResourcesMCreate8_Func");
    TriggerAddEventMapInit(gt_ResourcesMCreate8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate ResourcesM 8
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResourcesM8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resourcesM2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss13RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss13RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 1000000);
    DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResourcesM8_Init () {
    gt_ActivateResourcesM8 = TriggerCreate("gt_ActivateResourcesM8_Func");
    TriggerAddEventDialogControl(gt_ActivateResourcesM8, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: G3 Create 8
//--------------------------------------------------------------------------------------------------
bool gt_G3Create8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_uNKNOWN[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/941777FD"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, -175);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_uNKNOWN[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_uNKNOWN[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_uNKNOWN[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_G3Create8_Init () {
    gt_G3Create8 = TriggerCreate("gt_G3Create8_Func");
    TriggerAddEventMapInit(gt_G3Create8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate G22
//--------------------------------------------------------------------------------------------------
bool gt_ActivateG22_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_uNKNOWN[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss13RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss13RewardBought[EventPlayer()] = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kelthuzadlich", 0, EventPlayer(), UnitGetPosition(gv_playerInfo[EventPlayer()].lv_hero));
    UnitAbilityEnable(UnitLastCreated(), "DarkRitual", false);
    DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateG22_Init () {
    gt_ActivateG22 = TriggerCreate("gt_ActivateG22_Func");
    TriggerAddEventDialogControl(gt_ActivateG22, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Kill Create 8
//--------------------------------------------------------------------------------------------------
bool gt_DoubleKillCreate8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_doubleKill8[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E8810A08"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_doubleKill8[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_doubleKill8[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_doubleKill8[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleKillCreate8_Init () {
    gt_DoubleKillCreate8 = TriggerCreate("gt_DoubleKillCreate8_Func");
    TriggerAddEventMapInit(gt_DoubleKillCreate8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Double Kill 8
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDoubleKill8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_doubleKill8[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss13RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss13RewardBought[EventPlayer()] = true;
    gv_playerInfo[EventPlayer()].lv_killValue += 1;
    DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDoubleKill8_Init () {
    gt_ActivateDoubleKill8 = TriggerCreate("gt_ActivateDoubleKill8_Func");
    TriggerAddEventDialogControl(gt_ActivateDoubleKill8, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcesV Create 8
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesVCreate8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_resourcesV2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/A31B9E3E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_resourcesV2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_resourcesV2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_resourcesV2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesVCreate8_Init () {
    gt_ResourcesVCreate8 = TriggerCreate("gt_ResourcesVCreate8_Func");
    TriggerAddEventMapInit(gt_ResourcesVCreate8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate ResourcesV 8
//--------------------------------------------------------------------------------------------------
bool gt_ActivateResourcesV8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_resourcesV2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss13RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss13RewardBought[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 100000);
    DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateResourcesV8_Init () {
    gt_ActivateResourcesV8 = TriggerCreate("gt_ActivateResourcesV8_Func");
    TriggerAddEventDialogControl(gt_ActivateResourcesV8, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Create 8
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCreate8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_tps2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7E1CDC67"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tps2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tps2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tps2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCreate8_Init () {
    gt_UnlockCreate8 = TriggerCreate("gt_UnlockCreate8_Func");
    TriggerAddEventMapInit(gt_UnlockCreate8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Unlock 8
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUnlock8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tps2[1] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_boss13RewardBought[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boss13RewardBought[EventPlayer()] = true;
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) < 45000)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 30);
    }

    DialogControlSetVisible(gv__1750kill[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesM2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uNKNOWN[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_doubleKill8[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_resourcesV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tps2[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUnlock8_Init () {
    gt_ActivateUnlock8 = TriggerCreate("gt_ActivateUnlock8_Func");
    TriggerAddEventDialogControl(gt_ActivateUnlock8, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -DreadLord
//--------------------------------------------------------------------------------------------------
bool gt_DreadLord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Dreadlord", 0, 1, PointFromId(2061199121));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DreadLord_Init () {
    gt_DreadLord = TriggerCreate("gt_DreadLord_Func");
    TriggerAddEventChatMessage(gt_DreadLord, c_playerAny, "-DreadLord", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intoduction
//--------------------------------------------------------------------------------------------------
bool gt_Intoduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerType(1) == c_playerTypeUser) || (PlayerType(1) == c_playerTypeComputer))) {
        lv_playerCount += 1;
        gv_challengeModePos += 1;
    }

    if (((PlayerType(2) == c_playerTypeUser) || (PlayerType(2) == c_playerTypeComputer))) {
        lv_playerCount += 1;
        gv_challengeModePos += 1;
    }

    if (((PlayerType(3) == c_playerTypeUser) || (PlayerType(3) == c_playerTypeComputer))) {
        lv_playerCount += 1;
    }

    if (((PlayerType(4) == c_playerTypeUser) || (PlayerType(4) == c_playerTypeComputer))) {
        lv_playerCount += 1;
    }

    if (((PlayerType(5) == c_playerTypeUser) || (PlayerType(5) == c_playerTypeComputer))) {
        lv_playerCount += 1;
    }

    if (((PlayerType(6) == c_playerTypeUser) || (PlayerType(6) == c_playerTypeComputer))) {
        lv_playerCount += 1;
    }

    gv_tKSZombieAmount = lv_playerCount;
    gv_tKSZombieAmountIncrease = lv_playerCount;
    gv_challengeModePos = lv_playerCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Intoduction_Init () {
    gt_Intoduction = TriggerCreate("gt_Intoduction_Func");
    TriggerAddEventTimeElapsed(gt_Intoduction, 12.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TruckDies
//--------------------------------------------------------------------------------------------------
bool gt_TruckDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_objective, c_objectiveStateFailed);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/05952111"));
    PingDestroyAll();
    TriggerEnable(gt_ReApplyPingPosition, false);
    TriggerEnable(gt_SpawnMiniZombie, false);
    TriggerStop(gt_CreateCargoTruck);
    Wait(10.0, c_timeGame);
    ObjectiveDestroy(gv_objective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TruckDies_Init () {
    gt_TruckDies = TriggerCreate("gt_TruckDies_Func");
    TriggerEnable(gt_TruckDies, false);
    TriggerAddEventUnitDied(gt_TruckDies, UnitRefFromVariable("gv_cargoTruck1"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnMiniZombie
//--------------------------------------------------------------------------------------------------
bool gt_SpawnMiniZombie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto64178877_g;
    int auto64178877_u;
    unit auto64178877_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmount / 3), "InfestedCivilian", 0, 10, PointFromId(61408733));
    Wait(0.1, c_timeGame);
    auto64178877_g = gv_zombies;
    auto64178877_u = UnitGroupCount(auto64178877_g, c_unitCountAll);
    for (;; auto64178877_u -= 1) {
        auto64178877_var = UnitGroupUnitFromEnd(auto64178877_g, auto64178877_u);
        if (auto64178877_var == null) { break; }
        if ((UnitGetType(EventUnit()) != "Brutalisk") && (UnitGetType(EventUnit()) != "Roach2") && (UnitGetType(EventUnit()) != "PrimalHydralisk") && ((libNtve_gf_UnitInRegion(auto64178877_var, RegionFromId(38)) == true))) {
            UnitSetPropertyFixed(auto64178877_var, c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(auto64178877_var, c_unitPropLife, gv_zombielife);
            UnitIssueOrder(auto64178877_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(939603611)), c_orderQueueReplace);
        }

    }
    BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
    BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnMiniZombie_Init () {
    gt_SpawnMiniZombie = TriggerCreate("gt_SpawnMiniZombie_Func");
    TriggerEnable(gt_SpawnMiniZombie, false);
    TriggerAddEventTimePeriodic(gt_SpawnMiniZombie, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeleportTruckIntoMapTop
//--------------------------------------------------------------------------------------------------
bool gt_TeleportTruckIntoMapTop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(204056418), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1313584221)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleportTruckIntoMapTop_Init () {
    gt_TeleportTruckIntoMapTop = TriggerCreate("gt_TeleportTruckIntoMapTop_Func");
    TriggerEnable(gt_TeleportTruckIntoMapTop, false);
    TriggerAddEventUnitRegion(gt_TeleportTruckIntoMapTop, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeleportTruckOutOfMapBottom
//--------------------------------------------------------------------------------------------------
bool gt_TeleportTruckOutOfMapBottom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9365BB7A_ae = 6;
    int auto9365BB7A_var;
    const int auto6C71DDA7_ae = 8;
    int auto6C71DDA7_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(1585119181), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(506927140)), c_orderQueueReplace);
    ObjectiveSetState(gv_objective, c_objectiveStateCompleted);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/08BD7D39"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B0B39E8F"));
    PingDestroyAll();
    auto9365BB7A_var = 1;
    for ( ; auto9365BB7A_var <= auto9365BB7A_ae; auto9365BB7A_var += 1 ) {
        if ((PlayerGetPropertyInt(auto9365BB7A_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto9365BB7A_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    auto6C71DDA7_var = 1;
    for ( ; auto6C71DDA7_var <= auto6C71DDA7_ae; auto6C71DDA7_var += 1 ) {
        PlayerModifyPropertyInt(auto6C71DDA7_var, c_playerPropMinerals, c_playerPropOperAdd, 250);
        PlayerModifyPropertyInt(auto6C71DDA7_var, c_playerPropVespene, c_playerPropOperAdd, 200);
        gv_playerInfo[auto6C71DDA7_var].lv_specialistKills += 100;
        gv_playerInfo[auto6C71DDA7_var].lv_singleTargetKills += 100;
        gv_playerInfo[auto6C71DDA7_var].lv_asassinKills += 100;
        gv_playerInfo[auto6C71DDA7_var].lv_builderKills += 100;
        gv_playerInfo[auto6C71DDA7_var].lv_tankKills += 100;
        gv_playerInfo[auto6C71DDA7_var].lv_splashKills += 100;
        gv_playerInfo[auto6C71DDA7_var].lv_supportKills += 100;
        BoardItemSetText(gv_leaderboard, 3, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_tankKills));
        BoardItemSetText(gv_leaderboard, 4, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_supportKills));
        BoardItemSetText(gv_leaderboard, 5, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_specialistKills));
        BoardItemSetText(gv_leaderboard, 6, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_splashKills));
        BoardItemSetText(gv_leaderboard, 7, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_asassinKills));
        BoardItemSetText(gv_leaderboard, 8, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_singleTargetKills));
        BoardItemSetText(gv_leaderboard, 9, auto6C71DDA7_var, IntToText(gv_playerInfo[auto6C71DDA7_var].lv_builderKills));
    }
    TriggerEnable(gt_TeleportTruckIntoMapTop, false);
    TriggerEnable(gt_TeleportTruckOutOfMapBottom, false);
    TriggerEnable(gt_ReApplyPingPosition, false);
    TriggerEnable(gt_TruckDies, false);
    TriggerEnable(gt_SpawnMiniZombie, false);
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/39D7788D"));
    ObjectiveDestroy(gv_objective);
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleportTruckOutOfMapBottom_Init () {
    gt_TeleportTruckOutOfMapBottom = TriggerCreate("gt_TeleportTruckOutOfMapBottom_Func");
    TriggerEnable(gt_TeleportTruckOutOfMapBottom, false);
    TriggerAddEventUnitRegion(gt_TeleportTruckOutOfMapBottom, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Re-ApplyPingPosition
//--------------------------------------------------------------------------------------------------
bool gt_ReApplyPingPosition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroyAll();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_cargoTruck1), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReApplyPingPosition_Init () {
    gt_ReApplyPingPosition = TriggerCreate("gt_ReApplyPingPosition_Func");
    TriggerEnable(gt_ReApplyPingPosition, false);
    TriggerAddEventTimePeriodic(gt_ReApplyPingPosition, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Objective
//--------------------------------------------------------------------------------------------------
bool gt_CreateObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/6447FDE2"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/79D190CD"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/34B02F70"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9BD30C73"));
    Wait(5.0, c_timeGame);
    ObjectiveCreateForPlayers(StringExternal("Param/Value/7FAF6AAD"), StringToText(""), c_objectiveStateActive, true, PlayerGroupAll());
    gv_objective = ObjectiveLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/2CC63DFE"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CargoTruckUnitBarrels", 0, 12, PointFromId(169763302));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1313584221), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0EEC7D8E"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1047540244), ColorWithAlpha(0.00, 75.69, 0.00, 0.00), 1000.0, 270.0);
    gv_cargoTruck1 = UnitLastCreated();
    gv_ping = PingLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1313584221)), c_orderQueueReplace);
    TriggerEnable(gt_TeleportTruckIntoMapTop, true);
    TriggerEnable(gt_TeleportTruckOutOfMapBottom, true);
    TriggerEnable(gt_TruckDies, true);
    TriggerEnable(gt_ReApplyPingPosition, true);
    TriggerEnable(gt_SpawnMiniZombie, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateObjective_Init () {
    gt_CreateObjective = TriggerCreate("gt_CreateObjective_Func");
    TriggerAddEventTimeElapsed(gt_CreateObjective, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate1
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/6BD5548C") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/BA7F4114"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/26F437A7"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate1_Init () {
    gt_CollectsCrate1 = TriggerCreate("gt_CollectsCrate1_Func");
    TriggerEnable(gt_CollectsCrate1, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate1, null, PointFromId(604848737), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate2
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/673ED3DF") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/A510E438"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/24D5D009"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate2_Init () {
    gt_CollectsCrate2 = TriggerCreate("gt_CollectsCrate2_Func");
    TriggerEnable(gt_CollectsCrate2, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate2, null, PointFromId(2118903537), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate3
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/DFF2BAA8") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/EA683E37"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/179D090A"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate3_Init () {
    gt_CollectsCrate3 = TriggerCreate("gt_CollectsCrate3_Func");
    TriggerEnable(gt_CollectsCrate3, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate3, null, PointFromId(525684280), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate4
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/2CE82A2D") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/988DCC22"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/2682D57F"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate4_Init () {
    gt_CollectsCrate4 = TriggerCreate("gt_CollectsCrate4_Func");
    TriggerEnable(gt_CollectsCrate4, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate4, null, PointFromId(1610360736), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate5
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/210E0A4E") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/D5DD4B92"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/C00E3C93"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate5_Init () {
    gt_CollectsCrate5 = TriggerCreate("gt_CollectsCrate5_Func");
    TriggerEnable(gt_CollectsCrate5, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate5, null, PointFromId(93859105), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate6
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/1AC2B12B") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/FCB5BC0E"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/F2600136"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate6_Init () {
    gt_CollectsCrate6 = TriggerCreate("gt_CollectsCrate6_Func");
    TriggerEnable(gt_CollectsCrate6, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate6, null, PointFromId(2028710964), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate7
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/8F813584") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/0FB51B5B"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/5064536B"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate7_Init () {
    gt_CollectsCrate7 = TriggerCreate("gt_CollectsCrate7_Func");
    TriggerEnable(gt_CollectsCrate7, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate7, null, PointFromId(2054708637), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectsCrate8
//--------------------------------------------------------------------------------------------------
bool gt_CollectsCrate8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(604848737)) < 1.5)) {
        gv_heroCarrier[1] = EventUnit();
        PingDestroy(gv_lavaPing[1]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2118903537)) < 1.5)) {
        gv_heroCarrier[2] = EventUnit();
        PingDestroy(gv_lavaPing[2]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(525684280)) < 1.5)) {
        gv_heroCarrier[3] = EventUnit();
        PingDestroy(gv_lavaPing[3]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1610360736)) < 1.5)) {
        gv_heroCarrier[4] = EventUnit();
        PingDestroy(gv_lavaPing[4]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(93859105)) < 1.5)) {
        gv_heroCarrier[5] = EventUnit();
        PingDestroy(gv_lavaPing[5]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2028710964)) < 1.5)) {
        gv_heroCarrier[6] = EventUnit();
        PingDestroy(gv_lavaPing[6]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(2054708637)) < 1.5)) {
        gv_heroCarrier[7] = EventUnit();
        PingDestroy(gv_lavaPing[7]);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(1709256579)) < 1.5)) {
        gv_heroCarrier[8] = EventUnit();
        PingDestroy(gv_lavaPing[8]);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/5B02CA2D") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/2068C7D2"))));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective, StringExternal("Param/Value/E55D66BC"));
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectsCrate8_Init () {
    gt_CollectsCrate8 = TriggerCreate("gt_CollectsCrate8_Func");
    TriggerEnable(gt_CollectsCrate8, false);
    TriggerAddEventUnitRangePoint(gt_CollectsCrate8, null, PointFromId(1709256579), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReturnCrate
//--------------------------------------------------------------------------------------------------
bool gt_ReturnCrate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8DE9FBB3_ae = 8;
    int auto8DE9FBB3_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8DE9FBB3_var = 1;
    for ( ; auto8DE9FBB3_var <= auto8DE9FBB3_ae; auto8DE9FBB3_var += 1 ) {
        if (((gv_heroCarrier[auto8DE9FBB3_var] == EventUnit()))) {
            PlayerModifyPropertyInt(auto8DE9FBB3_var, c_playerPropMinerals, c_playerPropOperAdd, 500);
            PlayerModifyPropertyInt(auto8DE9FBB3_var, c_playerPropVespene, c_playerPropOperAdd, 250);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/F5570F26") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/57857F80"))));
            gv_heroCarrier[auto8DE9FBB3_var] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnCrate_Init () {
    gt_ReturnCrate = TriggerCreate("gt_ReturnCrate_Func");
    TriggerEnable(gt_ReturnCrate, false);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(876655520), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(752754009), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(1049705403), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(1277436948), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(217549969), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(1489624987), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(68436286), 3.0, true);
    TriggerAddEventUnitRangePoint(gt_ReturnCrate, null, PointFromId(1777799114), 3.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LavaPain
//--------------------------------------------------------------------------------------------------
bool gt_LavaPain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto67AC76DA_ae = 8;
    int auto67AC76DA_var;
    unitgroup auto28DB9BFE_g;
    int auto28DB9BFE_u;
    unit auto28DB9BFE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto67AC76DA_var = 1;
    for ( ; auto67AC76DA_var <= auto67AC76DA_ae; auto67AC76DA_var += 1 ) {
        auto28DB9BFE_g = UnitGroup(null, auto67AC76DA_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto28DB9BFE_u = UnitGroupCount(auto28DB9BFE_g, c_unitCountAll);
        for (;; auto28DB9BFE_u -= 1) {
            auto28DB9BFE_var = UnitGroupUnitFromEnd(auto28DB9BFE_g, auto28DB9BFE_u);
            if (auto28DB9BFE_var == null) { break; }
            if ((WorldHeight(c_heightMapGround, UnitGetPosition(auto28DB9BFE_var)) < 8.5)) {
                UnitDamage(auto28DB9BFE_var, "Lava", auto28DB9BFE_var, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaPain_Init () {
    gt_LavaPain = TriggerCreate("gt_LavaPain_Func");
    TriggerEnable(gt_LavaPain, false);
    TriggerAddEventTimePeriodic(gt_LavaPain, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FactoryDies
//--------------------------------------------------------------------------------------------------
bool gt_FactoryDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoEB52B039_ae = 8;
    int autoEB52B039_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_factory[1]) == false) && (UnitIsAlive(gv_factory[2]) == false) && (UnitIsAlive(gv_factory[3]) == false) && (UnitIsAlive(gv_factory[4]) == false) && (UnitIsAlive(gv_factory[5]) == false) && (UnitIsAlive(gv_factory[6]) == false) && (UnitIsAlive(gv_factory[7]) == false) && (UnitIsAlive(gv_factory[8]) == false)) {
        ObjectiveSetState(gv_objective2, c_objectiveStateFailed);
        autoEB52B039_var = 1;
        for ( ; autoEB52B039_var <= autoEB52B039_ae; autoEB52B039_var += 1 ) {
            GameOver(autoEB52B039_var, c_gameOverDefeat, true, true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/BDC85D27"));
        Wait(3.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FactoryDies_Init () {
    gt_FactoryDies = TriggerCreate("gt_FactoryDies_Func");
    TriggerEnable(gt_FactoryDies, false);
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[1]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[2]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[3]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[4]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[5]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[6]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[7]"));
    TriggerAddEventUnitDied(gt_FactoryDies, UnitRefFromVariable("gv_factory[8]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageCap
//--------------------------------------------------------------------------------------------------
bool gt_DamageCap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAttempted() > 500000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/09985EE8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageCap_Init () {
    gt_DamageCap = TriggerCreate("gt_DamageCap_Func");
    TriggerAddEventUnitDamaged(gt_DamageCap, null, c_unitDamageTypeAny, c_unitDamageEither, "YamatoGunSpecialDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: -bronzesds
//--------------------------------------------------------------------------------------------------
bool gt_bronzesds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bronzesds_Init () {
    gt_bronzesds = TriggerCreate("gt_bronzesds_Func");
    TriggerAddEventChatMessage(gt_bronzesds, c_playerAny, "-upgrademe", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEVELOPERHACKTOOL
//--------------------------------------------------------------------------------------------------
bool gt_DEVELOPERHACKTOOL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "ATrueWizard", gv_playerInfo[EventPlayer()].lv_hero, 1);
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "NothingStopsMeNow", gv_playerInfo[EventPlayer()].lv_hero, 1);
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "StrongandHopefullyhealthy", gv_playerInfo[EventPlayer()].lv_hero, 1);
    UnitBehaviorAdd(gv_playerInfo[EventPlayer()].lv_hero, "SeeingIsBelieving", gv_playerInfo[EventPlayer()].lv_hero, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEVELOPERHACKTOOL_Init () {
    gt_DEVELOPERHACKTOOL = TriggerCreate("gt_DEVELOPERHACKTOOL_Func");
    TriggerAddEventKeyPressed(gt_DEVELOPERHACKTOOL, c_playerAny, c_keyH, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-Burrow
//--------------------------------------------------------------------------------------------------
bool gt_AutoBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LabTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("LabTurretUnburrow", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoBurrow_Init () {
    gt_AutoBurrow = TriggerCreate("gt_AutoBurrow_Func");
    TriggerAddEventUnitRegion(gt_AutoBurrow, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IncreaseReturnAmount
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseReturnAmount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Immortal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Empower", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseReturnAmount_Init () {
    gt_IncreaseReturnAmount = TriggerCreate("gt_IncreaseReturnAmount_Func");
    TriggerAddEventUnitDamaged(gt_IncreaseReturnAmount, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InvulnerableLife
//--------------------------------------------------------------------------------------------------
bool gt_InvulnerableLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DarkTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "BlinkInvulnerabilityDT", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvulnerableLife_Init () {
    gt_InvulnerableLife = TriggerCreate("gt_InvulnerableLife_Func");
    TriggerAddEventUnitAbility(gt_InvulnerableLife, null, AbilityCommand("Blink", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_InvulnerableLife, null, AbilityCommand("DarkTemplarShadowFury", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShadowFuryUpgradeFixerDisable
//--------------------------------------------------------------------------------------------------
bool gt_ShadowFuryUpgradeFixerDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTattackspeed10", false);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTCDresetchance10", false);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTdamage50", false);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTMoveSpeed10", false);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTSFdamage50", false);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTSFsplash1", false);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "StalkerBlinkBuildRange1", false);
    Wait(2.6, c_timeGame);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTattackspeed10", true);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "StalkerBlinkBuildRange1", true);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTCDresetchance10", true);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTdamage50", true);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTMoveSpeed10", true);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTSFdamage50", true);
    TechTreeUpgradeAllow(UnitGetOwner(EventUnit()), "DTSFsplash1", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowFuryUpgradeFixerDisable_Init () {
    gt_ShadowFuryUpgradeFixerDisable = TriggerCreate("gt_ShadowFuryUpgradeFixerDisable_Func");
    TriggerAddEventUnitAbility(gt_ShadowFuryUpgradeFixerDisable, null, AbilityCommand("DarkTemplarShadowFury", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: YamatoDamageMultiplier
//--------------------------------------------------------------------------------------------------
bool gt_YamatoDamageMultiplier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageTaken;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 9) || (UnitGetOwner(EventUnit()) == 10)))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "Battlecruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageTaken = EventUnitDamageAbsorbed();
    lv_damageTaken /= 20.0;
    if ((lv_damageTaken > 50.0)) {
        lv_damageTaken = 50.0;
    }

    UnitBehaviorAdd(EventUnitDamageSourceUnit(), "YamatoCharge", EventUnitDamageSourceUnit(), FixedToInt(lv_damageTaken));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoDamageMultiplier_Init () {
    gt_YamatoDamageMultiplier = TriggerCreate("gt_YamatoDamageMultiplier_Func");
    TriggerAddEventUnitDamaged(gt_YamatoDamageMultiplier, null, c_unitDamageTypeAny, c_unitDamageEither, "YamatoGunSpecialDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowPlasmaStacks
//--------------------------------------------------------------------------------------------------
bool gt_ShowPlasmaStacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_visuals[2], PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
    DialogControlSetVisible(gv_visuals[3], PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
    libNtve_gf_SetDialogItemText(gv_visuals[3], StringExternal("Param/Value/DB75F2DD"), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPlasmaStacks_Init () {
    gt_ShowPlasmaStacks = TriggerCreate("gt_ShowPlasmaStacks_Func");
    TriggerAddEventUnitBehaviorChange(gt_ShowPlasmaStacks, null, "YamatoCharge", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IncreasePlasmaStacks
//--------------------------------------------------------------------------------------------------
bool gt_IncreasePlasmaStacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_visuals[3], IntToText(UnitBehaviorCount(EventUnit(), "YamatoCharge")), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreasePlasmaStacks_Init () {
    gt_IncreasePlasmaStacks = TriggerCreate("gt_IncreasePlasmaStacks_Func");
    TriggerAddEventUnitBehaviorChange(gt_IncreasePlasmaStacks, null, "YamatoCharge", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecreasePlasmaStacks
//--------------------------------------------------------------------------------------------------
bool gt_DecreasePlasmaStacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_visuals[2], PlayerGroupSingle(UnitGetOwner(EventUnit())), false);
    DialogControlSetVisible(gv_visuals[3], PlayerGroupSingle(UnitGetOwner(EventUnit())), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreasePlasmaStacks_Init () {
    gt_DecreasePlasmaStacks = TriggerCreate("gt_DecreasePlasmaStacks_Func");
    TriggerAddEventUnitBehaviorChange(gt_DecreasePlasmaStacks, null, "YamatoCharge", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateInitially
//--------------------------------------------------------------------------------------------------
bool gt_CreateInitially_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_visuals[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -275, 265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_visuals[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 45, 45);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_visuals[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorCenter, -260, 295, StringExternal("Param/Value/B4920F61"), ColorWithAlpha(0,0,0,0), true, 0.2);
    gv_visuals[3] = DialogControlLastCreated();
    DialogControlSetVisible(gv_visuals[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_visuals[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_visuals[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateInitially_Init () {
    gt_CreateInitially = TriggerCreate("gt_CreateInitially_Func");
    TriggerAddEventMapInit(gt_CreateInitially);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MaxOf15
//--------------------------------------------------------------------------------------------------
bool gt_MaxOf15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scoutBaby;
    unitgroup lv_scoutBabyGroup;

    // Automatic Variable Declarations
    unitgroup auto3ADC781B_g;
    int auto3ADC781B_u;
    unit auto3ADC781B_var;

    // Variable Initialization
    lv_scoutBaby = "ScoutBaby";
    lv_scoutBabyGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3ADC781B_g = UnitGroup(lv_scoutBaby, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3ADC781B_u = UnitGroupCount(auto3ADC781B_g, c_unitCountAll);
    for (;; auto3ADC781B_u -= 1) {
        auto3ADC781B_var = UnitGroupUnitFromEnd(auto3ADC781B_g, auto3ADC781B_u);
        if (auto3ADC781B_var == null) { break; }
        UnitGroupAdd(lv_scoutBabyGroup, auto3ADC781B_var);
        if ((UnitGroupCount(lv_scoutBabyGroup, c_unitCountAlive) > 15)) {
            Wait(5.0, c_timeGame);
            UnitKill(UnitGroupRandomUnit(lv_scoutBabyGroup, c_unitCountAlive));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxOf15_Init () {
    gt_MaxOf15 = TriggerCreate("gt_MaxOf15_Func");
    TriggerAddEventTimePeriodic(gt_MaxOf15, 17.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DontMoveBabies!!
//--------------------------------------------------------------------------------------------------
bool gt_DontMoveBabies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Scout"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponRemove(EventUnitCreatedUnit(), "ScoutGround");
    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingUnit(AbilityCommand("move", 0), EventUnit()), c_orderQueueReplace);
    UnitGroupAdd(gv_scoutBabies, EventUnitCreatedUnit());
    Wait(0.2, c_timeGame);
    UnitWeaponAdd(EventUnitCreatedUnit(), "ScoutGround", null);
    libNtve_gf_MakeUnitUncommandable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DontMoveBabies_Init () {
    gt_DontMoveBabies = TriggerCreate("gt_DontMoveBabies_Func");
    TriggerAddEventUnitCreated(gt_DontMoveBabies, null, "ScoutBabyMaker", null);
    TriggerAddEventUnitCreated(gt_DontMoveBabies, null, "ScoutBabyMaker2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeepFollowingScout
//--------------------------------------------------------------------------------------------------
bool gt_KeepFollowingScout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto103824BC_g;
    int auto103824BC_u;
    unit auto103824BC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto103824BC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto103824BC_u = UnitGroupCount(auto103824BC_g, c_unitCountAll);
    for (;; auto103824BC_u -= 1) {
        auto103824BC_var = UnitGroupUnitFromEnd(auto103824BC_g, auto103824BC_u);
        if (auto103824BC_var == null) { break; }
        if ((UnitGetType(auto103824BC_var) == "ScoutBaby")) {
            libNtve_gf_MakeUnitUncommandable(EventUnitCreatedUnit(), false);
            UnitWeaponRemove(EventUnitCreatedUnit(), "ScoutGround");
            UnitIssueOrder(auto103824BC_var, OrderTargetingUnit(AbilityCommand("move", 0), UnitGetOriginalCaster(auto103824BC_var)), c_orderQueueReplace);
            Wait(0.2, c_timeGame);
            UnitWeaponAdd(EventUnitCreatedUnit(), "ScoutGround", null);
            libNtve_gf_MakeUnitUncommandable(EventUnitCreatedUnit(), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeepFollowingScout_Init () {
    gt_KeepFollowingScout = TriggerCreate("gt_KeepFollowingScout_Func");
    TriggerAddEventTimePeriodic(gt_KeepFollowingScout, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KillSoon
//--------------------------------------------------------------------------------------------------
bool gt_KillSoon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ScoutBaby"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/055D1E8B"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/F83F1C24"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/9439858D"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/BEB4DF74"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/BEDF35D5"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/4FAF9D73"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/A484CE10"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/BF693962"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/8B4FC312"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/C9BBDD96"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/2CDA4675"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/41971B75"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/CC6D063B"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/7A8CB1A3"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/C7B9AB22"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/407DC097"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/899D3020"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/EF2FB725"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/77F081FC"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/0EADFD3F"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/7BA8A1E6"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    TextTagCreate(StringExternal("Param/Value/75DD0873"), 15, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    Wait(1.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillSoon_Init () {
    gt_KillSoon = TriggerCreate("gt_KillSoon_Func");
    TriggerAddEventUnitRegion(gt_KillSoon, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Theif
//--------------------------------------------------------------------------------------------------
bool gt_WeaponTheif_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HighTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponRemove(EventUnit(), "HighTemplarWeapon");
    UnitWeaponAdd(EventUnit(), UnitWeaponGet(EventUnitTargetUnit(), 1), null);
    libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    Wait(20.0, c_timeGame);
    UnitWeaponRemove(EventUnit(), UnitWeaponGet(EventUnit(), 1));
    UnitWeaponAdd(EventUnit(), "HighTemplarWeapon", null);
    libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponTheif_Init () {
    gt_WeaponTheif = TriggerCreate("gt_WeaponTheif_Func");
    TriggerAddEventUnitAbility(gt_WeaponTheif, null, AbilityCommand("WeaponTheif", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbit
//--------------------------------------------------------------------------------------------------
bool gt_Orbit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_groupofcharges;

    // Automatic Variable Declarations
    unitgroup auto272BBEE7_g;
    int auto272BBEE7_u;
    unit auto272BBEE7_var;

    // Variable Initialization
    lv_groupofcharges = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 10.0)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 7.5, 7.5)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 10.0, 0.0)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 7.5, -7.5)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, -10.0)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -7.5, -7.5)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -10.0, 0.0)), c_orderQueueReplace);
    UnitCreate(1, "BreachingCharge", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 270.0);
    UnitGroupAdd(lv_groupofcharges, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -7.5, 7.5)), c_orderQueueReplace);
    UnitGroupWaitUntilIdle(lv_groupofcharges, 0, true);
    auto272BBEE7_g = lv_groupofcharges;
    auto272BBEE7_u = UnitGroupCount(auto272BBEE7_g, c_unitCountAll);
    for (;; auto272BBEE7_u -= 1) {
        auto272BBEE7_var = UnitGroupUnitFromEnd(auto272BBEE7_g, auto272BBEE7_u);
        if (auto272BBEE7_var == null) { break; }
        UnitRemove(auto272BBEE7_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Orbit_Init () {
    gt_Orbit = TriggerCreate("gt_Orbit_Func");
    TriggerAddEventUnitAbility(gt_Orbit, null, AbilityCommand("MagneticCharges", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RPG Thrusters
//--------------------------------------------------------------------------------------------------
bool gt_RPGThrusters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SiegeTankSieged"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RPGThrusters_Init () {
    gt_RPGThrusters = TriggerCreate("gt_RPGThrusters_Func");
    TriggerAddEventUnitAbility(gt_RPGThrusters, null, AbilityCommand("RPGThrusters", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BIgArmor
//--------------------------------------------------------------------------------------------------
bool gt_BIgArmor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(EventUnit(), ((TechTreeUpgradeCount(EventPlayer(), "ZealotArmor5", c_techCountQueuedOrBetter) * 10) + 100), ((TechTreeUpgradeCount(EventPlayer(), "ZealotArmor5", c_techCountQueuedOrBetter) * 10) + 100), ((TechTreeUpgradeCount(EventPlayer(), "ZealotArmor5", c_techCountQueuedOrBetter) * 10) + 100));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BIgArmor_Init () {
    gt_BIgArmor = TriggerCreate("gt_BIgArmor_Func");
    TriggerAddEventUnitAbility(gt_BIgArmor, null, AbilityCommand("ZealotUpgrades", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_Unburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HydraliskLurkerBurrowed"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("BurrowHydraliskLurkerUp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unburrow_Init () {
    gt_Unburrow = TriggerCreate("gt_Unburrow_Func");
    TriggerAddEventUnitProperty(gt_Unburrow, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnonSpeedCooldown
//--------------------------------------------------------------------------------------------------
bool gt_TurnonSpeedCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SpeedCooldowns1"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "SpeedCooldowns1", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }

        if (!((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SpeedCooldowns, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnonSpeedCooldown_Init () {
    gt_TurnonSpeedCooldown = TriggerCreate("gt_TurnonSpeedCooldown_Func");
    TriggerAddEventUpgradeLevelChanged(gt_TurnonSpeedCooldown, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpeedCooldowns
//--------------------------------------------------------------------------------------------------
bool gt_SpeedCooldowns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityAddCooldown(EventUnit(), "FighterMode", "FlyModeNow", -11.25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedCooldowns_Init () {
    gt_SpeedCooldowns = TriggerCreate("gt_SpeedCooldowns_Func");
    TriggerEnable(gt_SpeedCooldowns, false);
    TriggerAddEventUnitAbility(gt_SpeedCooldowns, null, AbilityCommand("FighterMode", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BacktoAssault
//--------------------------------------------------------------------------------------------------
bool gt_BacktoAssault_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BacktoAssault_Init () {
    gt_BacktoAssault = TriggerCreate("gt_BacktoAssault_Func");
    TriggerAddEventUnitBehaviorChange(gt_BacktoAssault, null, "BackToAssualtMode", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARattack
//--------------------------------------------------------------------------------------------------
bool gt_ARattack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vikingUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vikingUnit = EventUnitTarget();
    UnitAbilityAddChargeUsed(lv_vikingUnit, "AssaultRifle2", "Abil/AssaultRifle2", 1.0);
    if ((UnitAbilityChargeInfo(lv_vikingUnit, AbilityCommand("AssaultRifle2", 0), c_unitAbilChargeCountLeft) < 1.0)) {
        UnitBehaviorRemove(lv_vikingUnit, "AssaultRifle", 1);
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("AssaultRifle2", 0), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ARattack_Init () {
    gt_ARattack = TriggerCreate("gt_ARattack_Func");
    TriggerAddEventUnitAttacked2(gt_ARattack, null, "TwinGatlingCannon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SRattack
//--------------------------------------------------------------------------------------------------
bool gt_SRattack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vikingUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vikingUnit = EventUnit();
    UnitAbilityAddChargeUsed(lv_vikingUnit, "SniperRifle", "SniperRifle", 1.0);
    if ((UnitAbilityChargeInfo(lv_vikingUnit, AbilityCommand("SniperRifle", 0), c_unitAbilChargeCountLeft) < 1.0)) {
        UnitBehaviorRemove(lv_vikingUnit, "SniperRifle", 1);
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("SniperRifle", 0), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SRattack_Init () {
    gt_SRattack = TriggerCreate("gt_SRattack_Func");
    TriggerAddEventUnitStartedAttack2(gt_SRattack, null, "TwinGatlingCannon2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddARammo
//--------------------------------------------------------------------------------------------------
bool gt_AddARammo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("AssaultRifle2", 0), c_unitAbilChargeCountLeft) < 1.0)) {
        UnitBehaviorAdd(EventUnit(), "AssaultRifle", EventUnit(), 1);
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("AssaultRifle2", 0), true);
    }

    UnitAbilityAddChargeUsed(EventUnit(), "AssaultRifle2", "Abil/AssaultRifle2", -50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddARammo_Init () {
    gt_AddARammo = TriggerCreate("gt_AddARammo_Func");
    TriggerAddEventUnitAbility(gt_AddARammo, null, AbilityCommand("ARReload", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddSRammo
//--------------------------------------------------------------------------------------------------
bool gt_AddSRammo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("SniperRifle", 0), c_unitAbilChargeCountLeft) < 1.0)) {
        UnitBehaviorAdd(EventUnit(), "SniperRifle", EventUnit(), 1);
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("SniperRifle", 0), true);
    }

    UnitAbilityAddChargeUsed(EventUnit(), "SniperRifle", "SniperRifle", -25.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddSRammo_Init () {
    gt_AddSRammo = TriggerCreate("gt_AddSRammo_Func");
    TriggerAddEventUnitAbility(gt_AddSRammo, null, AbilityCommand("SRReload", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ApplyStrikiingRoundAR
//--------------------------------------------------------------------------------------------------
bool gt_ApplyStrikiingRoundAR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libNtve_gf_AcquiredTarget(), "StrikingRounds", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyStrikiingRoundAR_Init () {
    gt_ApplyStrikiingRoundAR = TriggerCreate("gt_ApplyStrikiingRoundAR_Func");
    TriggerAddEventUnitStartedAttack2(gt_ApplyStrikiingRoundAR, null, "TwinGatlingCannon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ApplyStrikiingRoundSR
//--------------------------------------------------------------------------------------------------
bool gt_ApplyStrikiingRoundSR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "StrikingRounds", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyStrikiingRoundSR_Init () {
    gt_ApplyStrikiingRoundSR = TriggerCreate("gt_ApplyStrikiingRoundSR_Func");
    TriggerAddEventUnitDamaged(gt_ApplyStrikiingRoundSR, null, c_unitDamageTypeAny, c_unitDamageEither, "TwinGatlingCannonSRDamage");
    TriggerAddEventUnitDamaged(gt_ApplyStrikiingRoundSR, null, c_unitDamageTypeAny, c_unitDamageEither, "TwinGatlingCannonSRDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarauderUpgradesCostMoney!
//--------------------------------------------------------------------------------------------------
bool gt_MarauderUpgradesCostMoney_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 6))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 100);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 2))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 100);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 7))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 175);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 3))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 175);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 8))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 250);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 4))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 250);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 13))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5000);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 1))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 2500);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 16))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5000);
    }

    if ((EventUnitAbility() == AbilityCommand("EngineeringBayResearch", 9))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 500);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarauderUpgradesCostMoney_Init () {
    gt_MarauderUpgradesCostMoney = TriggerCreate("gt_MarauderUpgradesCostMoney_Func");
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 6), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 7), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 8), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 2), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 3), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 4), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 9), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 13), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MarauderUpgradesCostMoney, null, AbilityCommand("EngineeringBayResearch", 16), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOffBlaster
//--------------------------------------------------------------------------------------------------
bool gt_TurnOffBlaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponRemove(EventUnit(), "WraithG2");
    UnitWeaponAdd(EventUnit(), "WraithA", "FreeRotate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOffBlaster_Init () {
    gt_TurnOffBlaster = TriggerCreate("gt_TurnOffBlaster_Func");
    TriggerAddEventUnitAbility(gt_TurnOffBlaster, null, AbilityCommand("GeminiMissiles", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnOnBlaster
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnBlaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponRemove(EventUnit(), "WraithA");
    UnitWeaponAdd(EventUnit(), "WraithG2", "FreeRotate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnBlaster_Init () {
    gt_TurnOnBlaster = TriggerCreate("gt_TurnOnBlaster_Func");
    TriggerAddEventUnitAbility(gt_TurnOnBlaster, null, AbilityCommand("GeminiMissiles", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColossusDetonation
//--------------------------------------------------------------------------------------------------
bool gt_ColossusDetonation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_detonationChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Colossus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_detonationChance = RandomInt(1, 100);
    if ((TechTreeUpgradeCount(UnitGetOwner(libNtve_gf_KillingUnit()), "ColossusDetonationChance1", c_techCountCompleteOnly) == 1)) {
        if (((lv_detonationChance == 16) || (lv_detonationChance == 17))) {
            UnitCreateEffectPoint(libNtve_gf_KillingUnit(), "DetonationSearch", UnitGetPosition(EventUnit()));
        }

    }
    else {
        if ((lv_detonationChance == 16)) {
            UnitCreateEffectPoint(libNtve_gf_KillingUnit(), "DetonationSearch", UnitGetPosition(EventUnit()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusDetonation_Init () {
    gt_ColossusDetonation = TriggerCreate("gt_ColossusDetonation_Func");
    TriggerAddEventUnitDied(gt_ColossusDetonation, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smellslikevictory - action
//--------------------------------------------------------------------------------------------------
bool gt_Smellslikevictoryaction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Firebat"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SmellsLikeVictory") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (EventUnitDamageAmount() * 2.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Smellslikevictoryaction_Init () {
    gt_Smellslikevictoryaction = TriggerCreate("gt_Smellslikevictoryaction_Func");
    TriggerAddEventUnitDamaged(gt_Smellslikevictoryaction, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_HideUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 6), false);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 0), false);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 1), false);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 2), false);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 5), false);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 3), false);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 4), false);
    Wait(2.0, c_timeGame);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 6), true);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 0), true);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 1), true);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 2), true);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 5), true);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 3), true);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ReaperUpgrades", 4), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideUpgrades_Init () {
    gt_HideUpgrades = TriggerCreate("gt_HideUpgrades_Func");
    TriggerAddEventUnitBehaviorChange(gt_HideUpgrades, null, "ReaperJump", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EmitterToggle
//--------------------------------------------------------------------------------------------------
bool gt_EmitterToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.05, c_timeGame);
    TriggerEnable(gt_EmitterApply, true);
    while (!((UnitHasBehavior2(EventUnit(), "EmitterCheck") == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_EmitterApply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmitterToggle_Init () {
    gt_EmitterToggle = TriggerCreate("gt_EmitterToggle_Func");
    TriggerAddEventUnitAbility(gt_EmitterToggle, null, AbilityCommand("Emitter", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EmitterApply
//--------------------------------------------------------------------------------------------------
bool gt_EmitterApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto92FDB39A_ae = 6;
    int auto92FDB39A_var;
    unitgroup auto0AB6811B_g;
    int auto0AB6811B_u;
    unit auto0AB6811B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto92FDB39A_var = 1;
    for ( ; auto92FDB39A_var <= auto92FDB39A_ae; auto92FDB39A_var += 1 ) {
        auto0AB6811B_g = UnitGroup(null, auto92FDB39A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto0AB6811B_u = UnitGroupCount(auto0AB6811B_g, c_unitCountAll);
        for (;; auto0AB6811B_u -= 1) {
            auto0AB6811B_var = UnitGroupUnitFromEnd(auto0AB6811B_g, auto0AB6811B_u);
            if (auto0AB6811B_var == null) { break; }
            UnitBehaviorAddPlayer(auto0AB6811B_var, "Emitter", 1, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmitterApply_Init () {
    gt_EmitterApply = TriggerCreate("gt_EmitterApply_Func");
    TriggerEnable(gt_EmitterApply, false);
    TriggerAddEventTimePeriodic(gt_EmitterApply, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -KillRobo
//--------------------------------------------------------------------------------------------------
bool gt_KillRobo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE56102CB_g;
    int autoE56102CB_u;
    unit autoE56102CB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE56102CB_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE56102CB_u = UnitGroupCount(autoE56102CB_g, c_unitCountAll);
    for (;; autoE56102CB_u -= 1) {
        autoE56102CB_var = UnitGroupUnitFromEnd(autoE56102CB_g, autoE56102CB_u);
        if (autoE56102CB_var == null) { break; }
        if ((UnitGetType(autoE56102CB_var) == "RoboticsBay")) {
            UnitRemove(autoE56102CB_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillRobo_Init () {
    gt_KillRobo = TriggerCreate("gt_KillRobo_Func");
    TriggerAddEventChatMessage(gt_KillRobo, c_playerAny, "-KillRobo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -KillPylon
//--------------------------------------------------------------------------------------------------
bool gt_KillPylon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto69FA818C_g;
    int auto69FA818C_u;
    unit auto69FA818C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto69FA818C_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto69FA818C_u = UnitGroupCount(auto69FA818C_g, c_unitCountAll);
    for (;; auto69FA818C_u -= 1) {
        auto69FA818C_var = UnitGroupUnitFromEnd(auto69FA818C_g, auto69FA818C_u);
        if (auto69FA818C_var == null) { break; }
        if ((UnitGetType(auto69FA818C_var) == "Pylon")) {
            UnitRemove(auto69FA818C_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillPylon_Init () {
    gt_KillPylon = TriggerCreate("gt_KillPylon_Func");
    TriggerAddEventChatMessage(gt_KillPylon, c_playerAny, "-KillPylon", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -KillAura
//--------------------------------------------------------------------------------------------------
bool gt_KillAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF3F62EB9_g;
    int autoF3F62EB9_u;
    unit autoF3F62EB9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF3F62EB9_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3F62EB9_u = UnitGroupCount(autoF3F62EB9_g, c_unitCountAll);
    for (;; autoF3F62EB9_u -= 1) {
        autoF3F62EB9_var = UnitGroupUnitFromEnd(autoF3F62EB9_g, autoF3F62EB9_u);
        if (autoF3F62EB9_var == null) { break; }
        if (((UnitGetType(autoF3F62EB9_var) == "XelNagaTower") || (UnitGetType(autoF3F62EB9_var) == "Obelisk") || (UnitGetType(autoF3F62EB9_var) == "DarkShrine"))) {
            UnitRemove(autoF3F62EB9_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillAura_Init () {
    gt_KillAura = TriggerCreate("gt_KillAura_Func");
    TriggerAddEventChatMessage(gt_KillAura, c_playerAny, "-KillAura", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFix
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaTower"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 1)) {
        gv_intelTower[1] = EventUnit();
        TriggerEnable(gt_EnergyFixPt1, true);
    }

    if ((UnitGetOwner(EventUnit()) == 2)) {
        gv_intelTower[2] = EventUnit();
        TriggerEnable(gt_EnergyFixPt2, true);
    }

    if ((UnitGetOwner(EventUnit()) == 3)) {
        gv_intelTower[3] = EventUnit();
        TriggerEnable(gt_EnergyFixPt3, true);
    }

    if ((UnitGetOwner(EventUnit()) == 4)) {
        gv_intelTower[4] = EventUnit();
        TriggerEnable(gt_EnergyFixPt4, true);
    }

    if ((UnitGetOwner(EventUnit()) == 5)) {
        gv_intelTower[5] = EventUnit();
        TriggerEnable(gt_EnergyFixPt5, true);
    }

    if ((UnitGetOwner(EventUnit()) == 6)) {
        gv_intelTower[6] = EventUnit();
        TriggerEnable(gt_EnergyFixPt6, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFix_Init () {
    gt_EnergyFix = TriggerCreate("gt_EnergyFix_Func");
    TriggerEnable(gt_EnergyFix, false);
    TriggerAddEventUnitRegion(gt_EnergyFix, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyRemove
//--------------------------------------------------------------------------------------------------
bool gt_EnergyRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaTower"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 1)) {
        TriggerEnable(gt_EnergyFixPt1, false);
    }

    if ((UnitGetOwner(EventUnit()) == 2)) {
        TriggerEnable(gt_EnergyFixPt2, false);
    }

    if ((UnitGetOwner(EventUnit()) == 3)) {
        TriggerEnable(gt_EnergyFixPt3, false);
    }

    if ((UnitGetOwner(EventUnit()) == 4)) {
        TriggerEnable(gt_EnergyFixPt4, false);
    }

    if ((UnitGetOwner(EventUnit()) == 5)) {
        TriggerEnable(gt_EnergyFixPt5, false);
    }

    if ((UnitGetOwner(EventUnit()) == 6)) {
        TriggerEnable(gt_EnergyFixPt6, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyRemove_Init () {
    gt_EnergyRemove = TriggerCreate("gt_EnergyRemove_Func");
    TriggerEnable(gt_EnergyRemove, false);
    TriggerAddEventUnitDied(gt_EnergyRemove, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFixPt1
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFixPt1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto69639B81_g;
    int auto69639B81_u;
    unit auto69639B81_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto69639B81_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto69639B81_u = UnitGroupCount(auto69639B81_g, c_unitCountAll);
    for (;; auto69639B81_u -= 1) {
        auto69639B81_var = UnitGroupUnitFromEnd(auto69639B81_g, auto69639B81_u);
        if (auto69639B81_var == null) { break; }
        if ((UnitGetType(auto69639B81_var) != "XelNagaTower") && (DistanceBetweenPoints(UnitGetPosition(auto69639B81_var), UnitGetPosition(gv_intelTower[1])) <= (TechTreeUpgradeCount(1, "CorsairAgilityRange10", c_techCountQueuedOrBetter) + 5)) && ((UnitGetOwner(auto69639B81_var) == 1) || (UnitGetOwner(auto69639B81_var) == 2) || (UnitGetOwner(auto69639B81_var) == 3) || (UnitGetOwner(auto69639B81_var) == 4) || (UnitGetOwner(auto69639B81_var) == 5) || (UnitGetOwner(auto69639B81_var) == 6))) {
            UnitBehaviorAdd(auto69639B81_var, "IntellectualAura", gv_intelTower[1], 1);
        }
        else {
            UnitBehaviorRemove(auto69639B81_var, "IntellectualAura", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFixPt1_Init () {
    gt_EnergyFixPt1 = TriggerCreate("gt_EnergyFixPt1_Func");
    TriggerEnable(gt_EnergyFixPt1, false);
    TriggerAddEventTimePeriodic(gt_EnergyFixPt1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFixPt2
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFixPt2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto71D2BF3C_g;
    int auto71D2BF3C_u;
    unit auto71D2BF3C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto71D2BF3C_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71D2BF3C_u = UnitGroupCount(auto71D2BF3C_g, c_unitCountAll);
    for (;; auto71D2BF3C_u -= 1) {
        auto71D2BF3C_var = UnitGroupUnitFromEnd(auto71D2BF3C_g, auto71D2BF3C_u);
        if (auto71D2BF3C_var == null) { break; }
        if ((UnitGetType(auto71D2BF3C_var) != "XelNagaTower") && (DistanceBetweenPoints(UnitGetPosition(auto71D2BF3C_var), UnitGetPosition(gv_intelTower[2])) <= (TechTreeUpgradeCount(2, "CorsairAgilityRange10", c_techCountQueuedOrBetter) + 5)) && ((UnitGetOwner(auto71D2BF3C_var) == 1) || (UnitGetOwner(auto71D2BF3C_var) == 2) || (UnitGetOwner(auto71D2BF3C_var) == 3) || (UnitGetOwner(auto71D2BF3C_var) == 4) || (UnitGetOwner(auto71D2BF3C_var) == 5) || (UnitGetOwner(auto71D2BF3C_var) == 6))) {
            UnitBehaviorAdd(auto71D2BF3C_var, "IntellectualAura", gv_intelTower[2], 1);
        }
        else {
            UnitBehaviorRemove(auto71D2BF3C_var, "IntellectualAura", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFixPt2_Init () {
    gt_EnergyFixPt2 = TriggerCreate("gt_EnergyFixPt2_Func");
    TriggerEnable(gt_EnergyFixPt2, false);
    TriggerAddEventTimePeriodic(gt_EnergyFixPt2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFixPt3
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFixPt3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF385C85F_g;
    int autoF385C85F_u;
    unit autoF385C85F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF385C85F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF385C85F_u = UnitGroupCount(autoF385C85F_g, c_unitCountAll);
    for (;; autoF385C85F_u -= 1) {
        autoF385C85F_var = UnitGroupUnitFromEnd(autoF385C85F_g, autoF385C85F_u);
        if (autoF385C85F_var == null) { break; }
        if ((UnitGetType(autoF385C85F_var) != "XelNagaTower") && (DistanceBetweenPoints(UnitGetPosition(autoF385C85F_var), UnitGetPosition(gv_intelTower[3])) <= (TechTreeUpgradeCount(3, "CorsairAgilityRange10", c_techCountQueuedOrBetter) + 5)) && ((UnitGetOwner(autoF385C85F_var) == 1) || (UnitGetOwner(autoF385C85F_var) == 2) || (UnitGetOwner(autoF385C85F_var) == 3) || (UnitGetOwner(autoF385C85F_var) == 4) || (UnitGetOwner(autoF385C85F_var) == 5) || (UnitGetOwner(autoF385C85F_var) == 6))) {
            UnitBehaviorAdd(autoF385C85F_var, "IntellectualAura", gv_intelTower[3], 1);
        }
        else {
            UnitBehaviorRemove(autoF385C85F_var, "IntellectualAura", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFixPt3_Init () {
    gt_EnergyFixPt3 = TriggerCreate("gt_EnergyFixPt3_Func");
    TriggerEnable(gt_EnergyFixPt3, false);
    TriggerAddEventTimePeriodic(gt_EnergyFixPt3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFixPt4
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFixPt4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA4500AD9_g;
    int autoA4500AD9_u;
    unit autoA4500AD9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA4500AD9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4500AD9_u = UnitGroupCount(autoA4500AD9_g, c_unitCountAll);
    for (;; autoA4500AD9_u -= 1) {
        autoA4500AD9_var = UnitGroupUnitFromEnd(autoA4500AD9_g, autoA4500AD9_u);
        if (autoA4500AD9_var == null) { break; }
        if ((UnitGetType(autoA4500AD9_var) != "XelNagaTower") && (DistanceBetweenPoints(UnitGetPosition(autoA4500AD9_var), UnitGetPosition(gv_intelTower[4])) <= (TechTreeUpgradeCount(4, "CorsairAgilityRange10", c_techCountQueuedOrBetter) + 5)) && ((UnitGetOwner(autoA4500AD9_var) == 1) || (UnitGetOwner(autoA4500AD9_var) == 2) || (UnitGetOwner(autoA4500AD9_var) == 3) || (UnitGetOwner(autoA4500AD9_var) == 4) || (UnitGetOwner(autoA4500AD9_var) == 5) || (UnitGetOwner(autoA4500AD9_var) == 6))) {
            UnitBehaviorAdd(autoA4500AD9_var, "IntellectualAura", gv_intelTower[4], 1);
        }
        else {
            UnitBehaviorRemove(autoA4500AD9_var, "IntellectualAura", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFixPt4_Init () {
    gt_EnergyFixPt4 = TriggerCreate("gt_EnergyFixPt4_Func");
    TriggerEnable(gt_EnergyFixPt4, false);
    TriggerAddEventTimePeriodic(gt_EnergyFixPt4, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFixPt5
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFixPt5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB424E34A_g;
    int autoB424E34A_u;
    unit autoB424E34A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB424E34A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB424E34A_u = UnitGroupCount(autoB424E34A_g, c_unitCountAll);
    for (;; autoB424E34A_u -= 1) {
        autoB424E34A_var = UnitGroupUnitFromEnd(autoB424E34A_g, autoB424E34A_u);
        if (autoB424E34A_var == null) { break; }
        if ((UnitGetType(autoB424E34A_var) != "XelNagaTower") && (DistanceBetweenPoints(UnitGetPosition(autoB424E34A_var), UnitGetPosition(gv_intelTower[5])) <= (TechTreeUpgradeCount(5, "CorsairAgilityRange10", c_techCountQueuedOrBetter) + 5)) && ((UnitGetOwner(autoB424E34A_var) == 1) || (UnitGetOwner(autoB424E34A_var) == 2) || (UnitGetOwner(autoB424E34A_var) == 3) || (UnitGetOwner(autoB424E34A_var) == 4) || (UnitGetOwner(autoB424E34A_var) == 5) || (UnitGetOwner(autoB424E34A_var) == 6))) {
            UnitBehaviorAdd(autoB424E34A_var, "IntellectualAura", gv_intelTower[5], 1);
        }
        else {
            UnitBehaviorRemove(autoB424E34A_var, "IntellectualAura", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFixPt5_Init () {
    gt_EnergyFixPt5 = TriggerCreate("gt_EnergyFixPt5_Func");
    TriggerEnable(gt_EnergyFixPt5, false);
    TriggerAddEventTimePeriodic(gt_EnergyFixPt5, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnergyFixPt6
//--------------------------------------------------------------------------------------------------
bool gt_EnergyFixPt6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6CAE2A50_g;
    int auto6CAE2A50_u;
    unit auto6CAE2A50_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6CAE2A50_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6CAE2A50_u = UnitGroupCount(auto6CAE2A50_g, c_unitCountAll);
    for (;; auto6CAE2A50_u -= 1) {
        auto6CAE2A50_var = UnitGroupUnitFromEnd(auto6CAE2A50_g, auto6CAE2A50_u);
        if (auto6CAE2A50_var == null) { break; }
        if ((UnitGetType(auto6CAE2A50_var) != "XelNagaTower") && (DistanceBetweenPoints(UnitGetPosition(auto6CAE2A50_var), UnitGetPosition(gv_intelTower[6])) <= (TechTreeUpgradeCount(6, "CorsairAgilityRange10", c_techCountQueuedOrBetter) + 5)) && ((UnitGetOwner(auto6CAE2A50_var) == 1) || (UnitGetOwner(auto6CAE2A50_var) == 2) || (UnitGetOwner(auto6CAE2A50_var) == 3) || (UnitGetOwner(auto6CAE2A50_var) == 4) || (UnitGetOwner(auto6CAE2A50_var) == 5) || (UnitGetOwner(auto6CAE2A50_var) == 6))) {
            UnitBehaviorAdd(auto6CAE2A50_var, "IntellectualAura", gv_intelTower[6], 1);
        }
        else {
            UnitBehaviorRemove(auto6CAE2A50_var, "IntellectualAura", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyFixPt6_Init () {
    gt_EnergyFixPt6 = TriggerCreate("gt_EnergyFixPt6_Func");
    TriggerEnable(gt_EnergyFixPt6, false);
    TriggerAddEventTimePeriodic(gt_EnergyFixPt6, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CloakingSpray
//--------------------------------------------------------------------------------------------------
bool gt_CloakingSpray_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.9, c_timeGame);
    UnitAbilityEnable(EventUnit(), "CloakofFlames", false);
    Wait(30.0, c_timeGame);
    UnitAbilityEnable(EventUnit(), "CloakofFlames", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingSpray_Init () {
    gt_CloakingSpray = TriggerCreate("gt_CloakingSpray_Func");
    TriggerAddEventUnitAbility(gt_CloakingSpray, null, AbilityCommand("CloakofFlames", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveOldSkel
//--------------------------------------------------------------------------------------------------
bool gt_RemoveOldSkel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3ECE454E_g;
    int auto3ECE454E_u;
    unit auto3ECE454E_var;
    unitgroup auto25A874AB_g;
    int auto25A874AB_u;
    unit auto25A874AB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3ECE454E_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3ECE454E_u = UnitGroupCount(auto3ECE454E_g, c_unitCountAll);
    for (;; auto3ECE454E_u -= 1) {
        auto3ECE454E_var = UnitGroupUnitFromEnd(auto3ECE454E_g, auto3ECE454E_u);
        if (auto3ECE454E_var == null) { break; }
        if (((UnitGetType(auto3ECE454E_var) == "Skeletalarcher") || (UnitGetType(auto3ECE454E_var) == "Skeleton"))) {
            UnitKill(auto3ECE454E_var);
        }

    }
    Wait(1.0, c_timeGame);
    auto25A874AB_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25A874AB_u = UnitGroupCount(auto25A874AB_g, c_unitCountAll);
    for (;; auto25A874AB_u -= 1) {
        auto25A874AB_var = UnitGroupUnitFromEnd(auto25A874AB_g, auto25A874AB_u);
        if (auto25A874AB_var == null) { break; }
        if (((UnitGetType(auto25A874AB_var) == "Skeletalarcher") || (UnitGetType(auto25A874AB_var) == "Skeleton"))) {
            UnitXPSetCurrentLevel(auto25A874AB_var, "CheckMyLevel", UnitXPGetCurrentLevel(gv_playerInfo[UnitGetOwner(auto25A874AB_var)].lv_hero, "CheckMyLevel"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveOldSkel_Init () {
    gt_RemoveOldSkel = TriggerCreate("gt_RemoveOldSkel_Func");
    TriggerAddEventUnitAbility(gt_RemoveOldSkel, null, AbilityCommand("SkeletonArmy", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DestroyProjectiles
//--------------------------------------------------------------------------------------------------
bool gt_DestroyProjectiles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0)) == true)) {
        UnitRemove(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyProjectiles_Init () {
    gt_DestroyProjectiles = TriggerCreate("gt_DestroyProjectiles_Func");
    TriggerAddEventUnitBehaviorChange(gt_DestroyProjectiles, null, "TemporalField", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RankUp
//--------------------------------------------------------------------------------------------------
bool gt_RankUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Disruptor") || (UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "RagingHybrid") || (UnitGetType(EventUnit()) == "OutragingHybrid") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "DisruptorPhased")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "RankXF") == false) && (UnitHasBehavior2(EventUnit(), "RankX") == false) && (UnitHasBehavior2(EventUnit(), "RankSSS") == false) && (UnitHasBehavior2(EventUnit(), "RankSSA") == false) && (UnitHasBehavior2(EventUnit(), "RankSSB") == false) && (UnitHasBehavior2(EventUnit(), "RankSSC") == false) && (UnitHasBehavior2(EventUnit(), "RankSSD") == false) && (UnitHasBehavior2(EventUnit(), "RankSSE") == false) && (UnitHasBehavior2(EventUnit(), "RankSSF") == false) && (UnitHasBehavior2(EventUnit(), "RankSS") == false) && (UnitHasBehavior2(EventUnit(), "RankSA") == false) && (UnitHasBehavior2(EventUnit(), "RankSB") == false) && (UnitHasBehavior2(EventUnit(), "RankSC") == false) && (UnitHasBehavior2(EventUnit(), "RankSD") == false) && (UnitHasBehavior2(EventUnit(), "RankSE") == false) && (UnitHasBehavior2(EventUnit(), "RankSF") == false) && (UnitHasBehavior2(EventUnit(), "RankS") == false) && (UnitHasBehavior2(EventUnit(), "RankA") == false) && (UnitHasBehavior2(EventUnit(), "RankB") == false) && (UnitHasBehavior2(EventUnit(), "RankC") == false) && (UnitHasBehavior2(EventUnit(), "RankD") == false) && (UnitHasBehavior2(EventUnit(), "RankE") == false) && (UnitHasBehavior2(EventUnit(), "RankF") == false)) {
        UnitBehaviorAdd(EventUnit(), "RankF", EventUnit(), 1);
        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
    }
    else {
        if ((UnitHasBehavior2(EventUnit(), "RankF") == true)) {
            UnitBehaviorRemove(EventUnit(), "RankF", 1);
            UnitBehaviorAdd(EventUnit(), "RankE", EventUnit(), 1);
            TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
        }
        else {
            if ((UnitHasBehavior2(EventUnit(), "RankE") == true)) {
                UnitBehaviorRemove(EventUnit(), "RankE", 1);
                UnitBehaviorAdd(EventUnit(), "RankD", EventUnit(), 1);
                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
            }
            else {
                if ((UnitHasBehavior2(EventUnit(), "RankD") == true)) {
                    UnitBehaviorRemove(EventUnit(), "RankD", 1);
                    UnitBehaviorAdd(EventUnit(), "RankC", EventUnit(), 1);
                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                }
                else {
                    if ((UnitHasBehavior2(EventUnit(), "RankC") == true)) {
                        UnitBehaviorRemove(EventUnit(), "RankC", 1);
                        UnitBehaviorAdd(EventUnit(), "RankB", EventUnit(), 1);
                        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                    }
                    else {
                        if ((UnitHasBehavior2(EventUnit(), "RankB") == true)) {
                            UnitBehaviorRemove(EventUnit(), "RankB", 1);
                            UnitBehaviorAdd(EventUnit(), "RankA", EventUnit(), 1);
                            TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                        }
                        else {
                            if ((UnitHasBehavior2(EventUnit(), "RankB") == true)) {
                                UnitBehaviorRemove(EventUnit(), "RankB", 1);
                                UnitBehaviorAdd(EventUnit(), "RankA", EventUnit(), 1);
                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                            }
                            else {
                                if ((UnitHasBehavior2(EventUnit(), "RankA") == true)) {
                                    UnitBehaviorRemove(EventUnit(), "RankA", 1);
                                    UnitBehaviorAdd(EventUnit(), "RankS", EventUnit(), 1);
                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                }
                                else {
                                    if ((UnitHasBehavior2(EventUnit(), "RankS") == true)) {
                                        UnitBehaviorRemove(EventUnit(), "RankS", 1);
                                        UnitBehaviorAdd(EventUnit(), "RankSF", EventUnit(), 1);
                                        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                    }
                                    else {
                                        if ((UnitHasBehavior2(EventUnit(), "RankSF") == true)) {
                                            UnitBehaviorRemove(EventUnit(), "RankSF", 1);
                                            UnitBehaviorAdd(EventUnit(), "RankSE", EventUnit(), 1);
                                            TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                        }
                                        else {
                                            if ((UnitHasBehavior2(EventUnit(), "RankSE") == true)) {
                                                UnitBehaviorRemove(EventUnit(), "RankSE", 1);
                                                UnitBehaviorAdd(EventUnit(), "RankSD", EventUnit(), 1);
                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                            }
                                            else {
                                                if ((UnitHasBehavior2(EventUnit(), "RankSD") == true)) {
                                                    UnitBehaviorRemove(EventUnit(), "RankSD", 1);
                                                    UnitBehaviorAdd(EventUnit(), "RankSC", EventUnit(), 1);
                                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                }
                                                else {
                                                    if ((UnitHasBehavior2(EventUnit(), "RankSC") == true)) {
                                                        UnitBehaviorRemove(EventUnit(), "RankSC", 1);
                                                        UnitBehaviorAdd(EventUnit(), "RankSB", EventUnit(), 1);
                                                        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                    }
                                                    else {
                                                        if ((UnitHasBehavior2(EventUnit(), "RankSB") == true)) {
                                                            UnitBehaviorRemove(EventUnit(), "RankSB", 1);
                                                            UnitBehaviorAdd(EventUnit(), "RankSA", EventUnit(), 1);
                                                            TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                        }
                                                        else {
                                                            if ((UnitHasBehavior2(EventUnit(), "RankSA") == true)) {
                                                                UnitBehaviorRemove(EventUnit(), "RankSA", 1);
                                                                UnitBehaviorAdd(EventUnit(), "RankSS", EventUnit(), 1);
                                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                gv_mineralResource = 30;
                                                                gv_vespeneResource = 3;
                                                                TriggerEnable(gt_GenerateMinerals, true);
                                                            }
                                                            else {
                                                                if ((UnitHasBehavior2(EventUnit(), "RankSS") == true)) {
                                                                    UnitBehaviorRemove(EventUnit(), "RankSS", 1);
                                                                    UnitBehaviorAdd(EventUnit(), "RankSSF", EventUnit(), 1);
                                                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                    gv_mineralResource = 50;
                                                                    gv_vespeneResource = 5;
                                                                    TriggerEnable(gt_GenerateMinerals, true);
                                                                }
                                                                else {
                                                                    if ((UnitHasBehavior2(EventUnit(), "RankSSF") == true)) {
                                                                        UnitBehaviorRemove(EventUnit(), "RankSSF", 1);
                                                                        UnitBehaviorAdd(EventUnit(), "RankSSE", EventUnit(), 1);
                                                                        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                        gv_mineralResource = 50;
                                                                        gv_vespeneResource = 5;
                                                                        TriggerEnable(gt_GenerateMinerals, true);
                                                                    }
                                                                    else {
                                                                        if ((UnitHasBehavior2(EventUnit(), "RankSSE") == true)) {
                                                                            UnitBehaviorRemove(EventUnit(), "RankSSE", 1);
                                                                            UnitBehaviorAdd(EventUnit(), "RankSSD", EventUnit(), 1);
                                                                            TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                            gv_mineralResource = 100;
                                                                            gv_vespeneResource = 10;
                                                                            TriggerEnable(gt_GenerateMinerals, true);
                                                                        }
                                                                        else {
                                                                            if ((UnitHasBehavior2(EventUnit(), "RankSSD") == true)) {
                                                                                UnitBehaviorRemove(EventUnit(), "RankSSD", 1);
                                                                                UnitBehaviorAdd(EventUnit(), "RankSSC", EventUnit(), 1);
                                                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpSplash10", 1);
                                                                                gv_mineralResource = 100;
                                                                                gv_vespeneResource = 10;
                                                                                TriggerEnable(gt_GenerateMinerals, true);
                                                                            }
                                                                            else {
                                                                                if ((UnitHasBehavior2(EventUnit(), "RankSSC") == true)) {
                                                                                    UnitBehaviorRemove(EventUnit(), "RankSSC", 1);
                                                                                    UnitBehaviorAdd(EventUnit(), "RankSSB", EventUnit(), 1);
                                                                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                                    gv_mineralResource = 100;
                                                                                    gv_vespeneResource = 10;
                                                                                    TriggerEnable(gt_GenerateMinerals, true);
                                                                                }
                                                                                else {
                                                                                    if ((UnitHasBehavior2(EventUnit(), "RankSSB") == true)) {
                                                                                        UnitBehaviorRemove(EventUnit(), "RankSSB", 1);
                                                                                        UnitBehaviorAdd(EventUnit(), "RankSSA", EventUnit(), 1);
                                                                                        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                                        gv_mineralResource = 100;
                                                                                        gv_vespeneResource = 10;
                                                                                        TriggerEnable(gt_GenerateMinerals, true);
                                                                                    }
                                                                                    else {
                                                                                        if ((UnitHasBehavior2(EventUnit(), "RankSSA") == true)) {
                                                                                            UnitBehaviorRemove(EventUnit(), "RankSSA", 1);
                                                                                            UnitBehaviorAdd(EventUnit(), "RankSSS", EventUnit(), 1);
                                                                                            TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                                            gv_mineralResource = 100;
                                                                                            gv_vespeneResource = 10;
                                                                                            TriggerEnable(gt_GenerateMinerals, true);
                                                                                        }
                                                                                        else {
                                                                                            if ((UnitHasBehavior2(EventUnit(), "RankSSS") == true)) {
                                                                                                UnitBehaviorRemove(EventUnit(), "RankSSS", 1);
                                                                                                UnitBehaviorAdd(EventUnit(), "RankX", EventUnit(), 1);
                                                                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpSkadoosh100", 2);
                                                                                                TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpSkadoosh1002", 4);
                                                                                                gv_skadooshMultiplier[UnitGetOwner(EventUnit())] += 1.0;
                                                                                                gv_skadooshRadius[UnitGetOwner(EventUnit())] += 2.0;
                                                                                                gv_mineralResource = 100;
                                                                                                gv_vespeneResource = 10;
                                                                                                TriggerEnable(gt_GenerateMinerals, true);
                                                                                            }
                                                                                            else {
                                                                                                if ((UnitHasBehavior2(EventUnit(), "RankX") == true)) {
                                                                                                    UnitBehaviorRemove(EventUnit(), "RankX", 1);
                                                                                                    UnitBehaviorAdd(EventUnit(), "RankXF", EventUnit(), 1);
                                                                                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpCost30", 1);
                                                                                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "RankUpSplash10", 1);
                                                                                                    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "HybridTeleKeneticMultiplier100", 2);
                                                                                                    gv_energyHealMultiplier[UnitGetOwner(EventUnit())] += 1.0;
                                                                                                    gv_mineralResource = 100;
                                                                                                    gv_vespeneResource = 10;
                                                                                                    TriggerEnable(gt_GenerateMinerals, true);
                                                                                                }

                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankUp_Init () {
    gt_RankUp = TriggerCreate("gt_RankUp_Func");
    TriggerAddEventUnitAbility(gt_RankUp, null, AbilityCommand("Upgrade", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnGenerateMineralsOff
//--------------------------------------------------------------------------------------------------
bool gt_TurnGenerateMineralsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Disruptor") || (UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "RagingHybrid") || (UnitGetType(EventUnit()) == "OutragingHybrid") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "DisruptorPhased")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "RankUpCost30", 0);
    TriggerEnable(gt_GenerateMinerals, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnGenerateMineralsOff_Init () {
    gt_TurnGenerateMineralsOff = TriggerCreate("gt_TurnGenerateMineralsOff_Func");
    TriggerAddEventUnitDied(gt_TurnGenerateMineralsOff, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GenerateMinerals
//--------------------------------------------------------------------------------------------------
bool gt_GenerateMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB5F6B0DC_ae = 6;
    int autoB5F6B0DC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB5F6B0DC_var = 1;
    for ( ; autoB5F6B0DC_var <= autoB5F6B0DC_ae; autoB5F6B0DC_var += 1 ) {
        PlayerModifyPropertyInt(autoB5F6B0DC_var, c_playerPropMinerals, c_playerPropOperAdd, gv_mineralResource);
        PlayerModifyPropertyInt(autoB5F6B0DC_var, c_playerPropVespene, c_playerPropOperAdd, gv_vespeneResource);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenerateMinerals_Init () {
    gt_GenerateMinerals = TriggerCreate("gt_GenerateMinerals_Func");
    TriggerEnable(gt_GenerateMinerals, false);
    TriggerAddEventTimePeriodic(gt_GenerateMinerals, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnHybrid
//--------------------------------------------------------------------------------------------------
bool gt_SpawnHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "HybridDestroyer", 0, EventPlayer(), PointFromId(2061199121), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "InvulnerableSpawnTime", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnHybrid_Init () {
    gt_SpawnHybrid = TriggerCreate("gt_SpawnHybrid_Func");
    TriggerAddEventChatMessage(gt_SpawnHybrid, c_playerAny, "-Hybrid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfEnergyHeal
//--------------------------------------------------------------------------------------------------
bool gt_SelfEnergyHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "RagingHybrid") || (UnitGetType(EventUnit()) == "OutragingHybrid")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (EventUnitSpentVitalAmount() * gv_energyHealMultiplier[UnitGetOwner(EventUnit())])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfEnergyHeal_Init () {
    gt_SelfEnergyHeal = TriggerCreate("gt_SelfEnergyHeal_Func");
    TriggerAddEventUnitSpendVital(gt_SelfEnergyHeal, null, c_unitVitalEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpecStatsKeneticRatio
//--------------------------------------------------------------------------------------------------
bool gt_SpecStatsKeneticRatio_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SpecialStats1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_energyHealMultiplier[EventPlayer()] += 0.5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecStatsKeneticRatio_Init () {
    gt_SpecStatsKeneticRatio = TriggerCreate("gt_SpecStatsKeneticRatio_Func");
    TriggerAddEventUpgradeLevelChanged(gt_SpecStatsKeneticRatio, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CriticalStrikeNumbers
//--------------------------------------------------------------------------------------------------
bool gt_CriticalStrikeNumbers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_baseDamage;
    fixed lv_critDamage;
    fixed lv_fullDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_baseDamage = UnitWeaponDamage(EventUnitDamageSourceUnit(), 1, c_unitAttributeNone, false);
    lv_critDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "RankedCriticalStrikeDamage", "Amount", EventUnitDamageSourcePlayer()));
    lv_fullDamage = (lv_baseDamage + lv_critDamage);

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/210C0360"), 20, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(99.22, 91.76, 0.78));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CriticalStrikeNumbers_Init () {
    gt_CriticalStrikeNumbers = TriggerCreate("gt_CriticalStrikeNumbers_Func");
    TriggerAddEventUnitDamaged(gt_CriticalStrikeNumbers, null, c_unitDamageTypeAny, c_unitDamageEither, "RankedCriticalStrikeDamage");
    TriggerAddEventUnitDamaged(gt_CriticalStrikeNumbers, null, c_unitDamageTypeAny, c_unitDamageEither, "RankedCriticalStrikeDamage50");
    TriggerAddEventUnitDamaged(gt_CriticalStrikeNumbers, null, c_unitDamageTypeAny, c_unitDamageEither, "RankedCriticalStrikeDamage100");
    TriggerAddEventUnitDamaged(gt_CriticalStrikeNumbers, null, c_unitDamageTypeAny, c_unitDamageEither, "RankedCriticalStrikeDamage200");
    TriggerAddEventUnitDamaged(gt_CriticalStrikeNumbers, null, c_unitDamageTypeAny, c_unitDamageEither, "RankedCriticalStrikeDamage500");
    TriggerAddEventUnitDamaged(gt_CriticalStrikeNumbers, null, c_unitDamageTypeAny, c_unitDamageEither, "XRankedCriticalStrikeDamage500");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkadooshAbsorb
//--------------------------------------------------------------------------------------------------
bool gt_SkadooshAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "RagingHybrid") || (UnitGetType(EventUnit()) == "OutragingHybrid")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_skadooshDamageAbsorb[UnitGetOwner(EventUnit())] < 25000.0)) {
        gv_skadooshDamageAbsorb[UnitGetOwner(EventUnit())] += (EventUnitDamageAmount() * gv_skadooshMultiplier[UnitGetOwner(EventUnit())]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkadooshAbsorb_Init () {
    gt_SkadooshAbsorb = TriggerCreate("gt_SkadooshAbsorb_Func");
    TriggerAddEventUnitDamaged(gt_SkadooshAbsorb, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DealDamage
//--------------------------------------------------------------------------------------------------
bool gt_DealDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDA602662_g;
    int autoDA602662_u;
    unit autoDA602662_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDA602662_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(EventUnit()), gv_skadooshRadius[UnitGetOwner(EventUnit())], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDA602662_u = UnitGroupCount(autoDA602662_g, c_unitCountAll);
    for (;; autoDA602662_u -= 1) {
        autoDA602662_var = UnitGroupUnitFromEnd(autoDA602662_g, autoDA602662_u);
        if (autoDA602662_var == null) { break; }
        if (((UnitGetOwner(autoDA602662_var) == 9) || (UnitGetOwner(autoDA602662_var) == 10))) {
            UnitDamage(EventUnit(), "SkadooshHolder", autoDA602662_var, gv_skadooshDamageAbsorb[UnitGetOwner(EventUnit())]);
        }

    }
    gv_skadooshDamageAbsorb[UnitGetOwner(EventUnit())] = 0.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DealDamage_Init () {
    gt_DealDamage = TriggerCreate("gt_DealDamage_Func");
    TriggerAddEventUnitAbility(gt_DealDamage, null, AbilityCommand("Skadoosh", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageBonusSkadoosh
//--------------------------------------------------------------------------------------------------
bool gt_DamageBonusSkadoosh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "DamageBonus21"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_skadooshMultiplier[EventPlayer()] += 0.5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageBonusSkadoosh_Init () {
    gt_DamageBonusSkadoosh = TriggerCreate("gt_DamageBonusSkadoosh_Func");
    TriggerAddEventUpgradeLevelChanged(gt_DamageBonusSkadoosh, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpecStatsSkadooshRadius
//--------------------------------------------------------------------------------------------------
bool gt_SpecStatsSkadooshRadius_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SpecialHybrid1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_skadooshRadius[EventPlayer()] += 2.5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecStatsSkadooshRadius_Init () {
    gt_SpecStatsSkadooshRadius = TriggerCreate("gt_SpecStatsSkadooshRadius_Func");
    TriggerAddEventUpgradeLevelChanged(gt_SpecStatsSkadooshRadius, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourceAura
//--------------------------------------------------------------------------------------------------
bool gt_ResourceAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto61F5A5A2_ae = 6;
    int auto61F5A5A2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto61F5A5A2_var = 1;
    for ( ; auto61F5A5A2_var <= auto61F5A5A2_ae; auto61F5A5A2_var += 1 ) {
        PlayerModifyPropertyInt(auto61F5A5A2_var, c_playerPropMinerals, c_playerPropOperAdd, ((500 + (750 * TechTreeUpgradeCount(auto61F5A5A2_var, "SpecialStats1", c_techCountCompleteOnly))) + (100 * TechTreeUpgradeCount(auto61F5A5A2_var, "RavenIncomeAura20", c_techCountCompleteOnly))));
        PlayerModifyPropertyInt(auto61F5A5A2_var, c_playerPropVespene, c_playerPropOperAdd, ((50 + (75 * TechTreeUpgradeCount(auto61F5A5A2_var, "SpecialStats1", c_techCountCompleteOnly))) + (10 * TechTreeUpgradeCount(auto61F5A5A2_var, "RavenIncomeAura20", c_techCountCompleteOnly))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceAura_Init () {
    gt_ResourceAura = TriggerCreate("gt_ResourceAura_Func");
    TriggerAddEventPlayerEffectUsed(gt_ResourceAura, c_playerAny, "ResourceAuraSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurnToChicken
//--------------------------------------------------------------------------------------------------
bool gt_TurnToChicken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 0.010000");
    libNtve_gf_AttachModelToUnit(EventUnit(), "Chicken", "Ref_Center");
    Wait(UnitBehaviorDurationTotal(EventUnit(), "PauseApplyBehavior"), c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    if ((UnitIsAlive(EventUnit()) == true)) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 1.000000");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnToChicken_Init () {
    gt_TurnToChicken = TriggerCreate("gt_TurnToChicken_Func");
    TriggerAddEventUnitBehaviorChange(gt_TurnToChicken, null, "PauseApplyBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddIncomeAura
//--------------------------------------------------------------------------------------------------
bool gt_AddIncomeAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[1], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddIncomeAura_Init () {
    gt_AddIncomeAura = TriggerCreate("gt_AddIncomeAura_Func");
    TriggerEnable(gt_AddIncomeAura, false);
    TriggerAddEventUnitRangePoint(gt_AddIncomeAura, null, UnitGetPosition(gv_ravenUnit[1]), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddIncomeAura 2
//--------------------------------------------------------------------------------------------------
bool gt_AddIncomeAura2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[2], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddIncomeAura2_Init () {
    gt_AddIncomeAura2 = TriggerCreate("gt_AddIncomeAura2_Func");
    TriggerEnable(gt_AddIncomeAura2, false);
    TriggerAddEventUnitRangePoint(gt_AddIncomeAura2, null, UnitGetPosition(gv_ravenUnit[2]), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddIncomeAura 3
//--------------------------------------------------------------------------------------------------
bool gt_AddIncomeAura3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[3], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddIncomeAura3_Init () {
    gt_AddIncomeAura3 = TriggerCreate("gt_AddIncomeAura3_Func");
    TriggerEnable(gt_AddIncomeAura3, false);
    TriggerAddEventUnitRangePoint(gt_AddIncomeAura3, null, UnitGetPosition(gv_ravenUnit[3]), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddIncomeAura 4
//--------------------------------------------------------------------------------------------------
bool gt_AddIncomeAura4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[4], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddIncomeAura4_Init () {
    gt_AddIncomeAura4 = TriggerCreate("gt_AddIncomeAura4_Func");
    TriggerEnable(gt_AddIncomeAura4, false);
    TriggerAddEventUnitRangePoint(gt_AddIncomeAura4, null, UnitGetPosition(gv_ravenUnit[4]), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddIncomeAura 5
//--------------------------------------------------------------------------------------------------
bool gt_AddIncomeAura5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[5], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddIncomeAura5_Init () {
    gt_AddIncomeAura5 = TriggerCreate("gt_AddIncomeAura5_Func");
    TriggerEnable(gt_AddIncomeAura5, false);
    TriggerAddEventUnitRangePoint(gt_AddIncomeAura5, null, UnitGetPosition(gv_ravenUnit[5]), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddIncomeAura 6
//--------------------------------------------------------------------------------------------------
bool gt_AddIncomeAura6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[6], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddIncomeAura6_Init () {
    gt_AddIncomeAura6 = TriggerCreate("gt_AddIncomeAura6_Func");
    TriggerEnable(gt_AddIncomeAura6, false);
    TriggerAddEventUnitRangePoint(gt_AddIncomeAura6, null, UnitGetPosition(gv_ravenUnit[6]), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIncomeAura
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIncomeAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[1], -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIncomeAura_Init () {
    gt_RemoveIncomeAura = TriggerCreate("gt_RemoveIncomeAura_Func");
    TriggerEnable(gt_RemoveIncomeAura, false);
    TriggerAddEventUnitRangePoint(gt_RemoveIncomeAura, null, UnitGetPosition(gv_ravenUnit[1]), 15.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIncomeAura 2
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIncomeAura2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[2], -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIncomeAura2_Init () {
    gt_RemoveIncomeAura2 = TriggerCreate("gt_RemoveIncomeAura2_Func");
    TriggerEnable(gt_RemoveIncomeAura2, false);
    TriggerAddEventUnitRangePoint(gt_RemoveIncomeAura2, null, UnitGetPosition(gv_ravenUnit[2]), 15.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIncomeAura 3
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIncomeAura3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[3], -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIncomeAura3_Init () {
    gt_RemoveIncomeAura3 = TriggerCreate("gt_RemoveIncomeAura3_Func");
    TriggerEnable(gt_RemoveIncomeAura3, false);
    TriggerAddEventUnitRangePoint(gt_RemoveIncomeAura3, null, UnitGetPosition(gv_ravenUnit[3]), 15.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIncomeAura 4
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIncomeAura4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[4], -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIncomeAura4_Init () {
    gt_RemoveIncomeAura4 = TriggerCreate("gt_RemoveIncomeAura4_Func");
    TriggerEnable(gt_RemoveIncomeAura4, false);
    TriggerAddEventUnitRangePoint(gt_RemoveIncomeAura4, null, UnitGetPosition(gv_ravenUnit[4]), 15.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIncomeAura 5
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIncomeAura5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[5], -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIncomeAura5_Init () {
    gt_RemoveIncomeAura5 = TriggerCreate("gt_RemoveIncomeAura5_Func");
    TriggerEnable(gt_RemoveIncomeAura5, false);
    TriggerAddEventUnitRangePoint(gt_RemoveIncomeAura5, null, UnitGetPosition(gv_ravenUnit[5]), 15.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIncomeAura 6
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIncomeAura6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "IncomeAuraBehavior", gv_ravenUnit[6], -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIncomeAura6_Init () {
    gt_RemoveIncomeAura6 = TriggerCreate("gt_RemoveIncomeAura6_Func");
    TriggerEnable(gt_RemoveIncomeAura6, false);
    TriggerAddEventUnitRangePoint(gt_RemoveIncomeAura6, null, UnitGetPosition(gv_ravenUnit[6]), 15.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KillsBuff
//--------------------------------------------------------------------------------------------------
bool gt_KillsBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KerriganVoid"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Satisfaction", c_unitBehaviorCountAll);
    UnitBehaviorAdd(EventUnit(), "Satisfaction", EventUnit(), ((libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent) - 350) / 200));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillsBuff_Init () {
    gt_KillsBuff = TriggerCreate("gt_KillsBuff_Func");
    TriggerAddEventUnitProperty(gt_KillsBuff, null, c_unitPropKills);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -DMGCHECK
//--------------------------------------------------------------------------------------------------
bool gt_DMGCHECK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, FixedToText(gv_energeticTotalDamage[1], c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DMGCHECK_Init () {
    gt_DMGCHECK = TriggerCreate("gt_DMGCHECK_Func");
    TriggerEnable(gt_DMGCHECK, false);
    TriggerAddEventChatMessage(gt_DMGCHECK, c_playerAny, "-DMGCHECK", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KerriganDealsDamage
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDealsDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "KerriganVoid"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "KerriganEpilogue03QuantumRayDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "KerriganEpilogue03QuantumRayDamage2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_energeticTotalDamage[UnitGetOwner(EventUnitDamageSourceUnit())] < 10000.0)) {
        gv_energeticTotalDamage[UnitGetOwner(EventUnitDamageSourceUnit())] += EventUnitDamageAmount();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDealsDamage_Init () {
    gt_KerriganDealsDamage = TriggerCreate("gt_KerriganDealsDamage_Func");
    TriggerAddEventUnitDamaged(gt_KerriganDealsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReleaseEnergetic1
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReleaseEnergetic1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto70D6A3D2_g;
    int auto70D6A3D2_u;
    unit auto70D6A3D2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[1].lv_hero) == "KerriganVoid")) {
        TriggerEnable(gt_KerriganDealsDamage, false);
        auto70D6A3D2_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_playerInfo[1].lv_hero), (10.0 + (TechTreeUpgradeCount(1, "KerriganEnergeticRadius30", c_techCountCompleteOnly) * 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto70D6A3D2_u = UnitGroupCount(auto70D6A3D2_g, c_unitCountAll);
        for (;; auto70D6A3D2_u -= 1) {
            auto70D6A3D2_var = UnitGroupUnitFromEnd(auto70D6A3D2_g, auto70D6A3D2_u);
            if (auto70D6A3D2_var == null) { break; }
            if (((UnitGetOwner(auto70D6A3D2_var) == 9) || (UnitGetOwner(auto70D6A3D2_var) == 10))) {
                UnitDamage(gv_playerInfo[1].lv_hero, "EnergeticDamage", auto70D6A3D2_var, gv_energeticTotalDamage[UnitGetOwner(gv_playerInfo[1].lv_hero)]);
            }

        }
        TriggerEnable(gt_KerriganDealsDamage, true);
        gv_energeticTotalDamage[1] = 0.0;
        libNtve_gf_CreateModelAtPoint("Energetic", UnitGetPosition(gv_playerInfo[1].lv_hero));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReleaseEnergetic1_Init () {
    gt_PeriodicReleaseEnergetic1 = TriggerCreate("gt_PeriodicReleaseEnergetic1_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicReleaseEnergetic1, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReleaseEnergetic2
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReleaseEnergetic2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9742127E_g;
    int auto9742127E_u;
    unit auto9742127E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[2].lv_hero) == "KerriganVoid")) {
        TriggerEnable(gt_KerriganDealsDamage, false);
        auto9742127E_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_playerInfo[2].lv_hero), (10.0 + (TechTreeUpgradeCount(2, "KerriganEnergeticRadius30", c_techCountCompleteOnly) * 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto9742127E_u = UnitGroupCount(auto9742127E_g, c_unitCountAll);
        for (;; auto9742127E_u -= 1) {
            auto9742127E_var = UnitGroupUnitFromEnd(auto9742127E_g, auto9742127E_u);
            if (auto9742127E_var == null) { break; }
            if (((UnitGetOwner(auto9742127E_var) == 9) || (UnitGetOwner(auto9742127E_var) == 10))) {
                UnitDamage(gv_playerInfo[2].lv_hero, "EnergeticDamage", auto9742127E_var, gv_energeticTotalDamage[UnitGetOwner(gv_playerInfo[2].lv_hero)]);
            }

        }
        TriggerEnable(gt_KerriganDealsDamage, true);
        gv_energeticTotalDamage[2] = 0.0;
        libNtve_gf_CreateModelAtPoint("Energetic", UnitGetPosition(gv_playerInfo[2].lv_hero));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReleaseEnergetic2_Init () {
    gt_PeriodicReleaseEnergetic2 = TriggerCreate("gt_PeriodicReleaseEnergetic2_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicReleaseEnergetic2, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReleaseEnergetic3
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReleaseEnergetic3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4CCCF3EA_g;
    int auto4CCCF3EA_u;
    unit auto4CCCF3EA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[3].lv_hero) == "KerriganVoid")) {
        TriggerEnable(gt_KerriganDealsDamage, false);
        auto4CCCF3EA_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_playerInfo[3].lv_hero), (10.0 + (TechTreeUpgradeCount(3, "KerriganEnergeticRadius30", c_techCountCompleteOnly) * 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto4CCCF3EA_u = UnitGroupCount(auto4CCCF3EA_g, c_unitCountAll);
        for (;; auto4CCCF3EA_u -= 1) {
            auto4CCCF3EA_var = UnitGroupUnitFromEnd(auto4CCCF3EA_g, auto4CCCF3EA_u);
            if (auto4CCCF3EA_var == null) { break; }
            if (((UnitGetOwner(auto4CCCF3EA_var) == 9) || (UnitGetOwner(auto4CCCF3EA_var) == 10))) {
                UnitDamage(gv_playerInfo[3].lv_hero, "EnergeticDamage", auto4CCCF3EA_var, gv_energeticTotalDamage[UnitGetOwner(gv_playerInfo[3].lv_hero)]);
            }

        }
        TriggerEnable(gt_KerriganDealsDamage, true);
        gv_energeticTotalDamage[3] = 0.0;
        libNtve_gf_CreateModelAtPoint("Energetic", UnitGetPosition(gv_playerInfo[3].lv_hero));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReleaseEnergetic3_Init () {
    gt_PeriodicReleaseEnergetic3 = TriggerCreate("gt_PeriodicReleaseEnergetic3_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicReleaseEnergetic3, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReleaseEnergetic4
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReleaseEnergetic4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2A245236_g;
    int auto2A245236_u;
    unit auto2A245236_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[4].lv_hero) == "KerriganVoid")) {
        TriggerEnable(gt_KerriganDealsDamage, false);
        auto2A245236_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_playerInfo[4].lv_hero), (10.0 + (TechTreeUpgradeCount(4, "KerriganEnergeticRadius30", c_techCountCompleteOnly) * 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto2A245236_u = UnitGroupCount(auto2A245236_g, c_unitCountAll);
        for (;; auto2A245236_u -= 1) {
            auto2A245236_var = UnitGroupUnitFromEnd(auto2A245236_g, auto2A245236_u);
            if (auto2A245236_var == null) { break; }
            if (((UnitGetOwner(auto2A245236_var) == 9) || (UnitGetOwner(auto2A245236_var) == 10))) {
                UnitDamage(gv_playerInfo[4].lv_hero, "EnergeticDamage", auto2A245236_var, gv_energeticTotalDamage[UnitGetOwner(gv_playerInfo[4].lv_hero)]);
            }

        }
        TriggerEnable(gt_KerriganDealsDamage, true);
        gv_energeticTotalDamage[4] = 0.0;
        libNtve_gf_CreateModelAtPoint("Energetic", UnitGetPosition(gv_playerInfo[4].lv_hero));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReleaseEnergetic4_Init () {
    gt_PeriodicReleaseEnergetic4 = TriggerCreate("gt_PeriodicReleaseEnergetic4_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicReleaseEnergetic4, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReleaseEnergetic5
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReleaseEnergetic5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto74F1DD50_g;
    int auto74F1DD50_u;
    unit auto74F1DD50_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[5].lv_hero) == "KerriganVoid")) {
        TriggerEnable(gt_KerriganDealsDamage, false);
        auto74F1DD50_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_playerInfo[5].lv_hero), (10.0 + (TechTreeUpgradeCount(5, "KerriganEnergeticRadius30", c_techCountCompleteOnly) * 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto74F1DD50_u = UnitGroupCount(auto74F1DD50_g, c_unitCountAll);
        for (;; auto74F1DD50_u -= 1) {
            auto74F1DD50_var = UnitGroupUnitFromEnd(auto74F1DD50_g, auto74F1DD50_u);
            if (auto74F1DD50_var == null) { break; }
            if (((UnitGetOwner(auto74F1DD50_var) == 9) || (UnitGetOwner(auto74F1DD50_var) == 10))) {
                UnitDamage(gv_playerInfo[5].lv_hero, "EnergeticDamage", auto74F1DD50_var, gv_energeticTotalDamage[UnitGetOwner(gv_playerInfo[5].lv_hero)]);
            }

        }
        TriggerEnable(gt_KerriganDealsDamage, true);
        gv_energeticTotalDamage[5] = 0.0;
        libNtve_gf_CreateModelAtPoint("Energetic", UnitGetPosition(gv_playerInfo[5].lv_hero));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReleaseEnergetic5_Init () {
    gt_PeriodicReleaseEnergetic5 = TriggerCreate("gt_PeriodicReleaseEnergetic5_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicReleaseEnergetic5, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReleaseEnergetic6
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReleaseEnergetic6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9C07EB63_g;
    int auto9C07EB63_u;
    unit auto9C07EB63_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[6].lv_hero) == "KerriganVoid")) {
        TriggerEnable(gt_KerriganDealsDamage, false);
        auto9C07EB63_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_playerInfo[6].lv_hero), (10.0 + (TechTreeUpgradeCount(6, "KerriganEnergeticRadius30", c_techCountCompleteOnly) * 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto9C07EB63_u = UnitGroupCount(auto9C07EB63_g, c_unitCountAll);
        for (;; auto9C07EB63_u -= 1) {
            auto9C07EB63_var = UnitGroupUnitFromEnd(auto9C07EB63_g, auto9C07EB63_u);
            if (auto9C07EB63_var == null) { break; }
            if (((UnitGetOwner(auto9C07EB63_var) == 9) || (UnitGetOwner(auto9C07EB63_var) == 10))) {
                UnitDamage(gv_playerInfo[6].lv_hero, "EnergeticDamage", auto9C07EB63_var, gv_energeticTotalDamage[UnitGetOwner(gv_playerInfo[6].lv_hero)]);
            }

        }
        TriggerEnable(gt_KerriganDealsDamage, true);
        gv_energeticTotalDamage[6] = 0.0;
        libNtve_gf_CreateModelAtPoint("Energetic", UnitGetPosition(gv_playerInfo[6].lv_hero));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReleaseEnergetic6_Init () {
    gt_PeriodicReleaseEnergetic6 = TriggerCreate("gt_PeriodicReleaseEnergetic6_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicReleaseEnergetic6, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed
//--------------------------------------------------------------------------------------------------
bool gt_Speed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_speedMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_speedMultiplier = UnitGetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, c_unitPropCurrent);
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, FixedToText(lv_speedMultiplier, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Speed_Init () {
    gt_Speed = TriggerCreate("gt_Speed_Func");
    TriggerEnable(gt_Speed, false);
    TriggerAddEventUnitProperty(gt_Speed, null, c_unitPropMovementSpeed);
    TriggerAddEventUnitProperty(gt_Speed, null, c_unitPropMovementSpeedCurrent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UniqueHeroAccess1
//--------------------------------------------------------------------------------------------------
bool gt_UniqueHeroAccess1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/47DD8225"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UniqueHeroAccess1_Init () {
    gt_UniqueHeroAccess1 = TriggerCreate("gt_UniqueHeroAccess1_Func");
    TriggerAddEventDialogControl(gt_UniqueHeroAccess1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UniqueHeroAccess2
//--------------------------------------------------------------------------------------------------
bool gt_UniqueHeroAccess2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 2))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FED30D85"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UniqueHeroAccess2_Init () {
    gt_UniqueHeroAccess2 = TriggerCreate("gt_UniqueHeroAccess2_Func");
    TriggerAddEventDialogControl(gt_UniqueHeroAccess2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UniqueHeroAccess3
//--------------------------------------------------------------------------------------------------
bool gt_UniqueHeroAccess3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 3))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3C506B7B"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UniqueHeroAccess3_Init () {
    gt_UniqueHeroAccess3 = TriggerCreate("gt_UniqueHeroAccess3_Func");
    TriggerAddEventDialogControl(gt_UniqueHeroAccess3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UniqueHeroAccess4
//--------------------------------------------------------------------------------------------------
bool gt_UniqueHeroAccess4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 4))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9F7D64BD"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UniqueHeroAccess4_Init () {
    gt_UniqueHeroAccess4 = TriggerCreate("gt_UniqueHeroAccess4_Func");
    TriggerAddEventDialogControl(gt_UniqueHeroAccess4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UniqueHeroAccess5
//--------------------------------------------------------------------------------------------------
bool gt_UniqueHeroAccess5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 5))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CF86C9AE"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UniqueHeroAccess5_Init () {
    gt_UniqueHeroAccess5 = TriggerCreate("gt_UniqueHeroAccess5_Func");
    TriggerAddEventDialogControl(gt_UniqueHeroAccess5, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UniqueHeroAccess6
//--------------------------------------------------------------------------------------------------
bool gt_UniqueHeroAccess6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/931EF1D3"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UniqueHeroAccess6_Init () {
    gt_UniqueHeroAccess6 = TriggerCreate("gt_UniqueHeroAccess6_Func");
    TriggerAddEventDialogControl(gt_UniqueHeroAccess6, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VotingShow
//--------------------------------------------------------------------------------------------------
bool gt_VotingShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF880543D_ae = 6;
    int autoF880543D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateHideAll, true);
    TriggerEnable(gt_ActivateShowAll, true);
    autoF880543D_var = 1;
    for ( ; autoF880543D_var <= autoF880543D_ae; autoF880543D_var += 1 ) {
        if (((gv_didYouVote[autoF880543D_var] == false) || (gv_countVotingPlayers != PlayerGroupCount(gf_HumanPlayers())))) {
            if ((gv_cLInfatrySelected == true)) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF880543D_var), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF880543D_var), false);
            }
            else {
                if ((gv_cLTeamGameSelected == true)) {
                    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF880543D_var), true);
                    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF880543D_var), false);
                }
                else {
                    if ((gv_cLConstructorSelected == true)) {
                        DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF880543D_var), true);
                        DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF880543D_var), false);
                    }
                    else {
                        if ((gv_cLEvasiveSelected == true)) {
                            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF880543D_var), true);
                            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoF880543D_var), true);
                            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoF880543D_var), true);
                            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoF880543D_var), true);
                            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF880543D_var), true);
                            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF880543D_var), false);
                        }
                        else {
                            if ((gv_cLTortureSelected == true)) {
                                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF880543D_var), false);
                            }
                            else {
                                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF880543D_var), true);
                                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF880543D_var), false);
                            }
                        }
                    }
                }
            }
        }

    }
    Wait(gv_timeToSpawn, c_timeGame);
    TriggerEnable(gt_ZombieTKSWavesZombie, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VotingShow_Init () {
    gt_VotingShow = TriggerCreate("gt_VotingShow_Func");
    TriggerAddEventTimeElapsed(gt_VotingShow, 30.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapStartHideAll
//--------------------------------------------------------------------------------------------------
bool gt_MapStartHideAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_reaper[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_reaper2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_reaper[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_oracle[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_oracle2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_oracle[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hydralisk[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hydralisk[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hybrid[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hybrid2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hybrid[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_marine[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_marine2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_marine[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_voidRay[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_voidRay2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_voidRay[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_goliath[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_goliath2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_goliath[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_viking[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_viking2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_viking[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_carrier[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_carrier2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_carrier[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_bC[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_bC2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_bC[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_zealot[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_zealot2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_zealot[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_predator[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_predator2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_predator[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_immortal[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_immortal2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_immortal[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_firebat[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_firebat2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_firebat[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_thor[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_thor2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_thor[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_vulture[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_vulture2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_vulture[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_archon[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_archon2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_archon[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hellion[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hellion2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hellion[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_siegeTank[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_siegeTank[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_reaver[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_reaver2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_reaver[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_colossus[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_colossus2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_colossus[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_stalker[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_stalker2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_stalker[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_diamondBack[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_diamondBack[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_scout[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_scout2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_scout[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_cyclone[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_cyclone2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_cyclone[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_mothership[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_mothership2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_mothership[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ghost[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ghost2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ghost[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_spectre[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_spectre2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_spectre[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_wraith[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_wraith2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_wraith[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tempest[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tempest2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tempest[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_medic[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_medic2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_medic[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sentry[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sentry2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sentry[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_highTemplar[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_highTemplar[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_adept[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_adept2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_adept[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_raven[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_raven2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_raven[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_darkMage[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_darkMage2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_darkMage[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sCV[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sCV2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sCV[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_miner[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_miner2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_miner[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hercule[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hercule2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hercule[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_marauder[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_marauder2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_marauder[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_corsair[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_corsair2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_corsair[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapStartHideAll_Init () {
    gt_MapStartHideAll = TriggerCreate("gt_MapStartHideAll_Func");
    TriggerAddEventTimeElapsed(gt_MapStartHideAll, 0.02, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HideAll Creation
//--------------------------------------------------------------------------------------------------
bool gt_HideAllCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hideAll[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DA16278F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 75);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 275, -550);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hideAll[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 350);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_hideAll[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideAllCreation_Init () {
    gt_HideAllCreation = TriggerCreate("gt_HideAllCreation_Func");
    TriggerAddEventMapInit(gt_HideAllCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate HideAll
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHideAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hideAll[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHideAll_Init () {
    gt_ActivateHideAll = TriggerCreate("gt_ActivateHideAll_Func");
    TriggerEnable(gt_ActivateHideAll, false);
    TriggerAddEventDialogControl(gt_ActivateHideAll, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowAll Creation
//--------------------------------------------------------------------------------------------------
bool gt_ShowAllCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_showAll[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6A288E02"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 75);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 275, -550);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_showAll[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 350);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_showAll[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowAllCreation_Init () {
    gt_ShowAllCreation = TriggerCreate("gt_ShowAllCreation_Func");
    TriggerAddEventMapInit(gt_ShowAllCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate ShowAll
//--------------------------------------------------------------------------------------------------
bool gt_ActivateShowAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_showAll[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cLInfatrySelected == true)) {
        DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((gv_cLTeamGameSelected == true)) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            if ((gv_cLConstructorSelected == true)) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                if ((gv_cLEvasiveSelected == true)) {
                    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                    if ((gv_cLTortureSelected == true)) {
                        DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
                    }
                    else {
                        DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_assassinHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_assaultHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_tankHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_specialistHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_splashHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_supportHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_engineerHero[1], PlayerGroupSingle(EventPlayer()), 6);
                        DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSelectItem(gv_comboHero[1], PlayerGroupSingle(EventPlayer()), 5);
                        DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateShowAll_Init () {
    gt_ActivateShowAll = TriggerCreate("gt_ActivateShowAll_Func");
    TriggerEnable(gt_ActivateShowAll, false);
    TriggerAddEventDialogControl(gt_ActivateShowAll, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Menu Creation
//--------------------------------------------------------------------------------------------------
bool gt_HeroMenuCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_heroMenu[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0EF7FEB9"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1050, 900);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -75, -75);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/25284557"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_heroMenu[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_heroMenu[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroMenuCreation_Init () {
    gt_HeroMenuCreation = TriggerCreate("gt_HeroMenuCreation_Func");
    TriggerAddEventMapInit(gt_HeroMenuCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroIcon Creation
//--------------------------------------------------------------------------------------------------
bool gt_HeroIconCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Swarm_BoldSmall", PlayerGroupAll());
    gv_heroIcon[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 600);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 600, -75);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_heroIcon[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 380);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_heroIcon[1], c_anchorCenter, 0, -175);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroIconCreation_Init () {
    gt_HeroIconCreation = TriggerCreate("gt_HeroIconCreation_Func");
    TriggerAddEventMapInit(gt_HeroIconCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroIconReq Creation
//--------------------------------------------------------------------------------------------------
bool gt_HeroIconReqCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_heroIconReq[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 100);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 600, -485);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_heroIconReq[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 350);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroIconReq[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroIconReqCreation_Init () {
    gt_HeroIconReqCreation = TriggerCreate("gt_HeroIconReqCreation_Func");
    TriggerAddEventMapInit(gt_HeroIconReqCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSpawn Creation
//--------------------------------------------------------------------------------------------------
bool gt_HeroSpawnCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_heroSpawn[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/61C7DAC1"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 75);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 600, 250);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_heroSpawn[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 350);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_heroSpawn[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSpawnCreation_Init () {
    gt_HeroSpawnCreation = TriggerCreate("gt_HeroSpawnCreation_Func");
    TriggerAddEventMapInit(gt_HeroSpawnCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate HeroSpawn
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHeroSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!((gv_heroSpawn[1] == EventDialogControl()))) {
            return false;
        }

        if (!((GameGetMissionTime() > 3.5))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_builderKills >= gv_engineerReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_supportKills >= gv_supportReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_asassinKills >= gv_assassinReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_singleTargetKills >= gv_assaultReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_splashKills >= gv_splashReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_tankKills >= gv_tankReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_specialistKills >= gv_specialistReq[EventPlayer()]))) {
            return false;
        }

        if (!((gv_playerInfo[EventPlayer()].lv_highestWave >= gv_waveReq[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_unitType[EventPlayer()] == "SCV")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 20);
    }

    if ((gv_unitType[EventPlayer()] == "MinerMale")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 20);
    }

    if ((gv_unitType[EventPlayer()] == "HERC")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 18);
    }

    if ((gv_unitType[EventPlayer()] == "Marauder")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, FixedToInt(25.2));
    }

    if ((gv_unitType[EventPlayer()] == "CorsairMP")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, FixedToInt(23.0));
    }

    if ((gv_unitType[EventPlayer()] == "Oracle") && (gv_playerInfo[EventPlayer()].lv_unlockaHerotruefalse == false)) {
        return true;
    }

    if ((gv_unitType[EventPlayer()] == "HydraliskLurker") && (gv_playerInfo[EventPlayer()].lv_hydraliskYours == false)) {
        return true;
    }

    if (((gv_unitType[EventPlayer()] == "PrivateMarine") || (gv_unitType[EventPlayer()] == "CorporalMarine") || (gv_unitType[EventPlayer()] == "SergeantMarine") || (gv_unitType[EventPlayer()] == "SergeantMajorMarine") || (gv_unitType[EventPlayer()] == "TychusCommando") || (gv_unitType[EventPlayer()] == "LeutinetTychus") || (gv_unitType[EventPlayer()] == "CaptainTychus") || (gv_unitType[EventPlayer()] == "CommissionerTychus") || (gv_unitType[EventPlayer()] == "RaynorCommando") || (gv_unitType[EventPlayer()] == "GeneralRaynor") || (gv_unitType[EventPlayer()] == "PrivateGhost") || (gv_unitType[EventPlayer()] == "CorporalGhost") || (gv_unitType[EventPlayer()] == "SergeantGhost") || (gv_unitType[EventPlayer()] == "SergeantMajorGhost") || (gv_unitType[EventPlayer()] == "SergeantMajorNova") || (gv_unitType[EventPlayer()] == "LieutenentNova") || (gv_unitType[EventPlayer()] == "CaptainNova") || (gv_unitType[EventPlayer()] == "CommissionerNova") || (gv_unitType[EventPlayer()] == "CommissionerMarksman") || (gv_unitType[EventPlayer()] == "GeneralMarksman")) && (gv_playerInfo[EventPlayer()].lv_cLInfantry == false)) {
        return true;
    }

    if (((gv_unitType[EventPlayer()] == "PrivateReaper") || (gv_unitType[EventPlayer()] == "CorporalReaper") || (gv_unitType[EventPlayer()] == "SergeantReaper") || (gv_unitType[EventPlayer()] == "SergeantMajorReaper")) && (gv_playerInfo[EventPlayer()].lv_cLEvasive == false)) {
        return true;
    }

    if (((gv_unitType[EventPlayer()] == "RagingHybrid")) && ((gv_playerInfo[EventPlayer()].lv_cLTorture == false) || (gv_playerInfo[EventPlayer()].lv_cLTeamGame == false))) {
        return true;
    }

    if ((gv_cLEvasiveSelected == true) && (gv_unitType[EventPlayer()] == "Oracle") && (gv_only1Oracle != EventPlayer())) {
        return true;
    }

    if (((gv_unitType[EventPlayer()] == "PrivateStalker") || (gv_unitType[EventPlayer()] == "CorporalStalker") || (gv_unitType[EventPlayer()] == "SergeantStalker") || (gv_unitType[EventPlayer()] == "SergeantMajorStalker") || (gv_unitType[EventPlayer()] == "SergeantMajorInstigator") || (gv_unitType[EventPlayer()] == "LeutinetInstigator") || (gv_unitType[EventPlayer()] == "CaptainInstigator") || (gv_unitType[EventPlayer()] == "CommissionerInstigator") || (gv_unitType[EventPlayer()] == "Dragoon") || (gv_unitType[EventPlayer()] == "GeneralDragoon") || (gv_unitType[EventPlayer()] == "Vulture2") || (gv_unitType[EventPlayer()] == "CorporalVulture") || (gv_unitType[EventPlayer()] == "SergeantVulture") || (gv_unitType[EventPlayer()] == "SergeantMajorVulture") || (gv_unitType[EventPlayer()] == "SergeantMajorBiker") || (gv_unitType[EventPlayer()] == "LeutinetBiker") || (gv_unitType[EventPlayer()] == "CaptainBiker") || (gv_unitType[EventPlayer()] == "CommissionerBiker") || (gv_unitType[EventPlayer()] == "CommissionerScooter") || (gv_unitType[EventPlayer()] == "GeneralScooter")) && (gv_playerInfo[EventPlayer()].lv_cLConstructor == false)) {
        return true;
    }

    if (((gv_unitType[EventPlayer()] == "PrivateZealot") || (gv_unitType[EventPlayer()] == "CorporalZealot") || (gv_unitType[EventPlayer()] == "SergeantZealot") || (gv_unitType[EventPlayer()] == "SergeantMajorZealot") || (gv_unitType[EventPlayer()] == "ZealotShakuras") || (gv_unitType[EventPlayer()] == "LeutinetCenturion") || (gv_unitType[EventPlayer()] == "CaptainCenturion") || (gv_unitType[EventPlayer()] == "CommissionerCenturion") || (gv_unitType[EventPlayer()] == "CommissionerSentinel") || (gv_unitType[EventPlayer()] == "GeneralSentinel") || (gv_unitType[EventPlayer()] == "PrivateMedic") || (gv_unitType[EventPlayer()] == "CorporalMedic") || (gv_unitType[EventPlayer()] == "SergeantMedic") || (gv_unitType[EventPlayer()] == "SergeantMajorMedic") || (gv_unitType[EventPlayer()] == "SergeantMajorSurgeon") || (gv_unitType[EventPlayer()] == "LeutinetSurgeon2") || (gv_unitType[EventPlayer()] == "CaptainSurgeon") || (gv_unitType[EventPlayer()] == "CommissionerSurgeon") || (gv_unitType[EventPlayer()] == "CommissionerDoctor") || (gv_unitType[EventPlayer()] == "GeneralDoctor")) && (gv_playerInfo[EventPlayer()].lv_cLTeamGame == false)) {
        return true;
    }

    gv_notier4upgrade[EventPlayer()] = 2;
    if ((GameAttributeGameValue("2") == "0002")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_unitType[EventPlayer()], 0, EventPlayer(), PointFromId(7209161));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_unitType[EventPlayer()], 0, EventPlayer(), PointFromId(2061199121));
    }
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    if (true) {
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    }

    if ((gv_unitType[EventPlayer()] == "Raven")) {
        gv_ravenUnit[EventPlayer()] = UnitLastCreated();
    }

    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "InvulnerableSpawnTime", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    if ((GameAttributeGameValue("2") == "0002")) {
        CameraPan(EventPlayer(), PointFromId(7209161), 0.0, -1, 100.0, false);
    }
    else {
        CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/1E64F439") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/910E8631"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), false);
    if ((GameAttributeGameValue("2") == "0002") && (UnitGroupCount(gv_tEAM, c_unitCountAlive) > 1)) {
        TriggerEnable(gt_LastOneAlive, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHeroSpawn_Init () {
    gt_ActivateHeroSpawn = TriggerCreate("gt_ActivateHeroSpawn_Func");
    TriggerAddEventDialogControl(gt_ActivateHeroSpawn, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MaxXP
//--------------------------------------------------------------------------------------------------
bool gt_MaxXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6F70EC97_ae = 6;
    int auto6F70EC97_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F70EC97_var = 1;
    for ( ; auto6F70EC97_var <= auto6F70EC97_ae; auto6F70EC97_var += 1 ) {
        if ((UnitXPGetCurrentXP(gv_playerInfo[auto6F70EC97_var].lv_hero, "CheckMyLevel") > 499999.0)) {
            UnitXPGainEnable(gv_playerInfo[auto6F70EC97_var].lv_hero, null, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxXP_Init () {
    gt_MaxXP = TriggerCreate("gt_MaxXP_Func");
    TriggerAddEventTimePeriodic(gt_MaxXP, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SlowBuffApply
//--------------------------------------------------------------------------------------------------
bool gt_SlowBuffApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel") >= 8))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "IDontThinkSo", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlowBuffApply_Init () {
    gt_SlowBuffApply = TriggerCreate("gt_SlowBuffApply_Func");
    TriggerAddEventUnitCreated(gt_SlowBuffApply, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FairXP
//--------------------------------------------------------------------------------------------------
bool gt_FairXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_addXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 9) || (UnitGetOwner(EventUnit()) == 10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitInRegion(EventUnitDamageSourceUnit(), RegionFromId(23)) == true) || (libNtve_gf_UnitInRegion(EventUnitDamageSourceUnit(), RegionFromId(24)) == true) || (libNtve_gf_UnitInRegion(EventUnitDamageSourceUnit(), RegionFromId(27)) == true))) {
        lv_addXP = (EventUnitDamageAbsorbed() * 0.0002);
        UnitXPAddXP(EventUnitDamageSourceUnit(), "CheckMyLevel", lv_addXP);
    }
    else {
        lv_addXP = (EventUnitDamageAbsorbed() * 0.0002);
        lv_addXP /= 2.0;
        UnitXPAddXP(EventUnitDamageSourceUnit(), "CheckMyLevel", lv_addXP);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FairXP_Init () {
    gt_FairXP = TriggerCreate("gt_FairXP_Func");
    TriggerAddEventUnitDamaged(gt_FairXP, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreationApply
//--------------------------------------------------------------------------------------------------
bool gt_CreationApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitXPSetCurrentLevel(EventUnitCreatedUnit(), "CheckMyLevel", UnitXPGetCurrentLevel(EventUnit(), "CheckMyLevel"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreationApply_Init () {
    gt_CreationApply = TriggerCreate("gt_CreationApply_Func");
    TriggerAddEventUnitCreated(gt_CreationApply, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TinyxpToMain
//--------------------------------------------------------------------------------------------------
bool gt_TinyxpToMain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_tinyXpKeeper;

    // Automatic Variable Declarations
    unitgroup autoD3732304_g;
    int autoD3732304_u;
    unit autoD3732304_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD3732304_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD3732304_u = UnitGroupCount(autoD3732304_g, c_unitCountAll);
    for (;; autoD3732304_u -= 1) {
        autoD3732304_var = UnitGroupUnitFromEnd(autoD3732304_g, autoD3732304_u);
        if (autoD3732304_var == null) { break; }
        if (((UnitGetOwner(autoD3732304_var) == 1) || (UnitGetOwner(autoD3732304_var) == 2) || (UnitGetOwner(autoD3732304_var) == 3) || (UnitGetOwner(autoD3732304_var) == 4) || (UnitGetOwner(autoD3732304_var) == 5) || (UnitGetOwner(autoD3732304_var) == 6) || (UnitGetOwner(autoD3732304_var) == 7) || (UnitGetOwner(autoD3732304_var) == 8)) && ((UnitGetType(autoD3732304_var) == "MissileTurret") || (UnitGetType(autoD3732304_var) == "CommandCenter") || (UnitGetType(autoD3732304_var) == "AutomatedRefinery") || (UnitGetType(autoD3732304_var) == "Refinery") || (UnitGetType(autoD3732304_var) == "SentryGun") || (UnitGetType(autoD3732304_var) == "LabTurretUp") || (UnitGetType(autoD3732304_var) == "Barracks") || (UnitGetType(autoD3732304_var) == "BarracksTechLab") || (UnitGetType(autoD3732304_var) == "BarracksReactor") || (UnitGetType(autoD3732304_var) == "EngineeringBay") || (UnitGetType(autoD3732304_var) == "SupplyDepot") || (UnitGetType(autoD3732304_var) == "SupplyDepot2") || (UnitGetType(autoD3732304_var) == "SupplyDepotLowered2") || (UnitGetType(autoD3732304_var) == "SupplyDepotLowered") || (UnitGetType(autoD3732304_var) == "PoisonWard") || (UnitGetType(autoD3732304_var) == "Bunker") || (UnitGetType(autoD3732304_var) == "Ghost2") || (UnitGetType(autoD3732304_var) == "WarPig") || (UnitGetType(autoD3732304_var) == "MercReaper") || (UnitGetType(autoD3732304_var) == "ScoutBaby") || (UnitGetType(autoD3732304_var) == "SpiderMine") || (UnitGetType(autoD3732304_var) == "RoboticsBay") || (UnitGetType(autoD3732304_var) == "Pylon") || (UnitGetType(autoD3732304_var) == "Obelisk") || (UnitGetType(autoD3732304_var) == "XelNagaTower") || (UnitGetType(autoD3732304_var) == "DarkShrine") || (UnitGetType(autoD3732304_var) == "SpiderMineBurrowed") || (UnitGetType(autoD3732304_var) == "OracleStasisTrap") || (UnitGetType(autoD3732304_var) == "AutoTurret") || (UnitGetType(autoD3732304_var) == "FireWard") || (UnitGetType(autoD3732304_var) == "HotSRaptor") || (UnitGetType(autoD3732304_var) == "RoachCorpser") || (UnitGetType(autoD3732304_var) == "RoachVile") || (UnitGetType(autoD3732304_var) == "Roachling") || (UnitGetType(autoD3732304_var) == "NukeSiloNova") || (UnitGetType(autoD3732304_var) == "UmojanLabMicrobot") || (UnitGetType(autoD3732304_var) == "PhotonCannon") || (UnitGetType(autoD3732304_var) == "PhaseCannon") || (UnitGetType(autoD3732304_var) == "PurifierCannon") || (UnitGetType(autoD3732304_var) == "PowerCannon") || (UnitGetType(autoD3732304_var) == "Skeletalarcher") || (UnitGetType(autoD3732304_var) == "Skeleton") || (UnitGetType(autoD3732304_var) == "Interceptor") || (UnitGetType(autoD3732304_var) == "PointDefenseDrone") || (UnitGetType(autoD3732304_var) == "PrimalZergling") || (UnitGetType(autoD3732304_var) == "PrimalRoach") || (UnitGetType(autoD3732304_var) == "Baneling") || (UnitHasBehavior2(autoD3732304_var, "FakeColossus") == true))) {
            lv_tinyXpKeeper = (UnitXPGetCurrentXP(autoD3732304_var, "CheckMyLevel") - UnitXPGetXPForLevel(autoD3732304_var, "CheckMyLevel", UnitXPGetCurrentLevel(autoD3732304_var, "CheckMyLevel")));
            UnitXPAddXP(autoD3732304_var, "CheckMyLevel", (lv_tinyXpKeeper * -1.0));
            UnitXPAddXP(gv_playerInfo[UnitGetOwner(autoD3732304_var)].lv_hero, "CheckMyLevel", lv_tinyXpKeeper);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TinyxpToMain_Init () {
    gt_TinyxpToMain = TriggerCreate("gt_TinyxpToMain_Func");
    TriggerAddEventTimePeriodic(gt_TinyxpToMain, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MainLevelUpApply
//--------------------------------------------------------------------------------------------------
bool gt_MainLevelUpApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mainHeroLevelKeeper;

    // Automatic Variable Declarations
    unitgroup auto3AF0BE47_g;
    int auto3AF0BE47_u;
    unit auto3AF0BE47_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mainHeroLevelKeeper = UnitXPGetCurrentLevel(EventUnit(), "CheckMyLevel");
    auto3AF0BE47_g = UnitGroup(null, UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3AF0BE47_u = UnitGroupCount(auto3AF0BE47_g, c_unitCountAll);
    for (;; auto3AF0BE47_u -= 1) {
        auto3AF0BE47_var = UnitGroupUnitFromEnd(auto3AF0BE47_g, auto3AF0BE47_u);
        if (auto3AF0BE47_var == null) { break; }
        if (((UnitGetType(auto3AF0BE47_var) == "MissileTurret") || (UnitGetType(auto3AF0BE47_var) == "CommandCenter") || (UnitGetType(auto3AF0BE47_var) == "AutomatedRefinery") || (UnitGetType(auto3AF0BE47_var) == "Refinery") || (UnitGetType(auto3AF0BE47_var) == "SentryGun") || (UnitGetType(auto3AF0BE47_var) == "LabTurretUp") || (UnitGetType(auto3AF0BE47_var) == "Barracks") || (UnitGetType(auto3AF0BE47_var) == "BarracksTechLab") || (UnitGetType(auto3AF0BE47_var) == "BarracksReactor") || (UnitGetType(auto3AF0BE47_var) == "EngineeringBay") || (UnitGetType(auto3AF0BE47_var) == "SupplyDepot") || (UnitGetType(auto3AF0BE47_var) == "SupplyDepotLowered") || (UnitGetType(auto3AF0BE47_var) == "SupplyDepot2") || (UnitGetType(auto3AF0BE47_var) == "SupplyDepotLowered2") || (UnitGetType(auto3AF0BE47_var) == "Bunker") || (UnitGetType(auto3AF0BE47_var) == "Ghost2") || (UnitGetType(auto3AF0BE47_var) == "WarPig") || (UnitGetType(auto3AF0BE47_var) == "MercReaper") || (UnitGetType(auto3AF0BE47_var) == "ScoutBaby") || (UnitGetType(auto3AF0BE47_var) == "RoboticsBay") || (UnitGetType(auto3AF0BE47_var) == "Pylon") || (UnitGetType(auto3AF0BE47_var) == "Obelisk") || (UnitGetType(auto3AF0BE47_var) == "XelNagaTower") || (UnitGetType(auto3AF0BE47_var) == "DarkShrine") || (UnitGetType(auto3AF0BE47_var) == "SpiderMine") || (UnitGetType(auto3AF0BE47_var) == "SpiderMineBurrowed") || (UnitGetType(auto3AF0BE47_var) == "OracleStasisTrap") || (UnitGetType(auto3AF0BE47_var) == "PoisonWard") || (UnitGetType(auto3AF0BE47_var) == "FireWard") || (UnitGetType(auto3AF0BE47_var) == "AutoTurret") || (UnitGetType(auto3AF0BE47_var) == "HotSRaptor") || (UnitGetType(auto3AF0BE47_var) == "RoachCorpser") || (UnitGetType(auto3AF0BE47_var) == "RoachVile") || (UnitGetType(auto3AF0BE47_var) == "Roachling") || (UnitGetType(auto3AF0BE47_var) == "NukeSiloNova") || (UnitGetType(auto3AF0BE47_var) == "UmojanLabMicrobot") || (UnitGetType(auto3AF0BE47_var) == "PhotonCannon") || (UnitGetType(auto3AF0BE47_var) == "PhaseCannon") || (UnitGetType(auto3AF0BE47_var) == "PurifierCannon") || (UnitGetType(auto3AF0BE47_var) == "PowerCannon") || (UnitGetType(auto3AF0BE47_var) == "Skeletalarcher") || (UnitGetType(auto3AF0BE47_var) == "Skeleton") || (UnitGetType(auto3AF0BE47_var) == "Interceptor") || (UnitGetType(auto3AF0BE47_var) == "PointDefenseDrone") || (UnitGetType(auto3AF0BE47_var) == "PrimalZergling") || (UnitGetType(auto3AF0BE47_var) == "PrimalRoach") || (UnitGetType(auto3AF0BE47_var) == "Baneling") || (UnitHasBehavior2(auto3AF0BE47_var, "FakeColossus") == true))) {
            Wait(2.0, c_timeGame);
            UnitXPSetCurrentLevel(auto3AF0BE47_var, "CheckMyLevel", lv_mainHeroLevelKeeper);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainLevelUpApply_Init () {
    gt_MainLevelUpApply = TriggerCreate("gt_MainLevelUpApply_Func");
    TriggerAddEventUnitGainLevel(gt_MainLevelUpApply, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Alarak
//--------------------------------------------------------------------------------------------------
bool gt_Alarak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8683560") || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5301860") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-8484281") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "2-S2-1-3041423") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-2635639") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-5020231") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-2246204") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-8312977") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-9494728") || (PlayerHandle(EventPlayer()) == "1-S2-1-20537005") || (PlayerHandle(EventPlayer()) == "1-S2-1-2248125") || (PlayerHandle(EventPlayer()) == "1-S2-2-1165805") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "2-S2-1-8049212") || (PlayerHandle(EventPlayer()) == "1-S2-1-10201160") || (PlayerHandle(EventPlayer()) == "1-S2-2-943351") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "1-S2-1-11890541") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-11878431") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "1-S2-1-5286139") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000") || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-4020126") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-6981803") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "2-S2-1-7052885") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000") || (PlayerHandle(EventPlayer()) == "2-S2-1-1970070") || (PlayerHandle(EventPlayer()) == "2-S2-1-1393519") || (PlayerHandle(EventPlayer()) == "2-S2-1-9611309") || (PlayerHandle(EventPlayer()) == "2-S2-1-7074273") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-6859742") || (PlayerHandle(EventPlayer()) == "1-S2-1-10858029") || (PlayerHandle(EventPlayer()) == "2-S2-1-1832827") || (PlayerHandle(EventPlayer()) == "1-S2-1-8650620") || (PlayerHandle(EventPlayer()) == "2-S2-1-8792070") || (PlayerHandle(EventPlayer()) == "1-S2-1-8188925") || (PlayerHandle(EventPlayer()) == "1-S2-1-2372480") || (PlayerHandle(EventPlayer()) == "2-S2-1-9007330") || (PlayerHandle(EventPlayer()) == "2-S2-1-9132272") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498684") || (PlayerHandle(EventPlayer()) == "1-S2-1-2982839") || (PlayerHandle(EventPlayer()) == "1-S2-1-4044856") || (PlayerHandle(EventPlayer()) == "1-S2-1-7701331") || (PlayerHandle(EventPlayer()) == "1-S2-1-10341583") || (PlayerHandle(EventPlayer()) == "1-S2-1-10263047") || (PlayerHandle(EventPlayer()) == "1-S2-1-11726890") || (PlayerHandle(EventPlayer()) == "1-S2-2-416891") || (PlayerHandle(EventPlayer()) == "1-S2-1-1154174") || (PlayerHandle(EventPlayer()) == "1-S2-1-1039282") || (PlayerHandle(EventPlayer()) == "2-S2-1-9601421") || (PlayerHandle(EventPlayer()) == "1-S2-1-900271") || (PlayerHandle(EventPlayer()) == "1-S2-1-11847249") || (PlayerHandle(EventPlayer()) == "2-S2-1-9601320") || (PlayerHandle(EventPlayer()) == "1-S2-2-1574055") || (PlayerHandle(EventPlayer()) == "1-S2-1-11938267") || (PlayerHandle(EventPlayer()) == "1-S2-1-3087886") || (PlayerHandle(EventPlayer()) == "1-S2-1-1955961") || (PlayerHandle(EventPlayer()) == "2-S2-1-9619999") || (PlayerHandle(EventPlayer()) == "1-S2-1-9905677") || (PlayerHandle(EventPlayer()) == "1-S2-1-11585536") || (PlayerHandle(EventPlayer()) == "1-S2-1-11585536") || (PlayerHandle(EventPlayer()) == "1-S2-1-5202121") || (PlayerHandle(EventPlayer()) == "1-S2-1-7465362") || (PlayerHandle(EventPlayer()) == "1-S2-1-2852945") || (PlayerHandle(EventPlayer()) == "1-S2-1-810536") || (PlayerHandle(EventPlayer()) == "1-S2-1-10720643") || (PlayerHandle(EventPlayer()) == "1-S2-1-961484") || (PlayerHandle(EventPlayer()) == "1-S2-1-7836867") || (PlayerHandle(EventPlayer()) == "1-S2-1-10504960") || (PlayerHandle(EventPlayer()) == "1-S2-1-10719944") || (PlayerHandle(EventPlayer()) == "1-S2-1-4689372") || (PlayerHandle(EventPlayer()) == "1-S2-1-1052818") || (PlayerHandle(EventPlayer()) == "1-S2-1-940490") || (PlayerHandle(EventPlayer()) == "2-S2-1-7242946") || (PlayerHandle(EventPlayer()) == "1-S2-1-11946704") || (PlayerHandle(EventPlayer()) == "1-S2-1-2705312") || (PlayerHandle(EventPlayer()) == "1-S2-1-10180843") || (PlayerHandle(EventPlayer()) == "1-S2-1-4655406") || (PlayerHandle(EventPlayer()) == "1-S2-1-1557427") || (PlayerHandle(EventPlayer()) == "2-S2-1-4374990") || (PlayerHandle(EventPlayer()) == "1-S2-1-1283200") || (PlayerHandle(EventPlayer()) == "2-S2-1-8633128") || (PlayerHandle(EventPlayer()) == "1-S2-1-7390520") || (PlayerHandle(EventPlayer()) == "1-S2-1-11043425") || (PlayerHandle(EventPlayer()) == "1-S2-1-11876008") || (PlayerHandle(EventPlayer()) == "1-S2-1-8543311") || (PlayerHandle(EventPlayer()) == "1-S2-1-5294287") || (PlayerHandle(EventPlayer()) == "2-S2-1-3514208") || (PlayerHandle(EventPlayer()) == "2-S2-1-5941076") || (PlayerHandle(EventPlayer()) == "1-S2-1-420526") || (PlayerHandle(EventPlayer()) == "2-S2-1-9613040") || (PlayerHandle(EventPlayer()) == "1-S2-1-9696473") || (PlayerHandle(EventPlayer()) == "1-S2-1-11392552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11283512") || (PlayerHandle(EventPlayer()) == "1-S2-1-10320166") || (PlayerHandle(EventPlayer()) == "1-S2-1-961484") || (PlayerHandle(EventPlayer()) == "1-S2-1-11029619") || (PlayerHandle(EventPlayer()) == "1-S2-1-11239320") || (PlayerHandle(EventPlayer()) == "2-S2-1-6822711") || (PlayerHandle(EventPlayer()) == "1-S2-1-6446404") || (PlayerHandle(EventPlayer()) == "1-S2-1-11990483") || (PlayerHandle(EventPlayer()) == "2-S2-1-2215461") || (PlayerHandle(EventPlayer()) == "2-S2-1-3418605") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968679") || (PlayerHandle(EventPlayer()) == "2-S2-1-2215461") || (PlayerHandle(EventPlayer()) == "1-S2-1-10714888") || (PlayerHandle(EventPlayer()) == "1-S2-1-4217496") || (PlayerHandle(EventPlayer()) == "1-S2-1-11239216") || (PlayerHandle(EventPlayer()) == "1-S2-1-5151655") || (PlayerHandle(EventPlayer()) == "1-S2-1-4370786") || (PlayerHandle(EventPlayer()) == "2-S2-1-2661740") || (PlayerHandle(EventPlayer()) == "1-S2-1-2805713") || (PlayerHandle(EventPlayer()) == "1-S2-1-2895926") || (PlayerHandle(EventPlayer()) == "1-S2-1-11603316") || (PlayerHandle(EventPlayer()) == "2-S2-1-9337032") || (PlayerHandle(EventPlayer()) == "1-S2-1-4916448") || (PlayerHandle(EventPlayer()) == "1-S2-1-11631374") || (PlayerHandle(EventPlayer()) == "2-S2-1-4884397") || (PlayerHandle(EventPlayer()) == "2-S2-1-2076575") || (PlayerHandle(EventPlayer()) == "1-S2-1-11190737") || (PlayerHandle(EventPlayer()) == "2-S2-1-9005252") || (PlayerHandle(EventPlayer()) == "2-S2-1-2937027") || (PlayerHandle(EventPlayer()) == "2-S2-1-5874117") || (PlayerHandle(EventPlayer()) == "1-S2-1-6492426") || (PlayerHandle(EventPlayer()) == "1-S2-1-6491976") || (PlayerHandle(EventPlayer()) == "1-S2-1-7328924") || (PlayerHandle(EventPlayer()) == "1-S2-1-12003980") || (PlayerHandle(EventPlayer()) == "1-S2-1-581706") || (PlayerHandle(EventPlayer()) == "1-S2-1-11955425") || (PlayerHandle(EventPlayer()) == "1-S2-1-7846060") || (PlayerHandle(EventPlayer()) == "2-S2-1-6061305") || (PlayerHandle(EventPlayer()) == "1-S2-1-4386721") || (PlayerHandle(EventPlayer()) == "1-S2-1-11969269") || (PlayerHandle(EventPlayer()) == "2-S2-1-1022823") || (PlayerHandle(EventPlayer()) == "1-S2-1-5850354") || (PlayerHandle(EventPlayer()) == "1-S2-1-10340956") || (PlayerHandle(EventPlayer()) == "1-S2-1-7140198") || (PlayerHandle(EventPlayer()) == "1-S2-1-20657238") || (PlayerHandle(EventPlayer()) == "2-S2-2-1078713") || (PlayerHandle(EventPlayer()) == "1-S2-1-11055800") || (PlayerHandle(EventPlayer()) == "2-S2-1-7182481") || (PlayerHandle(EventPlayer()) == "1-S2-1-5767681") || (PlayerHandle(EventPlayer()) == "1-S2-1-6807503") || (PlayerHandle(EventPlayer()) == "1-S2-1-6808651") || (PlayerHandle(EventPlayer()) == "1-S2-1-5118440") || (PlayerHandle(EventPlayer()) == "2-S2-1-6915515") || (PlayerHandle(EventPlayer()) == "1-S2-1-2737082") || (PlayerHandle(EventPlayer()) == "1-S2-1-2360100") || (PlayerHandle(EventPlayer()) == "2-S2-1-8852877") || (PlayerHandle(EventPlayer()) == "1-S2-1-3891133") || (PlayerHandle(EventPlayer()) == "1-S2-1-7675539") || (PlayerHandle(EventPlayer()) == "1-S2-1-10927778") || (PlayerHandle(EventPlayer()) == "1-S2-1-320502") || (PlayerHandle(EventPlayer()) == "2-S2-1-286557") || (PlayerHandle(EventPlayer()) == "1-S2-1-8342837") || (PlayerHandle(EventPlayer()) == "1-S2-1-2840321") || (PlayerHandle(EventPlayer()) == "2-S2-1-6164921") || (PlayerHandle(EventPlayer()) == "1-S2-1-2198080") || (PlayerHandle(EventPlayer()) == "1-S2-2-657705") || (PlayerHandle(EventPlayer()) == "2-S2-1-8559852") || (PlayerHandle(EventPlayer()) == "1-S2-1-11955425") || (PlayerHandle(EventPlayer()) == "1-S2-1-4303679") || (PlayerHandle(EventPlayer()) == "2-S2-1-5279695") || (PlayerHandle(EventPlayer()) == "1-S2-1-3775858") || (PlayerHandle(EventPlayer()) == "1-S2-1-8200499") || (PlayerHandle(EventPlayer()) == "1-S2-1-8679606") || (PlayerHandle(EventPlayer()) == "1-S2-1-2293671") || (PlayerHandle(EventPlayer()) == "1-S2-1-2978872") || (PlayerHandle(EventPlayer()) == "1-S2-1-10420511") || (PlayerHandle(EventPlayer()) == "1-S2-1-10420006") || (PlayerHandle(EventPlayer()) == "1-S2-1-4303697") || (PlayerHandle(EventPlayer()) == "1-S2-1-4422546") || (PlayerHandle(EventPlayer()) == "2-S2-1-329807") || (PlayerHandle(EventPlayer()) == "1-S2-1-5158354") || (PlayerHandle(EventPlayer()) == "2-S2-1-4477141") || (PlayerHandle(EventPlayer()) == "1-S2-1-8148081") || (PlayerHandle(EventPlayer()) == "1-S2-1-8601429") || (PlayerHandle(EventPlayer()) == "1-S2-1-12006843") || (PlayerHandle(EventPlayer()) == "1-S2-1-9977361") || (PlayerHandle(EventPlayer()) == "1-S2-1-3750328") || (PlayerHandle(EventPlayer()) == "1-S2-1-6332165") || (PlayerHandle(EventPlayer()) == "1-S2-1-4583644") || (PlayerHandle(EventPlayer()) == "1-S2-1-12006843") || (PlayerHandle(EventPlayer()) == "1-S2-1-6961772") || (PlayerHandle(EventPlayer()) == "1-S2-1-4043645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10415082") || (PlayerHandle(EventPlayer()) == "1-S2-1-8184955") || (PlayerHandle(EventPlayer()) == "1-S2-1-3375173") || (PlayerHandle(EventPlayer()) == "1-S2-1-771230") || (PlayerHandle(EventPlayer()) == "1-S2-1-6076614") || (PlayerHandle(EventPlayer()) == "1-S2-1-4128748") || (PlayerHandle(EventPlayer()) == "1-S2-1-1439572") || (PlayerHandle(EventPlayer()) == "1-S2-1-1165489") || (PlayerHandle(EventPlayer()) == "2-S2-1-9417806") || (PlayerHandle(EventPlayer()) == "1-S2-1-8446311") || (PlayerHandle(EventPlayer()) == "1-S2-1-4943730") || (PlayerHandle(EventPlayer()) == "1-S2-1-7709692") || (PlayerHandle(EventPlayer()) == "1-S2-1-11257418") || (PlayerHandle(EventPlayer()) == "1-S2-1-3933250") || (PlayerHandle(EventPlayer()) == "2-S2-1-8985079") || (PlayerHandle(EventPlayer()) == "2-S2-1-7460936") || (PlayerHandle(EventPlayer()) == "1-S2-1-11619411") || (PlayerHandle(EventPlayer()) == "2-S2-1-8254588") || (PlayerHandle(EventPlayer()) == "2-S2-1-3529853") || (PlayerHandle(EventPlayer()) == "2-S2-1-3097624") || (PlayerHandle(EventPlayer()) == "2-S2-1-4983508") || (PlayerHandle(EventPlayer()) == "1-S2-1-10192588") || (PlayerHandle(EventPlayer()) == "1-S2-1-1863749") || (PlayerHandle(EventPlayer()) == "1-S2-1-10970201") || (PlayerHandle(EventPlayer()) == "2-S2-1-1035586") || (PlayerHandle(EventPlayer()) == "1-S2-1-3058769") || (PlayerHandle(EventPlayer()) == "1-S2-1-10804052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6299606") || (PlayerHandle(EventPlayer()) == "1-S2-1-6355706") || (PlayerHandle(EventPlayer()) == "2-S2-2-1736521") || (PlayerHandle(EventPlayer()) == "1-S2-1-11050065") || (PlayerHandle(EventPlayer()) == "1-S2-1-8221475") || (PlayerHandle(EventPlayer()) == "1-S2-1-5940512") || (PlayerHandle(EventPlayer()) == "2-S2-1-7206039") || (PlayerHandle(EventPlayer()) == "2-S2-1-7700957") || (PlayerHandle(EventPlayer()) == "2-S2-1-8345060") || (PlayerHandle(EventPlayer()) == "1-S2-1-8508070") || (PlayerHandle(EventPlayer()) == "2-S2-1-4419671") || (PlayerHandle(EventPlayer()) == "2-S2-1-7490596") || (PlayerHandle(EventPlayer()) == "1-S2-1-10752610") || (PlayerHandle(EventPlayer()) == "1-S2-1-12073157") || (PlayerHandle(EventPlayer()) == "2-S2-1-7369062") || (PlayerHandle(EventPlayer()) == "1-S2-1-2187598") || (PlayerHandle(EventPlayer()) == "1-S2-1-5737200") || (PlayerHandle(EventPlayer()) == "2-S2-1-7494527") || (PlayerHandle(EventPlayer()) == "1-S2-1-6798649") || (PlayerHandle(EventPlayer()) == "2-S2-1-7704315") || (PlayerHandle(EventPlayer()) == "1-S2-1-6162079") || (PlayerHandle(EventPlayer()) == "1-S2-1-5380450") || (PlayerHandle(EventPlayer()) == "1-S2-1-12075321") || (PlayerHandle(EventPlayer()) == "2-S2-1-3531906") || (PlayerHandle(EventPlayer()) == "2-S2-1-9608188") || (PlayerHandle(EventPlayer()) == "1-S2-1-8648382") || (PlayerHandle(EventPlayer()) == "2-S2-1-4550907") || (PlayerHandle(EventPlayer()) == "1-S2-1-546780") || (PlayerHandle(EventPlayer()) == "1-S2-1-5952274") || (PlayerHandle(EventPlayer()) == "1-S2-1-5368507") || (PlayerHandle(EventPlayer()) == "2-S2-1-2754895") || (PlayerHandle(EventPlayer()) == "1-S2-1-11333398") || (PlayerHandle(EventPlayer()) == "1-S2-1-1352328") || (PlayerHandle(EventPlayer()) == "1-S2-1-10171442") || (PlayerHandle(EventPlayer()) == "2-S2-1-8891883") || (PlayerHandle(EventPlayer()) == "1-S2-1-2310625") || (PlayerHandle(EventPlayer()) == "1-S2-1-11333398") || (PlayerHandle(EventPlayer()) == "1-S2-1-10171442") || (PlayerHandle(EventPlayer()) == "1-S2-1-3470914") || (PlayerHandle(EventPlayer()) == "2-S2-1-7950500") || (PlayerHandle(EventPlayer()) == "1-S2-1-1714817") || (PlayerHandle(EventPlayer()) == "1-S2-2-1287697") || (PlayerHandle(EventPlayer()) == "2-S2-1-2190523")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AlarakChampion", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/70D182D8") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/14077D1D"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alarak_Init () {
    gt_Alarak = TriggerCreate("gt_Alarak_Func");
    TriggerEnable(gt_Alarak, false);
    TriggerAddEventChatMessage(gt_Alarak, c_playerAny, "-Alarak", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Artanis
//--------------------------------------------------------------------------------------------------
bool gt_Artanis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8683560") || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-4020126") || (PlayerHandle(EventPlayer()) == "1-S2-1-6952436") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-7841566") || (PlayerHandle(EventPlayer()) == "1-S2-1-832621") || (PlayerHandle(EventPlayer()) == "1-S2-1-4031856") || (PlayerHandle(EventPlayer()) == "1-S2-1-6164044") || (PlayerHandle(EventPlayer()) == "1-S2-1-2778402") || (PlayerHandle(EventPlayer()) == "1-S2-1-8101783") || (PlayerHandle(EventPlayer()) == "1-S2-1-20522087") || (PlayerHandle(EventPlayer()) == "2-S2-1-4141453") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "1-S2-1-3432323") || (PlayerHandle(EventPlayer()) == "1-S2-1-3372977") || (PlayerHandle(EventPlayer()) == "1-S2-1-7829099") || (PlayerHandle(EventPlayer()) == "1-S2-1-3137989") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390") || (PlayerHandle(EventPlayer()) == "1-S2-1-2581234") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-5249332") || (PlayerHandle(EventPlayer()) == "1-S2-1-1958411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10043569") || (PlayerHandle(EventPlayer()) == "1-S2-1-3203273") || (PlayerHandle(EventPlayer()) == "1-S2-1-9889809") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-570628") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-7496106") || (PlayerHandle(EventPlayer()) == "2-S2-1-6981803") || (PlayerHandle(EventPlayer()) == "1-S2-1-6016170") || (PlayerHandle(EventPlayer()) == "1-S2-1-6820009") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "2-S2-1-3653061") || (PlayerHandle(EventPlayer()) == "2-S2-1-2918081") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-540364") || (PlayerHandle(EventPlayer()) == "2-S2-1-4214401") || (PlayerHandle(EventPlayer()) == "2-S2-1-3830789") || (PlayerHandle(EventPlayer()) == "1-S2-1-5742637") || (PlayerHandle(EventPlayer()) == "1-S2-1-579952") || (PlayerHandle(EventPlayer()) == "1-S2-1-4349127") || (PlayerHandle(EventPlayer()) == "1-S2-1-10460271") || (PlayerHandle(EventPlayer()) == "1-S2-1-3674444") || (PlayerHandle(EventPlayer()) == "2-S2-1-8068401") || (PlayerHandle(EventPlayer()) == "1-S2-1-11754659") || (PlayerHandle(EventPlayer()) == "2-S2-1-4700948") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-6204038") || (PlayerHandle(EventPlayer()) == "1-S2-1-1634052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6983193") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-7931469") || (PlayerHandle(EventPlayer()) == "1-S2-1-5409171") || (PlayerHandle(EventPlayer()) == "1-S2-1-2199781") || (PlayerHandle(EventPlayer()) == "1-S2-1-4549552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11724403") || (PlayerHandle(EventPlayer()) == "2-S2-1-253587") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-304694") || (PlayerHandle(EventPlayer()) == "1-S2-1-2666085") || (PlayerHandle(EventPlayer()) == "2-S2-1-6183516") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-2093161") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-7501221") || (PlayerHandle(EventPlayer()) == "1-S2-1-746971") || (PlayerHandle(EventPlayer()) == "1-S2-1-1353190") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "2-S2-1-3753436") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "2-S2-1-9510441") || (PlayerHandle(EventPlayer()) == "1-S2-1-3127050") || (PlayerHandle(EventPlayer()) == "1-S2-1-4920636") || (PlayerHandle(EventPlayer()) == "2-S2-1-4653351") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "1-S2-1-5505699") || (PlayerHandle(EventPlayer()) == "1-S2-1-1692275") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078057") || (PlayerHandle(EventPlayer()) == "2-S2-1-2600469") || (PlayerHandle(EventPlayer()) == "1-S2-1-6532962") || (PlayerHandle(EventPlayer()) == "2-S2-1-7533401") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-11765604") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "2-S2-1-7463625") || (PlayerHandle(EventPlayer()) == "2-S2-1-1084767") || (PlayerHandle(EventPlayer()) == "2-S2-1-2180243") || (PlayerHandle(EventPlayer()) == "2-S2-1-9533775") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-5476922") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "1-S2-1-11216593") || (PlayerHandle(EventPlayer()) == "2-S2-1-4077068") || (PlayerHandle(EventPlayer()) == "1-S2-1-2911095") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-6286203") || (PlayerHandle(EventPlayer()) == "2-S2-1-5396823") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "2-S2-1-3374557") || (PlayerHandle(EventPlayer()) == "2-S2-1-5839380") || (PlayerHandle(EventPlayer()) == "1-S2-1-11659661") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-11830787") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-3699657") || (PlayerHandle(EventPlayer()) == "1-S2-1-4743983") || (PlayerHandle(EventPlayer()) == "1-S2-1-8694181") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-5878160") || (PlayerHandle(EventPlayer()) == "2-S2-1-8027489") || (PlayerHandle(EventPlayer()) == "2-S2-1-7214901") || (PlayerHandle(EventPlayer()) == "2-S2-1-4987996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1696244") || (PlayerHandle(EventPlayer()) == "2-S2-1-7052885") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "2-S2-1-3608266") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2485442") || (PlayerHandle(EventPlayer()) == "1-S2-1-8559632") || (PlayerHandle(EventPlayer()) == "1-S2-1-6074494") || (PlayerHandle(EventPlayer()) == "2-S2-1-8247133") || (PlayerHandle(EventPlayer()) == "2-S2-1-2941878") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-435541") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3332712") || (PlayerHandle(EventPlayer()) == "1-S2-1-655524") || (PlayerHandle(EventPlayer()) == "1-S2-1-10304883") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000") || (PlayerHandle(EventPlayer()) == "2-S2-1-1970070") || (PlayerHandle(EventPlayer()) == "2-S2-1-1393519") || (PlayerHandle(EventPlayer()) == "2-S2-1-9611309") || (PlayerHandle(EventPlayer()) == "2-S2-1-7074273") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "2-S2-1-6859742") || (PlayerHandle(EventPlayer()) == "1-S2-1-10858029") || (PlayerHandle(EventPlayer()) == "2-S2-1-1832827") || (PlayerHandle(EventPlayer()) == "1-S2-1-8650620") || (PlayerHandle(EventPlayer()) == "2-S2-1-8792070") || (PlayerHandle(EventPlayer()) == "1-S2-1-10858029") || (PlayerHandle(EventPlayer()) == "1-S2-1-8188925") || (PlayerHandle(EventPlayer()) == "2-S2-1-9007330") || (PlayerHandle(EventPlayer()) == "2-S2-1-9132272") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498684") || (PlayerHandle(EventPlayer()) == "1-S2-1-2982839") || (PlayerHandle(EventPlayer()) == "1-S2-1-10504960") || (PlayerHandle(EventPlayer()) == "1-S2-1-10341583") || (PlayerHandle(EventPlayer()) == "1-S2-1-10263047") || (PlayerHandle(EventPlayer()) == "1-S2-1-11726890") || (PlayerHandle(EventPlayer()) == "1-S2-1-1154174") || (PlayerHandle(EventPlayer()) == "1-S2-1-1039282") || (PlayerHandle(EventPlayer()) == "2-S2-1-9601421") || (PlayerHandle(EventPlayer()) == "1-S2-1-900271") || (PlayerHandle(EventPlayer()) == "1-S2-1-11847249") || (PlayerHandle(EventPlayer()) == "2-S2-1-9601320") || (PlayerHandle(EventPlayer()) == "1-S2-2-1574055") || (PlayerHandle(EventPlayer()) == "1-S2-1-11938267") || (PlayerHandle(EventPlayer()) == "1-S2-1-9905677") || (PlayerHandle(EventPlayer()) == "1-S2-1-3087886") || (PlayerHandle(EventPlayer()) == "1-S2-1-1955961") || (PlayerHandle(EventPlayer()) == "2-S2-1-9619999") || (PlayerHandle(EventPlayer()) == "1-S2-1-5202121") || (PlayerHandle(EventPlayer()) == "1-S2-1-11692524") || (PlayerHandle(EventPlayer()) == "1-S2-1-7465362") || (PlayerHandle(EventPlayer()) == "1-S2-1-2852945") || (PlayerHandle(EventPlayer()) == "1-S2-1-810536") || (PlayerHandle(EventPlayer()) == "1-S2-1-7895603") || (PlayerHandle(EventPlayer()) == "1-S2-1-10720643") || (PlayerHandle(EventPlayer()) == "1-S2-1-961484") || (PlayerHandle(EventPlayer()) == "1-S2-1-10719944") || (PlayerHandle(EventPlayer()) == "1-S2-1-4689372") || (PlayerHandle(EventPlayer()) == "1-S2-1-1052818") || (PlayerHandle(EventPlayer()) == "2-S2-1-7242946") || (PlayerHandle(EventPlayer()) == "1-S2-1-11946704") || (PlayerHandle(EventPlayer()) == "1-S2-1-10180843") || (PlayerHandle(EventPlayer()) == "1-S2-1-1557427") || (PlayerHandle(EventPlayer()) == "2-S2-1-4374990") || (PlayerHandle(EventPlayer()) == "2-S2-1-8633128") || (PlayerHandle(EventPlayer()) == "1-S2-1-7390520") || (PlayerHandle(EventPlayer()) == "1-S2-1-11938908") || (PlayerHandle(EventPlayer()) == "1-S2-1-8543311") || (PlayerHandle(EventPlayer()) == "1-S2-1-5294287") || (PlayerHandle(EventPlayer()) == "2-S2-1-3514208") || (PlayerHandle(EventPlayer()) == "2-S2-1-5941076") || (PlayerHandle(EventPlayer()) == "1-S2-1-420526") || (PlayerHandle(EventPlayer()) == "2-S2-1-9613040") || (PlayerHandle(EventPlayer()) == "1-S2-1-9696473") || (PlayerHandle(EventPlayer()) == "1-S2-1-11392552") || (PlayerHandle(EventPlayer()) == "1-S2-1-11283512") || (PlayerHandle(EventPlayer()) == "1-S2-1-10320166") || (PlayerHandle(EventPlayer()) == "1-S2-1-961484") || (PlayerHandle(EventPlayer()) == "1-S2-1-11029619") || (PlayerHandle(EventPlayer()) == "1-S2-1-11239320") || (PlayerHandle(EventPlayer()) == "2-S2-1-6822711") || (PlayerHandle(EventPlayer()) == "2-S2-1-3418605") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968679") || (PlayerHandle(EventPlayer()) == "1-S2-1-10714888") || (PlayerHandle(EventPlayer()) == "1-S2-1-5737200") || (PlayerHandle(EventPlayer()) == "1-S2-1-4217496") || (PlayerHandle(EventPlayer()) == "1-S2-1-11239216") || (PlayerHandle(EventPlayer()) == "1-S2-1-5151655") || (PlayerHandle(EventPlayer()) == "1-S2-1-4370786") || (PlayerHandle(EventPlayer()) == "1-S2-1-2805713") || (PlayerHandle(EventPlayer()) == "1-S2-1-2895926") || (PlayerHandle(EventPlayer()) == "1-S2-1-11603316") || (PlayerHandle(EventPlayer()) == "2-S2-1-9337032") || (PlayerHandle(EventPlayer()) == "1-S2-1-4916448") || (PlayerHandle(EventPlayer()) == "1-S2-1-11631374") || (PlayerHandle(EventPlayer()) == "2-S2-1-4884397") || (PlayerHandle(EventPlayer()) == "2-S2-1-2076575") || (PlayerHandle(EventPlayer()) == "1-S2-1-11190737") || (PlayerHandle(EventPlayer()) == "2-S2-1-9005252") || (PlayerHandle(EventPlayer()) == "2-S2-1-2937027") || (PlayerHandle(EventPlayer()) == "2-S2-1-5874117") || (PlayerHandle(EventPlayer()) == "1-S2-1-6492426") || (PlayerHandle(EventPlayer()) == "1-S2-1-6491976") || (PlayerHandle(EventPlayer()) == "1-S2-1-7328924") || (PlayerHandle(EventPlayer()) == "1-S2-1-12003980") || (PlayerHandle(EventPlayer()) == "1-S2-1-581706") || (PlayerHandle(EventPlayer()) == "1-S2-1-11955425") || (PlayerHandle(EventPlayer()) == "1-S2-1-7846060") || (PlayerHandle(EventPlayer()) == "2-S2-1-6061305") || (PlayerHandle(EventPlayer()) == "1-S2-1-4386721") || (PlayerHandle(EventPlayer()) == "1-S2-1-11969269") || (PlayerHandle(EventPlayer()) == "2-S2-1-1022823") || (PlayerHandle(EventPlayer()) == "1-S2-1-10340956") || (PlayerHandle(EventPlayer()) == "1-S2-1-4304965") || (PlayerHandle(EventPlayer()) == "1-S2-1-7140198") || (PlayerHandle(EventPlayer()) == "1-S2-1-5767681") || (PlayerHandle(EventPlayer()) == "2-S2-2-1078713") || (PlayerHandle(EventPlayer()) == "1-S2-1-11055800") || (PlayerHandle(EventPlayer()) == "2-S2-1-6280744") || (PlayerHandle(EventPlayer()) == "1-S2-1-6808651") || (PlayerHandle(EventPlayer()) == "1-S2-1-5118440") || (PlayerHandle(EventPlayer()) == "2-S2-1-6915515") || (PlayerHandle(EventPlayer()) == "1-S2-1-2737082") || (PlayerHandle(EventPlayer()) == "1-S2-1-2360100") || (PlayerHandle(EventPlayer()) == "1-S2-1-10927778") || (PlayerHandle(EventPlayer()) == "1-S2-1-320502") || (PlayerHandle(EventPlayer()) == "2-S2-1-286557") || (PlayerHandle(EventPlayer()) == "1-S2-1-8342837") || (PlayerHandle(EventPlayer()) == "1-S2-1-2840321") || (PlayerHandle(EventPlayer()) == "2-S2-1-6164921") || (PlayerHandle(EventPlayer()) == "1-S2-2-657705") || (PlayerHandle(EventPlayer()) == "2-S2-1-8559852") || (PlayerHandle(EventPlayer()) == "1-S2-1-11955425") || (PlayerHandle(EventPlayer()) == "1-S2-1-4303679") || (PlayerHandle(EventPlayer()) == "2-S2-1-5279695") || (PlayerHandle(EventPlayer()) == "1-S2-1-3775858") || (PlayerHandle(EventPlayer()) == "1-S2-1-8200499") || (PlayerHandle(EventPlayer()) == "1-S2-1-8679606") || (PlayerHandle(EventPlayer()) == "1-S2-1-10410380") || (PlayerHandle(EventPlayer()) == "1-S2-1-12024407") || (PlayerHandle(EventPlayer()) == "1-S2-1-2293671") || (PlayerHandle(EventPlayer()) == "1-S2-1-2978872") || (PlayerHandle(EventPlayer()) == "1-S2-1-4303697") || (PlayerHandle(EventPlayer()) == "1-S2-1-4422546") || (PlayerHandle(EventPlayer()) == "2-S2-1-329807") || (PlayerHandle(EventPlayer()) == "1-S2-1-5158354") || (PlayerHandle(EventPlayer()) == "2-S2-1-4477141") || (PlayerHandle(EventPlayer()) == "1-S2-1-8601429") || (PlayerHandle(EventPlayer()) == "1-S2-1-12006843") || (PlayerHandle(EventPlayer()) == "1-S2-1-9977361") || (PlayerHandle(EventPlayer()) == "1-S2-1-3750328") || (PlayerHandle(EventPlayer()) == "1-S2-1-6332165") || (PlayerHandle(EventPlayer()) == "1-S2-1-4583644") || (PlayerHandle(EventPlayer()) == "1-S2-1-12006843") || (PlayerHandle(EventPlayer()) == "1-S2-1-6961772") || (PlayerHandle(EventPlayer()) == "1-S2-1-4043645") || (PlayerHandle(EventPlayer()) == "2-S2-1-1954985") || (PlayerHandle(EventPlayer()) == "1-S2-1-3375173") || (PlayerHandle(EventPlayer()) == "1-S2-1-4128748") || (PlayerHandle(EventPlayer()) == "1-S2-1-1439572") || (PlayerHandle(EventPlayer()) == "1-S2-1-1165489") || (PlayerHandle(EventPlayer()) == "2-S2-1-9417806") || (PlayerHandle(EventPlayer()) == "1-S2-1-4943730") || (PlayerHandle(EventPlayer()) == "1-S2-1-7709692") || (PlayerHandle(EventPlayer()) == "1-S2-1-3933250") || (PlayerHandle(EventPlayer()) == "2-S2-1-8254539") || (PlayerHandle(EventPlayer()) == "2-S2-1-3529853") || (PlayerHandle(EventPlayer()) == "2-S2-1-3097624") || (PlayerHandle(EventPlayer()) == "2-S2-1-4983508") || (PlayerHandle(EventPlayer()) == "1-S2-1-10192588") || (PlayerHandle(EventPlayer()) == "1-S2-1-1863749") || (PlayerHandle(EventPlayer()) == "1-S2-1-10970201") || (PlayerHandle(EventPlayer()) == "2-S2-1-1035586") || (PlayerHandle(EventPlayer()) == "1-S2-1-3058769") || (PlayerHandle(EventPlayer()) == "1-S2-1-10804052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6299606") || (PlayerHandle(EventPlayer()) == "2-S2-2-1736521") || (PlayerHandle(EventPlayer()) == "1-S2-1-11050065") || (PlayerHandle(EventPlayer()) == "1-S2-1-8221475") || (PlayerHandle(EventPlayer()) == "1-S2-1-5940512") || (PlayerHandle(EventPlayer()) == "2-S2-1-7206039") || (PlayerHandle(EventPlayer()) == "2-S2-1-7700957") || (PlayerHandle(EventPlayer()) == "1-S2-1-988121") || (PlayerHandle(EventPlayer()) == "2-S2-1-4419671") || (PlayerHandle(EventPlayer()) == "2-S2-1-7490596") || (PlayerHandle(EventPlayer()) == "1-S2-1-10752610") || (PlayerHandle(EventPlayer()) == "1-S2-1-8508070") || (PlayerHandle(EventPlayer()) == "1-S2-1-2187598") || (PlayerHandle(EventPlayer()) == "2-S2-1-7369062") || (PlayerHandle(EventPlayer()) == "2-S2-1-7494527") || (PlayerHandle(EventPlayer()) == "1-S2-1-6798649") || (PlayerHandle(EventPlayer()) == "2-S2-1-7704315") || (PlayerHandle(EventPlayer()) == "1-S2-1-6162079") || (PlayerHandle(EventPlayer()) == "1-S2-1-5380450") || (PlayerHandle(EventPlayer()) == "1-S2-1-10886173") || (PlayerHandle(EventPlayer()) == "1-S2-1-8648382") || (PlayerHandle(EventPlayer()) == "2-S2-1-4550907") || (PlayerHandle(EventPlayer()) == "1-S2-1-546780") || (PlayerHandle(EventPlayer()) == "1-S2-1-5952274") || (PlayerHandle(EventPlayer()) == "1-S2-1-5368507") || (PlayerHandle(EventPlayer()) == "2-S2-1-2754895") || (PlayerHandle(EventPlayer()) == "1-S2-1-11333398") || (PlayerHandle(EventPlayer()) == "1-S2-1-2854856") || (PlayerHandle(EventPlayer()) == "1-S2-1-916427") || (PlayerHandle(EventPlayer()) == "1-S2-1-2310625") || (PlayerHandle(EventPlayer()) == "1-S2-1-11333398") || (PlayerHandle(EventPlayer()) == "1-S2-1-10171442") || (PlayerHandle(EventPlayer()) == "1-S2-1-3470914") || (PlayerHandle(EventPlayer()) == "2-S2-1-7950500") || (PlayerHandle(EventPlayer()) == "1-S2-1-1714817") || (PlayerHandle(EventPlayer()) == "1-S2-2-1287697") || (PlayerHandle(EventPlayer()) == "2-S2-1-2190523")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtanisVoid", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/77782A88") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/E96832EC"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Artanis_Init () {
    gt_Artanis = TriggerCreate("gt_Artanis_Func");
    TriggerEnable(gt_Artanis, false);
    TriggerAddEventChatMessage(gt_Artanis, c_playerAny, "-Artanis", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_Kerrigan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-7836867") || (PlayerHandle(EventPlayer()) == "1-S2-1-10902943") || (PlayerHandle(EventPlayer()) == "1-S2-1-1108413") || (PlayerHandle(EventPlayer()) == "1-S2-1-10180843") || (PlayerHandle(EventPlayer()) == "1-S2-1-8683560") || (PlayerHandle(EventPlayer()) == "1-S2-1-6113000") || (PlayerHandle(EventPlayer()) == "1-S2-1-11319385") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "1-S2-1-3694099") || (PlayerHandle(EventPlayer()) == "1-S2-1-7465362") || (PlayerHandle(EventPlayer()) == "1-S2-1-1154174") || (PlayerHandle(EventPlayer()) == "2-S2-1-7599564") || (PlayerHandle(EventPlayer()) == "1-S2-1-11064982") || (PlayerHandle(EventPlayer()) == "1-S2-1-6668462") || (PlayerHandle(EventPlayer()) == "1-S2-1-7569487") || (PlayerHandle(EventPlayer()) == "2-S2-1-8377854") || (PlayerHandle(EventPlayer()) == "1-S2-1-5618645") || (PlayerHandle(EventPlayer()) == "1-S2-1-10720643") || (PlayerHandle(EventPlayer()) == "1-S2-1-11392289") || (PlayerHandle(EventPlayer()) == "1-S2-1-2888497") || (PlayerHandle(EventPlayer()) == "1-S2-1-10320166") || (PlayerHandle(EventPlayer()) == "1-S2-1-3636504") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331") || (PlayerHandle(EventPlayer()) == "1-S2-1-1386209") || (PlayerHandle(EventPlayer()) == "1-S2-1-1052818") || (PlayerHandle(EventPlayer()) == "1-S2-1-11283512") || (PlayerHandle(EventPlayer()) == "1-S2-1-9760626") || (PlayerHandle(EventPlayer()) == "1-S2-1-10776912") || (PlayerHandle(EventPlayer()) == "1-S2-1-5737200") || (PlayerHandle(EventPlayer()) == "1-S2-2-852202") || (PlayerHandle(EventPlayer()) == "1-S2-1-1047046") || (PlayerHandle(EventPlayer()) == "1-S2-1-10714888") || (PlayerHandle(EventPlayer()) == "1-S2-1-5151655") || (PlayerHandle(EventPlayer()) == "1-S2-1-2895926") || (PlayerHandle(EventPlayer()) == "1-S2-1-4370786") || (PlayerHandle(EventPlayer()) == "1-S2-1-5293967") || (PlayerHandle(EventPlayer()) == "1-S2-1-20317435") || (PlayerHandle(EventPlayer()) == "1-S2-1-11185947") || (PlayerHandle(EventPlayer()) == "1-S2-1-11603316") || (PlayerHandle(EventPlayer()) == "1-S2-1-4689372") || (PlayerHandle(EventPlayer()) == "1-S2-1-1955961") || (PlayerHandle(EventPlayer()) == "1-S2-1-10570642") || (PlayerHandle(EventPlayer()) == "1-S2-1-11631374") || (PlayerHandle(EventPlayer()) == "2-S2-1-4884397") || (PlayerHandle(EventPlayer()) == "2-S2-1-9337032") || (PlayerHandle(EventPlayer()) == "1-S2-1-6764679") || (PlayerHandle(EventPlayer()) == "2-S2-1-7242946") || (PlayerHandle(EventPlayer()) == "2-S2-1-1605702") || (PlayerHandle(EventPlayer()) == "1-S2-1-7390520") || (PlayerHandle(EventPlayer()) == "2-S2-1-5874117") || (PlayerHandle(EventPlayer()) == "1-S2-1-7328924") || (PlayerHandle(EventPlayer()) == "1-S2-1-2397804") || (PlayerHandle(EventPlayer()) == "2-S2-1-9613040") || (PlayerHandle(EventPlayer()) == "2-S2-1-5132083") || (PlayerHandle(EventPlayer()) == "1-S2-1-7876067") || (PlayerHandle(EventPlayer()) == "1-S2-1-5294287") || (PlayerHandle(EventPlayer()) == "1-S2-1-1916563") || (PlayerHandle(EventPlayer()) == "1-S2-1-12003980") || (PlayerHandle(EventPlayer()) == "2-S2-1-7873999") || (PlayerHandle(EventPlayer()) == "1-S2-1-5952991") || (PlayerHandle(EventPlayer()) == "2-S2-1-3418605") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968679") || (PlayerHandle(EventPlayer()) == "1-S2-1-581706") || (PlayerHandle(EventPlayer()) == "1-S2-1-7440038") || (PlayerHandle(EventPlayer()) == "2-S2-1-3645935") || (PlayerHandle(EventPlayer()) == "2-S2-1-1176667") || (PlayerHandle(EventPlayer()) == "2-S2-1-6061305") || (PlayerHandle(EventPlayer()) == "2-S2-1-9513067") || (PlayerHandle(EventPlayer()) == "2-S2-1-8792070") || (PlayerHandle(EventPlayer()) == "1-S2-1-11969269") || (PlayerHandle(EventPlayer()) == "2-S2-1-1022823") || (PlayerHandle(EventPlayer()) == "2-S2-1-6859742") || (PlayerHandle(EventPlayer()) == "2-S2-1-6822711") || (PlayerHandle(EventPlayer()) == "1-S2-1-10340956") || (PlayerHandle(EventPlayer()) == "1-S2-1-11029619") || (PlayerHandle(EventPlayer()) == "1-S2-1-10408644") || (PlayerHandle(EventPlayer()) == "1-S2-1-8498631") || (PlayerHandle(EventPlayer()) == "1-S2-1-4205478") || (PlayerHandle(EventPlayer()) == "1-S2-1-7968798") || (PlayerHandle(EventPlayer()) == "1-S2-1-7084837") || (PlayerHandle(EventPlayer()) == "2-S2-1-6389965") || (PlayerHandle(EventPlayer()) == "1-S2-1-11898921") || (PlayerHandle(EventPlayer()) == "2-S2-1-2661740") || (PlayerHandle(EventPlayer()) == "1-S2-1-5767681") || (PlayerHandle(EventPlayer()) == "1-S2-1-1078397") || (PlayerHandle(EventPlayer()) == "1-S2-1-1039282") || (PlayerHandle(EventPlayer()) == "1-S2-1-2160053") || (PlayerHandle(EventPlayer()) == "1-S2-1-4975450") || (PlayerHandle(EventPlayer()) == "1-S2-1-4149265") || (PlayerHandle(EventPlayer()) == "2-S2-1-9660407") || (PlayerHandle(EventPlayer()) == "1-S2-1-11055800") || (PlayerHandle(EventPlayer()) == "1-S2-1-8142589") || (PlayerHandle(EventPlayer()) == "1-S2-1-8513043") || (PlayerHandle(EventPlayer()) == "2-S2-1-7545015") || (PlayerHandle(EventPlayer()) == "2-S2-2-1078713") || (PlayerHandle(EventPlayer()) == "2-S2-1-3000050") || (PlayerHandle(EventPlayer()) == "1-S2-1-429617") || (PlayerHandle(EventPlayer()) == "1-S2-1-8588540") || (PlayerHandle(EventPlayer()) == "1-S2-1-5118440") || (PlayerHandle(EventPlayer()) == "1-S2-1-6807503") || (PlayerHandle(EventPlayer()) == "2-S2-1-6915515") || (PlayerHandle(EventPlayer()) == "2-S2-1-5558571") || (PlayerHandle(EventPlayer()) == "1-S2-1-3739206") || (PlayerHandle(EventPlayer()) == "1-S2-1-2737082") || (PlayerHandle(EventPlayer()) == "1-S2-1-2103075") || (PlayerHandle(EventPlayer()) == "2-S2-1-1940869") || (PlayerHandle(EventPlayer()) == "1-S2-1-2360100") || (PlayerHandle(EventPlayer()) == "1-S2-1-8102056") || (PlayerHandle(EventPlayer()) == "1-S2-1-10927778") || (PlayerHandle(EventPlayer()) == "2-S2-1-7113849") || (PlayerHandle(EventPlayer()) == "2-S2-1-286557") || (PlayerHandle(EventPlayer()) == "1-S2-1-2840321") || (PlayerHandle(EventPlayer()) == "2-S2-1-6164921") || (PlayerHandle(EventPlayer()) == "2-S2-1-3751695") || (PlayerHandle(EventPlayer()) == "2-S2-1-4235849") || (PlayerHandle(EventPlayer()) == "2-S2-1-787139") || (PlayerHandle(EventPlayer()) == "1-S2-1-11202546") || (PlayerHandle(EventPlayer()) == "1-S2-1-1203796") || (PlayerHandle(EventPlayer()) == "1-S2-1-7914388") || (PlayerHandle(EventPlayer()) == "1-S2-1-2167097") || (PlayerHandle(EventPlayer()) == "1-S2-1-8328363") || (PlayerHandle(EventPlayer()) == "2-S2-1-955168") || (PlayerHandle(EventPlayer()) == "2-S2-1-329807") || (PlayerHandle(EventPlayer()) == "2-S2-1-8559852") || (PlayerHandle(EventPlayer()) == "1-S2-1-320502") || (PlayerHandle(EventPlayer()) == "2-S2-1-4039957") || (PlayerHandle(EventPlayer()) == "1-S2-1-4454356") || (PlayerHandle(EventPlayer()) == "1-S2-1-3775858") || (PlayerHandle(EventPlayer()) == "1-S2-1-3768346") || (PlayerHandle(EventPlayer()) == "1-S2-1-3825237") || (PlayerHandle(EventPlayer()) == "1-S2-1-2667571") || (PlayerHandle(EventPlayer()) == "1-S2-1-4428423") || (PlayerHandle(EventPlayer()) == "1-S2-1-2932412") || (PlayerHandle(EventPlayer()) == "1-S2-1-8200499") || (PlayerHandle(EventPlayer()) == "1-S2-1-8679606") || (PlayerHandle(EventPlayer()) == "1-S2-1-320502") || (PlayerHandle(EventPlayer()) == "1-S2-1-10410380") || (PlayerHandle(EventPlayer()) == "1-S2-1-9772492") || (PlayerHandle(EventPlayer()) == "1-S2-1-12019029") || (PlayerHandle(EventPlayer()) == "1-S2-1-2293671") || (PlayerHandle(EventPlayer()) == "1-S2-1-2978872") || (PlayerHandle(EventPlayer()) == "1-S2-1-4422546") || (PlayerHandle(EventPlayer()) == "1-S2-1-5158354") || (PlayerHandle(EventPlayer()) == "2-S2-1-4477141") || (PlayerHandle(EventPlayer()) == "2-S2-1-9745378") || (PlayerHandle(EventPlayer()) == "1-S2-1-2914129") || (PlayerHandle(EventPlayer()) == "1-S2-1-8601429") || (PlayerHandle(EventPlayer()) == "1-S2-1-11508781") || (PlayerHandle(EventPlayer()) == "1-S2-1-12006843") || (PlayerHandle(EventPlayer()) == "1-S2-1-1863749") || (PlayerHandle(EventPlayer()) == "2-S2-1-3047799") || (PlayerHandle(EventPlayer()) == "1-S2-1-10415082") || (PlayerHandle(EventPlayer()) == "1-S2-1-6630118") || (PlayerHandle(EventPlayer()) == "1-S2-1-9977361") || (PlayerHandle(EventPlayer()) == "2-S2-1-7741735") || (PlayerHandle(EventPlayer()) == "2-S2-1-3047799") || (PlayerHandle(EventPlayer()) == "1-S2-1-3750328") || (PlayerHandle(EventPlayer()) == "1-S2-1-6332165") || (PlayerHandle(EventPlayer()) == "1-S2-1-8674060") || (PlayerHandle(EventPlayer()) == "1-S2-1-8585933") || (PlayerHandle(EventPlayer()) == "1-S2-1-4583644") || (PlayerHandle(EventPlayer()) == "1-S2-1-12006843") || (PlayerHandle(EventPlayer()) == "1-S2-1-6961772") || (PlayerHandle(EventPlayer()) == "1-S2-1-6344063") || (PlayerHandle(EventPlayer()) == "1-S2-1-1169207") || (PlayerHandle(EventPlayer()) == "1-S2-1-9646619") || (PlayerHandle(EventPlayer()) == "1-S2-1-6076614") || (PlayerHandle(EventPlayer()) == "2-S2-1-6730119") || (PlayerHandle(EventPlayer()) == "2-S2-1-6569460") || (PlayerHandle(EventPlayer()) == "1-S2-1-3375173") || (PlayerHandle(EventPlayer()) == "2-S2-1-9587527") || (PlayerHandle(EventPlayer()) == "1-S2-1-11097045") || (PlayerHandle(EventPlayer()) == "2-S2-1-8210098") || (PlayerHandle(EventPlayer()) == "1-S2-1-1951533") || (PlayerHandle(EventPlayer()) == "1-S2-1-6375840") || (PlayerHandle(EventPlayer()) == "1-S2-1-11959827") || (PlayerHandle(EventPlayer()) == "1-S2-1-1439572") || (PlayerHandle(EventPlayer()) == "2-S2-1-7074273") || (PlayerHandle(EventPlayer()) == "1-S2-1-7960552") || (PlayerHandle(EventPlayer()) == "1-S2-1-1165489") || (PlayerHandle(EventPlayer()) == "1-S2-1-4652352") || (PlayerHandle(EventPlayer()) == "1-S2-1-3933250") || (PlayerHandle(EventPlayer()) == "1-S2-1-610809") || (PlayerHandle(EventPlayer()) == "1-S2-1-11619411") || (PlayerHandle(EventPlayer()) == "1-S2-1-10948446") || (PlayerHandle(EventPlayer()) == "2-S2-1-3529853") || (PlayerHandle(EventPlayer()) == "2-S2-1-8713714") || (PlayerHandle(EventPlayer()) == "1-S2-1-11882150") || (PlayerHandle(EventPlayer()) == "1-S2-1-6101347") || (PlayerHandle(EventPlayer()) == "1-S2-1-5040886") || (PlayerHandle(EventPlayer()) == "1-S2-1-8648382") || (PlayerHandle(EventPlayer()) == "2-S2-1-6539497") || (PlayerHandle(EventPlayer()) == "2-S2-1-3097624") || (PlayerHandle(EventPlayer()) == "2-S2-1-286179") || (PlayerHandle(EventPlayer()) == "1-S2-1-10192588") || (PlayerHandle(EventPlayer()) == "1-S2-1-9933996") || (PlayerHandle(EventPlayer()) == "2-S2-1-1035586") || (PlayerHandle(EventPlayer()) == "2-S2-1-468400") || (PlayerHandle(EventPlayer()) == "1-S2-1-4440953") || (PlayerHandle(EventPlayer()) == "1-S2-1-4077368") || (PlayerHandle(EventPlayer()) == "1-S2-1-3058769") || (PlayerHandle(EventPlayer()) == "1-S2-1-10804052") || (PlayerHandle(EventPlayer()) == "1-S2-1-6299606") || (PlayerHandle(EventPlayer()) == "2-S2-1-1832215") || (PlayerHandle(EventPlayer()) == "2-S2-2-1736521") || (PlayerHandle(EventPlayer()) == "1-S2-1-8185426") || (PlayerHandle(EventPlayer()) == "2-S2-1-5649106") || (PlayerHandle(EventPlayer()) == "1-S2-1-5833283") || (PlayerHandle(EventPlayer()) == "1-S2-1-5940512") || (PlayerHandle(EventPlayer()) == "1-S2-1-8221475") || (PlayerHandle(EventPlayer()) == "2-S2-1-7894793") || (PlayerHandle(EventPlayer()) == "1-S2-1-11050065") || (PlayerHandle(EventPlayer()) == "2-S2-1-7234402") || (PlayerHandle(EventPlayer()) == "1-S2-1-7109227") || (PlayerHandle(EventPlayer()) == "1-S2-1-4952778") || (PlayerHandle(EventPlayer()) == "1-S2-1-8508070") || (PlayerHandle(EventPlayer()) == "2-S2-1-504013") || (PlayerHandle(EventPlayer()) == "1-S2-1-2723482") || (PlayerHandle(EventPlayer()) == "1-S2-1-10752610") || (PlayerHandle(EventPlayer()) == "1-S2-1-2723482") || (PlayerHandle(EventPlayer()) == "1-S2-1-3709930") || (PlayerHandle(EventPlayer()) == "2-S2-1-4526835") || (PlayerHandle(EventPlayer()) == "1-S2-1-2187598") || (PlayerHandle(EventPlayer()) == "1-S2-1-10303874") || (PlayerHandle(EventPlayer()) == "2-S2-2-2503557") || (PlayerHandle(EventPlayer()) == "1-S2-1-447601") || (PlayerHandle(EventPlayer()) == "2-S2-1-7494527") || (PlayerHandle(EventPlayer()) == "1-S2-1-6162079") || (PlayerHandle(EventPlayer()) == "1-S2-1-7858268") || (PlayerHandle(EventPlayer()) == "1-S2-1-12010217") || (PlayerHandle(EventPlayer()) == "1-S2-1-6606155") || (PlayerHandle(EventPlayer()) == "1-S2-1-12048906") || (PlayerHandle(EventPlayer()) == "1-S2-1-6798649") || (PlayerHandle(EventPlayer()) == "1-S2-1-6313749") || (PlayerHandle(EventPlayer()) == "1-S2-1-3924797") || (PlayerHandle(EventPlayer()) == "1-S2-1-10695611") || (PlayerHandle(EventPlayer()) == "1-S2-1-10113297") || (PlayerHandle(EventPlayer()) == "1-S2-1-12016875") || (PlayerHandle(EventPlayer()) == "2-S2-1-4550907") || (PlayerHandle(EventPlayer()) == "1-S2-1-8601750") || (PlayerHandle(EventPlayer()) == "1-S2-1-6393016") || (PlayerHandle(EventPlayer()) == "1-S2-1-11556383") || (PlayerHandle(EventPlayer()) == "1-S2-1-546780") || (PlayerHandle(EventPlayer()) == "1-S2-1-6871201") || (PlayerHandle(EventPlayer()) == "1-S2-1-10845783") || (PlayerHandle(EventPlayer()) == "1-S2-1-5144787") || (PlayerHandle(EventPlayer()) == "2-S2-1-1470460") || (PlayerHandle(EventPlayer()) == "1-S2-1-5368507") || (PlayerHandle(EventPlayer()) == "2-S2-1-2754895") || (PlayerHandle(EventPlayer()) == "1-S2-1-11333398") || (PlayerHandle(EventPlayer()) == "2-S2-1-2225266") || (PlayerHandle(EventPlayer()) == "2-S2-1-8978484") || (PlayerHandle(EventPlayer()) == "1-S2-1-10333546") || (PlayerHandle(EventPlayer()) == "2-S2-1-8783424") || (PlayerHandle(EventPlayer()) == "1-S2-1-2310625") || (PlayerHandle(EventPlayer()) == "2-S2-1-8989326") || (PlayerHandle(EventPlayer()) == "1-S2-1-6999260") || (PlayerHandle(EventPlayer()) == "1-S2-1-11333398") || (PlayerHandle(EventPlayer()) == "1-S2-1-3470914") || (PlayerHandle(EventPlayer()) == "2-S2-1-7950500") || (PlayerHandle(EventPlayer()) == "2-S2-1-2190523")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoid", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/0E4536DC") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/A7B7FAFC"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kerrigan_Init () {
    gt_Kerrigan = TriggerCreate("gt_Kerrigan_Func");
    TriggerEnable(gt_Kerrigan, false);
    TriggerAddEventChatMessage(gt_Kerrigan, c_playerAny, "-kerrigan", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -BronzeHero
//--------------------------------------------------------------------------------------------------
bool gt_BronzeHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10450137")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 5);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Yeti", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/3D17E4A5") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/F64FC3AF"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BronzeHero_Init () {
    gt_BronzeHero = TriggerCreate("gt_BronzeHero_Func");
    TriggerAddEventChatMessage(gt_BronzeHero, c_playerAny, "-BronzeHero", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -DA
//--------------------------------------------------------------------------------------------------
bool gt_DA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-4028331")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkArchon", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/1CF5FEBE") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/87D00521"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DA_Init () {
    gt_DA = TriggerCreate("gt_DA_Func");
    TriggerAddEventChatMessage(gt_DA, c_playerAny, "-DA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -TrollBerseker
//--------------------------------------------------------------------------------------------------
bool gt_TrollBerseker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) < 2))) {
            return false;
        }

        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Darktrollberserker", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/20E2F62A") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/B3AB9E42"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrollBerseker_Init () {
    gt_TrollBerseker = TriggerCreate("gt_TrollBerseker_Func");
    TriggerAddEventChatMessage(gt_TrollBerseker, c_playerAny, "-Berseker", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Raven
//--------------------------------------------------------------------------------------------------
bool gt_Raven_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Raven", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    gv_ravenUnit[EventPlayer()] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/EB7D6D2D") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/F07B0B59"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Raven_Init () {
    gt_Raven = TriggerCreate("gt_Raven_Func");
    TriggerAddEventChatMessage(gt_Raven, c_playerAny, "-Raven", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Assassin
//--------------------------------------------------------------------------------------------------
bool gt_Assassin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverA", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/62055B66") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/7E5B3698"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assassin_Init () {
    gt_Assassin = TriggerCreate("gt_Assassin_Func");
    TriggerAddEventChatMessage(gt_Assassin, c_playerAny, "-Assassin", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Banshee
//--------------------------------------------------------------------------------------------------
bool gt_Banshee_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, EventPlayer(), PointFromId(2061199121));
    UnitGroupAdd(gv_tEAM, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + (StringExternal("Param/Value/BEFA5739") + UnitTypeGetName(UnitGetType(UnitLastCreated())))));
    CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    UnitKill(EventUnit());
    BoardItemSetText(gv_thisgmaeleader, 3, EventPlayer(), StringExternal("Param/Value/8ECA1DA7"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, EventPlayer(), 16);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Banshee_Init () {
    gt_Banshee = TriggerCreate("gt_Banshee_Func");
    TriggerAddEventChatMessage(gt_Banshee, c_playerAny, "-Banshee", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -GimmeTPDammitTKS
//--------------------------------------------------------------------------------------------------
bool gt_GimmeTPDammitTKS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(2, c_playerPropCustom, c_playerPropOperAdd, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GimmeTPDammitTKS_Init () {
    gt_GimmeTPDammitTKS = TriggerCreate("gt_GimmeTPDammitTKS_Func");
    TriggerAddEventChatMessage(gt_GimmeTPDammitTKS, c_playerAny, "-GimmeTalentPointsDammitTKS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaper Creation
//--------------------------------------------------------------------------------------------------
bool gt_ReaperCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_reaper[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_reaper[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_reaper[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\reaperportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaperCreation_Init () {
    gt_ReaperCreation = TriggerCreate("gt_ReaperCreation_Func");
    TriggerAddEventMapInit(gt_ReaperCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Reaper
//--------------------------------------------------------------------------------------------------
bool gt_ActivateReaper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_reaper[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\reaperportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/716A1E94"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D091863F"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 170);
    gv_unitType[EventPlayer()] = "Reaper";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 30000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 50000;
    gv_tankReq[EventPlayer()] = 10000;
    gv_waveReq[EventPlayer()] = 200;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateReaper_Init () {
    gt_ActivateReaper = TriggerCreate("gt_ActivateReaper_Func");
    TriggerAddEventDialogControl(gt_ActivateReaper, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaper Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ReaperCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_reaper2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1AC38A59"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_reaper2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_reaper2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\reaperportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_reaper2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaperCreation2_Init () {
    gt_ReaperCreation2 = TriggerCreate("gt_ReaperCreation2_Func");
    TriggerAddEventMapInit(gt_ReaperCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Reaper 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateReaper2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_reaper2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\reaperportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/EB08AA19"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/0BF3122B"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 170);
    gv_unitType[EventPlayer()] = "Reaper";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 30000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 50000;
    gv_tankReq[EventPlayer()] = 10000;
    gv_waveReq[EventPlayer()] = 200;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateReaper2_Init () {
    gt_ActivateReaper2 = TriggerCreate("gt_ActivateReaper2_Func");
    TriggerAddEventDialogControl(gt_ActivateReaper2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oracle Creation
//--------------------------------------------------------------------------------------------------
bool gt_OracleCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_oracle[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_oracle[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_oracle[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\oracleportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OracleCreation_Init () {
    gt_OracleCreation = TriggerCreate("gt_OracleCreation_Func");
    TriggerAddEventMapInit(gt_OracleCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Oracle
//--------------------------------------------------------------------------------------------------
bool gt_ActivateOracle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_oracle[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\oracleportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/EFE29433"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D61EBFD2"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Oracle";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateOracle_Init () {
    gt_ActivateOracle = TriggerCreate("gt_ActivateOracle_Func");
    TriggerAddEventDialogControl(gt_ActivateOracle, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oracle Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_OracleCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_oracle2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8565575B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_oracle2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_oracle2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\oracleportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_oracle2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OracleCreation2_Init () {
    gt_OracleCreation2 = TriggerCreate("gt_OracleCreation2_Func");
    TriggerAddEventMapInit(gt_OracleCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Oracle 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateOracle2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_oracle2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\oracleportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/A7D44C4D"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9BD9B8C0"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Oracle";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateOracle2_Init () {
    gt_ActivateOracle2 = TriggerCreate("gt_ActivateOracle2_Func");
    TriggerAddEventDialogControl(gt_ActivateOracle2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarkMage Creation
//--------------------------------------------------------------------------------------------------
bool gt_DarkMageCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_darkMage[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_darkMage[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_darkMage[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\war3_btnwandskull.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkMageCreation_Init () {
    gt_DarkMageCreation = TriggerCreate("gt_DarkMageCreation_Func");
    TriggerAddEventMapInit(gt_DarkMageCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DarkMage
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDarkMage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_darkMage[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\war3_btnwandskull.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringToText(""), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8FBD8B98"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 170);
    gv_unitType[EventPlayer()] = "Skeletalmage";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 225000;
    gv_supportReq[EventPlayer()] = 435000;
    gv_splashReq[EventPlayer()] = 315000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDarkMage_Init () {
    gt_ActivateDarkMage = TriggerCreate("gt_ActivateDarkMage_Func");
    TriggerAddEventDialogControl(gt_ActivateDarkMage, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarkMage Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_DarkMageCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_darkMage2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/984DD661"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_darkMage2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_darkMage2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\war3_btnwandskull.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_darkMage2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkMageCreation2_Init () {
    gt_DarkMageCreation2 = TriggerCreate("gt_DarkMageCreation2_Func");
    TriggerAddEventMapInit(gt_DarkMageCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DarkMage 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDarkMage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_darkMage2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\war3_btnwandskull.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringToText(""), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/5FF15E7A"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 170);
    gv_unitType[EventPlayer()] = "Skeletalmage";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 225000;
    gv_supportReq[EventPlayer()] = 435000;
    gv_splashReq[EventPlayer()] = 315000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDarkMage2_Init () {
    gt_ActivateDarkMage2 = TriggerCreate("gt_ActivateDarkMage2_Func");
    TriggerAddEventDialogControl(gt_ActivateDarkMage2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydralisk Creation
//--------------------------------------------------------------------------------------------------
bool gt_HydraliskCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hydralisk[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, 260);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hydralisk[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hydralisk[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hydraliskportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraliskCreation_Init () {
    gt_HydraliskCreation = TriggerCreate("gt_HydraliskCreation_Func");
    TriggerAddEventMapInit(gt_HydraliskCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hydralisk
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHydralisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hydralisk[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hydraliskportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/1A165AD9"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/FF90DC80"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 325, 100);
    gv_unitType[EventPlayer()] = "HydraliskLurker";
    gv_assassinReq[EventPlayer()] = 100000;
    gv_assaultReq[EventPlayer()] = 100000;
    gv_engineerReq[EventPlayer()] = 100000;
    gv_specialistReq[EventPlayer()] = 100000;
    gv_supportReq[EventPlayer()] = 100000;
    gv_splashReq[EventPlayer()] = 100000;
    gv_tankReq[EventPlayer()] = 100000;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHydralisk_Init () {
    gt_ActivateHydralisk = TriggerCreate("gt_ActivateHydralisk_Func");
    TriggerAddEventDialogControl(gt_ActivateHydralisk, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydralisk Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_HydraliskCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hydralisk2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/803A4D9C"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, 310);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hydralisk2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hydralisk2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hydraliskportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hydralisk2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraliskCreation2_Init () {
    gt_HydraliskCreation2 = TriggerCreate("gt_HydraliskCreation2_Func");
    TriggerAddEventMapInit(gt_HydraliskCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hydralisk 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHydralisk2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hydralisk2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hydraliskportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/7C861990"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/AB94E2B6"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 325, 100);
    gv_unitType[EventPlayer()] = "HydraliskLurker";
    gv_assassinReq[EventPlayer()] = 100000;
    gv_assaultReq[EventPlayer()] = 100000;
    gv_engineerReq[EventPlayer()] = 100000;
    gv_specialistReq[EventPlayer()] = 100000;
    gv_supportReq[EventPlayer()] = 100000;
    gv_splashReq[EventPlayer()] = 100000;
    gv_tankReq[EventPlayer()] = 100000;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHydralisk2_Init () {
    gt_ActivateHydralisk2 = TriggerCreate("gt_ActivateHydralisk2_Func");
    TriggerAddEventDialogControl(gt_ActivateHydralisk2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ComboHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_ComboHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_comboHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2A58B0A1"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1A5C3A55"));
    gv_comboHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6480C832"));
    gv_comboHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5D69637E"));
    gv_comboHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F1375616"));
    gv_comboHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F4B1314B"));
    gv_comboHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/84B9656E"));
    gv_comboHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 360, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_comboHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_comboHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_comboHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_comboHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComboHeroCreation_Init () {
    gt_ComboHeroCreation = TriggerCreate("gt_ComboHeroCreation_Func");
    TriggerAddEventMapInit(gt_ComboHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate ComboHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateComboHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_comboHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_comboHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\reaperportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/5429CBD4"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/7CD89B57"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 170);
        if ((gv_playerInfo[EventPlayer()].lv_reaperStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateReaper";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier1", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_reaperStage == 1)) {
            gv_unitType[EventPlayer()] = "CorporalReaper";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier2", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_reaperStage == 2)) {
            gv_unitType[EventPlayer()] = "SergeantReaper";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier3", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_reaperStage == 3)) {
            gv_unitType[EventPlayer()] = "SergeantMajorReaper";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier4", 1);
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 30000;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 50000;
        gv_tankReq[EventPlayer()] = 10000;
        gv_waveReq[EventPlayer()] = 200;
    }

    if ((DialogControlGetSelectedItem(gv_comboHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\oracleportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/3F2A326F"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/18657D4E"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Oracle";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 250;
    }

    if ((DialogControlGetSelectedItem(gv_comboHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\war3_btnwandskull.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringToText(""), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/B2CE9904"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 170);
        gv_unitType[EventPlayer()] = "Skeletalmage";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 225000;
        gv_supportReq[EventPlayer()] = 435000;
        gv_splashReq[EventPlayer()] = 315000;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 250;
    }

    if ((DialogControlGetSelectedItem(gv_comboHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hydraliskportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/3838E2CE"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/BA96FFE0"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 325, 100);
        gv_unitType[EventPlayer()] = "HydraliskLurker";
        gv_assassinReq[EventPlayer()] = 100000;
        gv_assaultReq[EventPlayer()] = 100000;
        gv_engineerReq[EventPlayer()] = 100000;
        gv_specialistReq[EventPlayer()] = 100000;
        gv_supportReq[EventPlayer()] = 100000;
        gv_splashReq[EventPlayer()] = 100000;
        gv_tankReq[EventPlayer()] = 100000;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_comboHero[1], EventPlayer()) == 5)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateComboHero_Init () {
    gt_ActivateComboHero = TriggerCreate("gt_ActivateComboHero_Func");
    TriggerAddEventDialogControl(gt_ActivateComboHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Creation
//--------------------------------------------------------------------------------------------------
bool gt_SCVCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_sCV[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_sCV[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_sCV[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\scvportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVCreation_Init () {
    gt_SCVCreation = TriggerCreate("gt_SCVCreation_Func");
    TriggerAddEventMapInit(gt_SCVCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SCV
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSCV_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sCV[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\scvportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/BC0EFF1C"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/DCF47B24"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "SCV";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSCV_Init () {
    gt_ActivateSCV = TriggerCreate("gt_ActivateSCV_Func");
    TriggerAddEventDialogControl(gt_ActivateSCV, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_SCVCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_sCV2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/60920C7D"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 55, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_sCV2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_sCV2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\scvportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_sCV2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVCreation2_Init () {
    gt_SCVCreation2 = TriggerCreate("gt_SCVCreation2_Func");
    TriggerAddEventMapInit(gt_SCVCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SCV 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSCV2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sCV2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\scvportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/AD42D2C5"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/CEF9E7A9"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "SCV";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSCV2_Init () {
    gt_ActivateSCV2 = TriggerCreate("gt_ActivateSCV2_Func");
    TriggerAddEventDialogControl(gt_ActivateSCV2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner Creation
//--------------------------------------------------------------------------------------------------
bool gt_MinerCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_miner[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_miner[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_miner[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\malecivilian4portrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerCreation_Init () {
    gt_MinerCreation = TriggerCreate("gt_MinerCreation_Func");
    TriggerAddEventMapInit(gt_MinerCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Miner
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMiner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_miner[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\malecivilian4portrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/13C3E4D2"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/6EAF42C4"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "MinerMale";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 11000;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMiner_Init () {
    gt_ActivateMiner = TriggerCreate("gt_ActivateMiner_Func");
    TriggerAddEventDialogControl(gt_ActivateMiner, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_MinerCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_miner2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D6DF2A51"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_miner2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_miner2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\malecivilian4portrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_miner2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerCreation2_Init () {
    gt_MinerCreation2 = TriggerCreate("gt_MinerCreation2_Func");
    TriggerAddEventMapInit(gt_MinerCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Miner 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMiner2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_miner2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\malecivilian4portrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/E92A7F9D"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/6BC1F2CD"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "MinerMale";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 11000;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMiner2_Init () {
    gt_ActivateMiner2 = TriggerCreate("gt_ActivateMiner2_Func");
    TriggerAddEventDialogControl(gt_ActivateMiner2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hercule Creation
//--------------------------------------------------------------------------------------------------
bool gt_HerculeCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hercule[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hercule[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hercule[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hercportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HerculeCreation_Init () {
    gt_HerculeCreation = TriggerCreate("gt_HerculeCreation_Func");
    TriggerAddEventMapInit(gt_HerculeCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hercule
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHercule_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hercule[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hercportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/E917AB57"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/CFF1CAAD"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "HERC";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 67000;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHercule_Init () {
    gt_ActivateHercule = TriggerCreate("gt_ActivateHercule_Func");
    TriggerAddEventDialogControl(gt_ActivateHercule, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hercule Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_HerculeCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hercule2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/4A7B2155"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hercule2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hercule2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hercportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hercule2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HerculeCreation2_Init () {
    gt_HerculeCreation2 = TriggerCreate("gt_HerculeCreation2_Func");
    TriggerAddEventMapInit(gt_HerculeCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hercule 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHercule2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hercule2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hercportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/62E19BFE"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/F0567393"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "HERC";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 67000;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHercule2_Init () {
    gt_ActivateHercule2 = TriggerCreate("gt_ActivateHercule2_Func");
    TriggerAddEventDialogControl(gt_ActivateHercule2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marauder Creation
//--------------------------------------------------------------------------------------------------
bool gt_MarauderCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_marauder[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_marauder[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_marauder[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\marauderportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarauderCreation_Init () {
    gt_MarauderCreation = TriggerCreate("gt_MarauderCreation_Func");
    TriggerAddEventMapInit(gt_MarauderCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Marauder
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMarauder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_marauder[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\marauderportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/3A5AE141"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/FFEF3145"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 285, 100);
    gv_unitType[EventPlayer()] = "Marauder";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 145000;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMarauder_Init () {
    gt_ActivateMarauder = TriggerCreate("gt_ActivateMarauder_Func");
    TriggerAddEventDialogControl(gt_ActivateMarauder, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marauder Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_MarauderCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_marauder2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0A38821D"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 95, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_marauder2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_marauder2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\marauderportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_marauder2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarauderCreation2_Init () {
    gt_MarauderCreation2 = TriggerCreate("gt_MarauderCreation2_Func");
    TriggerAddEventMapInit(gt_MarauderCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Marauder 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMarauder2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_marauder2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\marauderportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/82ECEF79"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/F8ECD56A"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 285, 100);
    gv_unitType[EventPlayer()] = "Marauder";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 145000;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMarauder2_Init () {
    gt_ActivateMarauder2 = TriggerCreate("gt_ActivateMarauder2_Func");
    TriggerAddEventDialogControl(gt_ActivateMarauder2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corsair Creation
//--------------------------------------------------------------------------------------------------
bool gt_CorsairCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_corsair[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_corsair[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_corsair[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\corsairportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorsairCreation_Init () {
    gt_CorsairCreation = TriggerCreate("gt_CorsairCreation_Func");
    TriggerAddEventMapInit(gt_CorsairCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsair_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_corsair[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\corsairportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0880CDAE"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/683E55F7"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 285, 100);
    gv_unitType[EventPlayer()] = "CorsairMP";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 399999;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsair_Init () {
    gt_ActivateCorsair = TriggerCreate("gt_ActivateCorsair_Func");
    TriggerAddEventDialogControl(gt_ActivateCorsair, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corsair Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_CorsairCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_corsair2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/56E1C374"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 95, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_corsair2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_corsair2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\corsairportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_corsair2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorsairCreation2_Init () {
    gt_CorsairCreation2 = TriggerCreate("gt_CorsairCreation2_Func");
    TriggerAddEventMapInit(gt_CorsairCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsair2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_corsair2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\corsairportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/997FD8E6"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/A1F0FAE9"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 285, 100);
    gv_unitType[EventPlayer()] = "CorsairMP";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 399999;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsair2_Init () {
    gt_ActivateCorsair2 = TriggerCreate("gt_ActivateCorsair2_Func");
    TriggerAddEventDialogControl(gt_ActivateCorsair2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EngineerHeroCreation
//--------------------------------------------------------------------------------------------------
bool gt_EngineerHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_engineerHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8F5EE6A0"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5290519A"));
    gv_engineerHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/350E59ED"));
    gv_engineerHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2C2D751F"));
    gv_engineerHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/39E932A1"));
    gv_engineerHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/139E67A3"));
    gv_engineerHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/07743BD8"));
    gv_engineerHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 240, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_engineerHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_engineerHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_engineerHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_engineerHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerHeroCreation_Init () {
    gt_EngineerHeroCreation = TriggerCreate("gt_EngineerHeroCreation_Func");
    TriggerAddEventMapInit(gt_EngineerHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate EngineerHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEngineerHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_engineerHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_engineerHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\scvportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/7FA0BDAA"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/0DF680DC"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "SCV";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_engineerHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\malecivilian4portrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/2F4DB23F"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/73454952"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "MinerMale";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 11000;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_engineerHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hercportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/B679772D"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/38F752AE"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "HERC";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 67000;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_engineerHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\marauderportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/B0C2C79C"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/4E518AF3"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 285, 100);
        gv_unitType[EventPlayer()] = "Marauder";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 145000;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 150;
    }

    if ((DialogControlGetSelectedItem(gv_engineerHero[1], EventPlayer()) == 5)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\corsairportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/494B4CE5"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C16F591E"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 285, 100);
        gv_unitType[EventPlayer()] = "CorsairMP";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 399999;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 250;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEngineerHero_Init () {
    gt_ActivateEngineerHero = TriggerCreate("gt_ActivateEngineerHero_Func");
    TriggerAddEventDialogControl(gt_ActivateEngineerHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vulture Creation
//--------------------------------------------------------------------------------------------------
bool gt_VultureCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_vulture[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_vulture[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_vulture[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\vultureportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VultureCreation_Init () {
    gt_VultureCreation = TriggerCreate("gt_VultureCreation_Func");
    TriggerAddEventMapInit(gt_VultureCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Vulture
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVulture_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_vulture[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\vultureportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/D63FBA07"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/0CD3990F"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Vulture";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVulture_Init () {
    gt_ActivateVulture = TriggerCreate("gt_ActivateVulture_Func");
    TriggerAddEventDialogControl(gt_ActivateVulture, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vulture Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_VultureCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_vulture2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C957969B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_vulture2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_vulture2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\vultureportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_vulture2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VultureCreation2_Init () {
    gt_VultureCreation2 = TriggerCreate("gt_VultureCreation2_Func");
    TriggerAddEventMapInit(gt_VultureCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Vulture 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVulture2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_vulture2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\vultureportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/8DB3135A"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/99BEFA70"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Vulture";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVulture2_Init () {
    gt_ActivateVulture2 = TriggerCreate("gt_ActivateVulture2_Func");
    TriggerAddEventDialogControl(gt_ActivateVulture2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archon Creation
//--------------------------------------------------------------------------------------------------
bool gt_ArchonCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_archon[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_archon[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_archon[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\archonportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchonCreation_Init () {
    gt_ArchonCreation = TriggerCreate("gt_ArchonCreation_Func");
    TriggerAddEventMapInit(gt_ArchonCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Archon
//--------------------------------------------------------------------------------------------------
bool gt_ActivateArchon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_archon[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\archonportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/00E5D4C6"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C9F5A52B"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Archon";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 26000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateArchon_Init () {
    gt_ActivateArchon = TriggerCreate("gt_ActivateArchon_Func");
    TriggerAddEventDialogControl(gt_ActivateArchon, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archon Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ArchonCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_archon2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/14D665CF"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_archon2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_archon2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\archonportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_archon2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchonCreation2_Init () {
    gt_ArchonCreation2 = TriggerCreate("gt_ArchonCreation2_Func");
    TriggerAddEventMapInit(gt_ArchonCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Archon 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateArchon2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_archon2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\archonportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/02C0029B"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9B877B9E"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Archon";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 26000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateArchon2_Init () {
    gt_ActivateArchon2 = TriggerCreate("gt_ActivateArchon2_Func");
    TriggerAddEventDialogControl(gt_ActivateArchon2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellion Creation
//--------------------------------------------------------------------------------------------------
bool gt_HellionCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hellion[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hellion[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hellion[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hellionportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellionCreation_Init () {
    gt_HellionCreation = TriggerCreate("gt_HellionCreation_Func");
    TriggerAddEventMapInit(gt_HellionCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hellion
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHellion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hellion[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hellionportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/12143BEC"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/3033850C"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Hellion";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 78000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHellion_Init () {
    gt_ActivateHellion = TriggerCreate("gt_ActivateHellion_Func");
    TriggerAddEventDialogControl(gt_ActivateHellion, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellion Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_HellionCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hellion2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1FEA9E60"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hellion2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hellion2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hellionportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hellion2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellionCreation2_Init () {
    gt_HellionCreation2 = TriggerCreate("gt_HellionCreation2_Func");
    TriggerAddEventMapInit(gt_HellionCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hellion 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHellion2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hellion2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hellionportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/B2DF30C3"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C3BDC934"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Hellion";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 78000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHellion2_Init () {
    gt_ActivateHellion2 = TriggerCreate("gt_ActivateHellion2_Func");
    TriggerAddEventDialogControl(gt_ActivateHellion2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SiegeTank Creation
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_siegeTank[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_siegeTank[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_siegeTank[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\siegetankportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankCreation_Init () {
    gt_SiegeTankCreation = TriggerCreate("gt_SiegeTankCreation_Func");
    TriggerAddEventMapInit(gt_SiegeTankCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SiegeTank
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSiegeTank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_siegeTank[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\siegetankportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0488861F"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/33CC9188"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "SiegeTank";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 157000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSiegeTank_Init () {
    gt_ActivateSiegeTank = TriggerCreate("gt_ActivateSiegeTank_Func");
    TriggerAddEventDialogControl(gt_ActivateSiegeTank, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SiegeTank Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_siegeTank2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2A4F3E9E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_siegeTank2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_siegeTank2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\siegetankportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_siegeTank2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankCreation2_Init () {
    gt_SiegeTankCreation2 = TriggerCreate("gt_SiegeTankCreation2_Func");
    TriggerAddEventMapInit(gt_SiegeTankCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SiegeTank 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSiegeTank2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_siegeTank2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\siegetankportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/41BBABA6"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9911554C"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "SiegeTank";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 157000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSiegeTank2_Init () {
    gt_ActivateSiegeTank2 = TriggerCreate("gt_ActivateSiegeTank2_Func");
    TriggerAddEventDialogControl(gt_ActivateSiegeTank2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaver Creation
//--------------------------------------------------------------------------------------------------
bool gt_ReaverCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_reaver[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_reaver[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_reaver[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\reaverportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaverCreation_Init () {
    gt_ReaverCreation = TriggerCreate("gt_ReaverCreation_Func");
    TriggerAddEventMapInit(gt_ReaverCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Reaver
//--------------------------------------------------------------------------------------------------
bool gt_ActivateReaver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_reaver[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\reaverportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/D2B2C881"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/E94493E7"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Reaver";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 375000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateReaver_Init () {
    gt_ActivateReaver = TriggerCreate("gt_ActivateReaver_Func");
    TriggerAddEventDialogControl(gt_ActivateReaver, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaver Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ReaverCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_reaver2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/F1505ACC"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_reaver2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_reaver2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\reaverportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_reaver2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaverCreation2_Init () {
    gt_ReaverCreation2 = TriggerCreate("gt_ReaverCreation2_Func");
    TriggerAddEventMapInit(gt_ReaverCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Reaver 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateReaver2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_reaver2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\reaverportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/346833C6"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/229A6B9F"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Reaver";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 375000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateReaver2_Init () {
    gt_ActivateReaver2 = TriggerCreate("gt_ActivateReaver2_Func");
    TriggerAddEventDialogControl(gt_ActivateReaver2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Creation
//--------------------------------------------------------------------------------------------------
bool gt_ColossusCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_colossus[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 260);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_colossus[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_colossus[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\colossusportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusCreation_Init () {
    gt_ColossusCreation = TriggerCreate("gt_ColossusCreation_Func");
    TriggerAddEventMapInit(gt_ColossusCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Colossus
//--------------------------------------------------------------------------------------------------
bool gt_ActivateColossus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_colossus[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\colossusportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/3E55D4C3"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/820A69C8"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Colossus";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 750000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 350;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateColossus_Init () {
    gt_ActivateColossus = TriggerCreate("gt_ActivateColossus_Func");
    TriggerAddEventDialogControl(gt_ActivateColossus, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colossus Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ColossusCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_colossus2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/ACF4D672"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 310);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_colossus2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_colossus2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\colossusportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_colossus2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColossusCreation2_Init () {
    gt_ColossusCreation2 = TriggerCreate("gt_ColossusCreation2_Func");
    TriggerAddEventMapInit(gt_ColossusCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Colossus 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateColossus2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_colossus2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\colossusportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/EA99A431"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/1D2BD9D0"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Colossus";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 750000;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 350;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateColossus2_Init () {
    gt_ActivateColossus2 = TriggerCreate("gt_ActivateColossus2_Func");
    TriggerAddEventDialogControl(gt_ActivateColossus2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SplashHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_SplashHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_splashHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/129512C9"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1817483B"));
    gv_splashHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E77B93C8"));
    gv_splashHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/917B5A52"));
    gv_splashHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0E3357CF"));
    gv_splashHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5DE041E6"));
    gv_splashHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/45E29329"));
    gv_splashHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_splashHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_splashHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_splashHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_splashHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SplashHeroCreation_Init () {
    gt_SplashHeroCreation = TriggerCreate("gt_SplashHeroCreation_Func");
    TriggerAddEventMapInit(gt_SplashHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SplashHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSplashHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_splashHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_splashHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\vultureportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/42BF75FA"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/4464CACB"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 0)) {
            gv_unitType[EventPlayer()] = "Vulture2";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            gv_unitType[EventPlayer()] = "CorporalVulture";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            gv_unitType[EventPlayer()] = "SergeantVulture";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            gv_unitType[EventPlayer()] = "SergeantMajorVulture";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 4)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
            gv_unitType[EventPlayer()] = "SergeantMajorBiker";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 5)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222", 1);
            gv_unitType[EventPlayer()] = "LeutinetBiker";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 6)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222", 1);
            gv_unitType[EventPlayer()] = "CaptainBiker";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 7)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222222", 1);
            gv_unitType[EventPlayer()] = "CommissionerBiker";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 8)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222222", 1);
            gv_unitType[EventPlayer()] = "CommissionerScooter";
        }

        if ((gv_playerInfo[EventPlayer()].lv_vultureStage == 9)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222222", 1);
            gv_unitType[EventPlayer()] = "GeneralScooter";
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_splashHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\archonportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/9A4F4B72"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/1E0DC321"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Archon";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 26000;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_splashHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hellionportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/6F6207BA"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/30B6F372"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Hellion";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 78000;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_splashHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\siegetankportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/BC567073"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/78B457B8"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "SiegeTank";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 157000;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 150;
    }

    if ((DialogControlGetSelectedItem(gv_splashHero[1], EventPlayer()) == 5)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\reaverportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/18CF9F4B"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C0A87A95"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Reaver";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 375000;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 250;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSplashHero_Init () {
    gt_ActivateSplashHero = TriggerCreate("gt_ActivateSplashHero_Func");
    TriggerAddEventDialogControl(gt_ActivateSplashHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine Creation
//--------------------------------------------------------------------------------------------------
bool gt_MarineCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_marine[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_marine[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_marine[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\marineportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineCreation_Init () {
    gt_MarineCreation = TriggerCreate("gt_MarineCreation_Func");
    TriggerAddEventMapInit(gt_MarineCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Marine
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMarine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_marine[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\marineportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/75E05CD1"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/E41985D3"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Marine";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMarine_Init () {
    gt_ActivateMarine = TriggerCreate("gt_ActivateMarine_Func");
    TriggerAddEventDialogControl(gt_ActivateMarine, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_MarineCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Swarm_BoldSmall", PlayerGroupAll());
    gv_marine2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1D23CD13"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_marine2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_marine2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\marineportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_marine2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineCreation2_Init () {
    gt_MarineCreation2 = TriggerCreate("gt_MarineCreation2_Func");
    TriggerAddEventMapInit(gt_MarineCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Marine 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMarine2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_marine2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\marineportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/A581DB54"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/14B3B91E"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Marine";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMarine2_Init () {
    gt_ActivateMarine2 = TriggerCreate("gt_ActivateMarine2_Func");
    TriggerAddEventDialogControl(gt_ActivateMarine2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidRay Creation
//--------------------------------------------------------------------------------------------------
bool gt_VoidRayCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_voidRay[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_voidRay[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_voidRay[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\voidrayportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRayCreation_Init () {
    gt_VoidRayCreation = TriggerCreate("gt_VoidRayCreation_Func");
    TriggerAddEventMapInit(gt_VoidRayCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate VoidRay
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVoidRay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_voidRay[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\voidrayportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/83113E5B"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8D8C7607"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "VoidRay";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 18000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVoidRay_Init () {
    gt_ActivateVoidRay = TriggerCreate("gt_ActivateVoidRay_Func");
    TriggerAddEventDialogControl(gt_ActivateVoidRay, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidRay Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_VoidRayCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_voidRay2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/349F2959"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_voidRay2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_voidRay2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\voidrayportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_voidRay2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRayCreation2_Init () {
    gt_VoidRayCreation2 = TriggerCreate("gt_VoidRayCreation2_Func");
    TriggerAddEventMapInit(gt_VoidRayCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate VoidRay 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVoidRay2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_voidRay2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\voidrayportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/7B7A4C6E"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/FA8CE914"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "VoidRay";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 18000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVoidRay2_Init () {
    gt_ActivateVoidRay2 = TriggerCreate("gt_ActivateVoidRay2_Func");
    TriggerAddEventDialogControl(gt_ActivateVoidRay2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goliath Creation
//--------------------------------------------------------------------------------------------------
bool gt_GoliathCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_goliath[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_goliath[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_goliath[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoliathCreation_Init () {
    gt_GoliathCreation = TriggerCreate("gt_GoliathCreation_Func");
    TriggerAddEventMapInit(gt_GoliathCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Goliath
//--------------------------------------------------------------------------------------------------
bool gt_ActivateGoliath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_goliath[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/20A8F0D0"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/5CC8D74A"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Goliath";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 75000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateGoliath_Init () {
    gt_ActivateGoliath = TriggerCreate("gt_ActivateGoliath_Func");
    TriggerAddEventDialogControl(gt_ActivateGoliath, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goliath Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_GoliathCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_goliath2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6FB8C5D1"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_goliath2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_goliath2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_goliath2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoliathCreation2_Init () {
    gt_GoliathCreation2 = TriggerCreate("gt_GoliathCreation2_Func");
    TriggerAddEventMapInit(gt_GoliathCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Goliath 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateGoliath2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_goliath2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/CEF61840"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/34D14C47"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Goliath";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 75000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateGoliath2_Init () {
    gt_ActivateGoliath2 = TriggerCreate("gt_ActivateGoliath2_Func");
    TriggerAddEventDialogControl(gt_ActivateGoliath2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Creation
//--------------------------------------------------------------------------------------------------
bool gt_VikingCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_viking[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_viking[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_viking[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\vikingfighterportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingCreation_Init () {
    gt_VikingCreation = TriggerCreate("gt_VikingCreation_Func");
    TriggerAddEventMapInit(gt_VikingCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Viking
//--------------------------------------------------------------------------------------------------
bool gt_ActivateViking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_viking[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\vikingfighterportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/E283AED3"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/92CCD225"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "VikingAssault";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 130000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateViking_Init () {
    gt_ActivateViking = TriggerCreate("gt_ActivateViking_Func");
    TriggerAddEventDialogControl(gt_ActivateViking, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_VikingCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_viking2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/43CBBBBB"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_viking2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_viking2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\vikingfighterportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_viking2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingCreation2_Init () {
    gt_VikingCreation2 = TriggerCreate("gt_VikingCreation2_Func");
    TriggerAddEventMapInit(gt_VikingCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Viking 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateViking2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_viking2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\vikingfighterportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/AAA43DF8"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D1180B43"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "VikingAssault";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 130000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateViking2_Init () {
    gt_ActivateViking2 = TriggerCreate("gt_ActivateViking2_Func");
    TriggerAddEventDialogControl(gt_ActivateViking2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrier Creation
//--------------------------------------------------------------------------------------------------
bool gt_CarrierCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_carrier[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_carrier[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_carrier[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrierCreation_Init () {
    gt_CarrierCreation = TriggerCreate("gt_CarrierCreation_Func");
    TriggerAddEventMapInit(gt_CarrierCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Carrier
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCarrier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_carrier[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0B0BF385"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/FF42FE14"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Carrier";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 365000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCarrier_Init () {
    gt_ActivateCarrier = TriggerCreate("gt_ActivateCarrier_Func");
    TriggerAddEventDialogControl(gt_ActivateCarrier, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrier Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_CarrierCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_carrier2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/CED84263"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_carrier2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_carrier2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_carrier2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrierCreation2_Init () {
    gt_CarrierCreation2 = TriggerCreate("gt_CarrierCreation2_Func");
    TriggerAddEventMapInit(gt_CarrierCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Carrier 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCarrier2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_carrier2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/5D214811"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8976CE07"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Carrier";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 365000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCarrier2_Init () {
    gt_ActivateCarrier2 = TriggerCreate("gt_ActivateCarrier2_Func");
    TriggerAddEventDialogControl(gt_ActivateCarrier2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BC Creation
//--------------------------------------------------------------------------------------------------
bool gt_BCCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_bC[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 260);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_bC[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_bC[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\battlecruiserportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BCCreation_Init () {
    gt_BCCreation = TriggerCreate("gt_BCCreation_Func");
    TriggerAddEventMapInit(gt_BCCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate BC
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_bC[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\battlecruiserportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/2EA8261B"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/2DAC42F0"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Battlecruiser";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 825000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 350;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBC_Init () {
    gt_ActivateBC = TriggerCreate("gt_ActivateBC_Func");
    TriggerAddEventDialogControl(gt_ActivateBC, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BC Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_BCCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_bC2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1DA12120"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 115, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 310);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_bC2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_bC2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\battlecruiserportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_bC2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BCCreation2_Init () {
    gt_BCCreation2 = TriggerCreate("gt_BCCreation2_Func");
    TriggerAddEventMapInit(gt_BCCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate BC 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBC2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_bC2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\battlecruiserportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/111298DF"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9D010A09"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Battlecruiser";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 825000;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 350;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBC2_Init () {
    gt_ActivateBC2 = TriggerCreate("gt_ActivateBC2_Func");
    TriggerAddEventDialogControl(gt_ActivateBC2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AssaultHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_AssaultHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_assaultHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/132716FE"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5637CAF4"));
    gv_assaultHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9214DFC2"));
    gv_assaultHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B841CF7D"));
    gv_assaultHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5B5C7112"));
    gv_assaultHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/844223D9"));
    gv_assaultHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C2DFAACE"));
    gv_assaultHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -525, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_assaultHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_assaultHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_assaultHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_assaultHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssaultHeroCreation_Init () {
    gt_AssaultHeroCreation = TriggerCreate("gt_AssaultHeroCreation_Func");
    TriggerAddEventMapInit(gt_AssaultHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Assault Hero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAssaultHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_assaultHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_assaultHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\marineportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/C6151186"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/AF675B61"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateMarine";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            gv_unitType[EventPlayer()] = "CorporalMarine";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            gv_unitType[EventPlayer()] = "SergeantMarine";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            gv_unitType[EventPlayer()] = "SergeantMajorMarine";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 4)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
            gv_unitType[EventPlayer()] = "TychusCommando";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 5)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
            gv_unitType[EventPlayer()] = "LeutinetTychus";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 6)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
            gv_unitType[EventPlayer()] = "CaptainTychus";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 7)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier81", 1);
            gv_unitType[EventPlayer()] = "CommissionerTychus";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 8)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier81", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier91", 1);
            gv_unitType[EventPlayer()] = "RaynorCommando";
        }

        if ((gv_playerInfo[EventPlayer()].lv_marineStage == 9)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier81", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier91", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier101", 1);
            gv_unitType[EventPlayer()] = "GeneralRaynor";
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_assaultHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\voidrayportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0230FB69"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/0C6CD995"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        if ((gv_playerInfo[EventPlayer()].lv_voidRayStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateVoidRay";
        }

        if ((gv_playerInfo[EventPlayer()].lv_voidRayStage == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier21", 1);
            gv_unitType[EventPlayer()] = "CorporalVoidRay";
        }

        if ((gv_playerInfo[EventPlayer()].lv_voidRayStage == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier31", 1);
            gv_unitType[EventPlayer()] = "SergeantVoidRay";
        }

        if ((gv_playerInfo[EventPlayer()].lv_voidRayStage == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier41", 1);
            gv_unitType[EventPlayer()] = "SergeantMajorVoidRay";
        }

        if ((gv_playerInfo[EventPlayer()].lv_voidRayStage == 4)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier51", 1);
            gv_unitType[EventPlayer()] = "Mohandar";
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 18000;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_assaultHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\goliathportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/E3F85871"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8D575D7C"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Goliath";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 75000;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_assaultHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\vikingfighterportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/2CFDC0F6"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/37581CEC"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "VikingAssault";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 130000;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 150;
    }

    if ((DialogControlGetSelectedItem(gv_assaultHero[1], EventPlayer()) == 5)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/769100EC"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/6C2546BD"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Carrier";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 365000;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 250;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAssaultHero_Init () {
    gt_ActivateAssaultHero = TriggerCreate("gt_ActivateAssaultHero_Func");
    TriggerAddEventDialogControl(gt_ActivateAssaultHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Creation
//--------------------------------------------------------------------------------------------------
bool gt_ZealotCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_zealot[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_zealot[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_zealot[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zealotportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotCreation_Init () {
    gt_ZealotCreation = TriggerCreate("gt_ZealotCreation_Func");
    TriggerAddEventMapInit(gt_ZealotCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zealot
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZealot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealot[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\zealotportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/FBC4F189"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/40956FDB"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Zealot";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZealot_Init () {
    gt_ActivateZealot = TriggerCreate("gt_ActivateZealot_Func");
    TriggerAddEventDialogControl(gt_ActivateZealot, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ZealotCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_zealot2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C1133609"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_zealot2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_zealot2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\zealotportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_zealot2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotCreation2_Init () {
    gt_ZealotCreation2 = TriggerCreate("gt_ZealotCreation2_Func");
    TriggerAddEventMapInit(gt_ZealotCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Zealot 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateZealot2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealot2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\zealotportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/43EC1174"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/466376F3"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Zealot";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateZealot2_Init () {
    gt_ActivateZealot2 = TriggerCreate("gt_ActivateZealot2_Func");
    TriggerAddEventDialogControl(gt_ActivateZealot2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator Creation
//--------------------------------------------------------------------------------------------------
bool gt_PredatorCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_predator[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_predator[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_predator[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\predatorportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorCreation_Init () {
    gt_PredatorCreation = TriggerCreate("gt_PredatorCreation_Func");
    TriggerAddEventMapInit(gt_PredatorCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Predator
//--------------------------------------------------------------------------------------------------
bool gt_ActivatePredator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_predator[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\predatorportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/828CCAE8"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/17328477"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Predator";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 11000;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivatePredator_Init () {
    gt_ActivatePredator = TriggerCreate("gt_ActivatePredator_Func");
    TriggerAddEventDialogControl(gt_ActivatePredator, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_PredatorCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_predator2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BDC598F7"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_predator2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_predator2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\predatorportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_predator2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorCreation2_Init () {
    gt_PredatorCreation2 = TriggerCreate("gt_PredatorCreation2_Func");
    TriggerAddEventMapInit(gt_PredatorCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Predator 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivatePredator2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_predator2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\predatorportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/1F1CF199"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8B0B3B7A"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Predator";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 11000;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivatePredator2_Init () {
    gt_ActivatePredator2 = TriggerCreate("gt_ActivatePredator2_Func");
    TriggerAddEventDialogControl(gt_ActivatePredator2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immortal Creation
//--------------------------------------------------------------------------------------------------
bool gt_ImmortalCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_immortal[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_immortal[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_immortal[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\immortalportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmortalCreation_Init () {
    gt_ImmortalCreation = TriggerCreate("gt_ImmortalCreation_Func");
    TriggerAddEventMapInit(gt_ImmortalCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Immortal
//--------------------------------------------------------------------------------------------------
bool gt_ActivateImmortal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_immortal[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\immortalportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/2EBD4C71"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/5764632F"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Immortal";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 60000;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateImmortal_Init () {
    gt_ActivateImmortal = TriggerCreate("gt_ActivateImmortal_Func");
    TriggerAddEventDialogControl(gt_ActivateImmortal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immortal Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ImmortalCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_immortal2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/661AF5D6"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_immortal2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_immortal2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\immortalportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_immortal2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmortalCreation2_Init () {
    gt_ImmortalCreation2 = TriggerCreate("gt_ImmortalCreation2_Func");
    TriggerAddEventMapInit(gt_ImmortalCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Immortal 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateImmortal2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_immortal2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\immortalportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/CCBF084A"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/A4C77A34"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Immortal";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 60000;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateImmortal2_Init () {
    gt_ActivateImmortal2 = TriggerCreate("gt_ActivateImmortal2_Func");
    TriggerAddEventDialogControl(gt_ActivateImmortal2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Firebat Creation
//--------------------------------------------------------------------------------------------------
bool gt_FirebatCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_firebat[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_firebat[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_firebat[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\firebatportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirebatCreation_Init () {
    gt_FirebatCreation = TriggerCreate("gt_FirebatCreation_Func");
    TriggerAddEventMapInit(gt_FirebatCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Firebat
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFirebat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_firebat[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\firebatportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/37B762B4"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8EF15E19"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Firebat";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 123000;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFirebat_Init () {
    gt_ActivateFirebat = TriggerCreate("gt_ActivateFirebat_Func");
    TriggerAddEventDialogControl(gt_ActivateFirebat, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Firebat Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_FirebatCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_firebat2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8F29A628"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_firebat2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_firebat2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\firebatportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_firebat2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirebatCreation2_Init () {
    gt_FirebatCreation2 = TriggerCreate("gt_FirebatCreation2_Func");
    TriggerAddEventMapInit(gt_FirebatCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Firebat 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFirebat2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_firebat2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\firebatportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/D61862CE"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/8AC423FD"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Firebat";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 123000;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFirebat2_Init () {
    gt_ActivateFirebat2 = TriggerCreate("gt_ActivateFirebat2_Func");
    TriggerAddEventDialogControl(gt_ActivateFirebat2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thor Creation
//--------------------------------------------------------------------------------------------------
bool gt_ThorCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_thor[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_thor[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_thor[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\thorportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThorCreation_Init () {
    gt_ThorCreation = TriggerCreate("gt_ThorCreation_Func");
    TriggerAddEventMapInit(gt_ThorCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Thor
//--------------------------------------------------------------------------------------------------
bool gt_ActivateThor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_thor[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\thorportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/518BA174"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/709A31F1"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Thor";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 311000;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateThor_Init () {
    gt_ActivateThor = TriggerCreate("gt_ActivateThor_Func");
    TriggerAddEventDialogControl(gt_ActivateThor, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thor Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ThorCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_thor2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/985A1931"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_thor2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_thor2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\thorportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_thor2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThorCreation2_Init () {
    gt_ThorCreation2 = TriggerCreate("gt_ThorCreation2_Func");
    TriggerAddEventMapInit(gt_ThorCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Thor 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateThor2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_thor2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\thorportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/D3FBEF34"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/5B3A1090"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Thor";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 311000;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateThor2_Init () {
    gt_ActivateThor2 = TriggerCreate("gt_ActivateThor2_Func");
    TriggerAddEventDialogControl(gt_ActivateThor2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Creation
//--------------------------------------------------------------------------------------------------
bool gt_HybridCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hybrid[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 260);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hybrid[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hybrid[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hybridprotossportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCreation_Init () {
    gt_HybridCreation = TriggerCreate("gt_HybridCreation_Func");
    TriggerAddEventMapInit(gt_HybridCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybrid[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hybridprotossportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/97FD7C9B"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/1FAB89EE"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 170);
    gv_unitType[EventPlayer()] = "HybridDestroyer";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 1000000;
    gv_waveReq[EventPlayer()] = 300;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHybrid_Init () {
    gt_ActivateHybrid = TriggerCreate("gt_ActivateHybrid_Func");
    TriggerAddEventDialogControl(gt_ActivateHybrid, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_HybridCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hybrid2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8E458AC2"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 310);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hybrid2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hybrid2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hybridprotossportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_hybrid2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCreation2_Init () {
    gt_HybridCreation2 = TriggerCreate("gt_HybridCreation2_Func");
    TriggerAddEventMapInit(gt_HybridCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hybrid 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHybrid2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybrid2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hybridprotossportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/4623B530"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/484E3D83"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 170);
    gv_unitType[EventPlayer()] = "HybridDestroyer";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 1000000;
    gv_waveReq[EventPlayer()] = 300;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHybrid2_Init () {
    gt_ActivateHybrid2 = TriggerCreate("gt_ActivateHybrid2_Func");
    TriggerAddEventDialogControl(gt_ActivateHybrid2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TankHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_TankHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_tankHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/57A1AF15"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/016B4F2D"));
    gv_tankHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F69EA35C"));
    gv_tankHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/18C3B781"));
    gv_tankHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/002A4694"));
    gv_tankHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3147EBB3"));
    gv_tankHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9F59D630"));
    gv_tankHeroButton[6] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AE37F157"));
    gv_tankHeroButton[7] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 120, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tankHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tankHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_tankHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tankHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TankHeroCreation_Init () {
    gt_TankHeroCreation = TriggerCreate("gt_TankHeroCreation_Func");
    TriggerAddEventMapInit(gt_TankHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate TankHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTankHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tankHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_tankHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\zealotportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/A7FCABAC"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/1BB37A8E"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateZealot";
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 1)) {
            gv_unitType[EventPlayer()] = "CorporalZealot";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 2)) {
            gv_unitType[EventPlayer()] = "SergeantZealot";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 3)) {
            gv_unitType[EventPlayer()] = "SergeantMajorZealot";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 4)) {
            gv_unitType[EventPlayer()] = "ZealotShakuras";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 5)) {
            gv_unitType[EventPlayer()] = "LeutinetCenturion";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier61", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 6)) {
            gv_unitType[EventPlayer()] = "CaptainCenturion";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier71", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 7)) {
            gv_unitType[EventPlayer()] = "CommissionerCenturion";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier71", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier81", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 8)) {
            gv_unitType[EventPlayer()] = "CommissionerSentinel";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier71", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier81", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier91", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_metalManStage == 9)) {
            gv_unitType[EventPlayer()] = "GeneralSentinel";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier61", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier71", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier81", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier91", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergBurrowMove", 1);
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_tankHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\predatorportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/36706A72"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/B40E6180"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Predator";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 11000;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_tankHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\immortalportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/F60C15C3"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/53CC2C29"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Immortal";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 60000;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_tankHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\firebatportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/C200A238"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/08E67B5C"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Firebat";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 123000;
        gv_waveReq[EventPlayer()] = 150;
    }

    if ((DialogControlGetSelectedItem(gv_tankHero[1], EventPlayer()) == 5)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\thorportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/3CDF2A0A"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/438CE035"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Thor";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 311000;
        gv_waveReq[EventPlayer()] = 250;
    }

    if ((DialogControlGetSelectedItem(gv_tankHero[1], EventPlayer()) == 6)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hybridprotossportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/8C8127FB"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/36C82B65"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 170);
        if ((gv_playerInfo[EventPlayer()].lv_hybridStage == 0)) {
            gv_unitType[EventPlayer()] = "RagingHybrid";
        }

        if ((gv_playerInfo[EventPlayer()].lv_hybridStage == 1)) {
            gv_unitType[EventPlayer()] = "OutragingHybrid";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HybridTier2", 1);
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 1000000;
        gv_waveReq[EventPlayer()] = 300;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTankHero_Init () {
    gt_ActivateTankHero = TriggerCreate("gt_ActivateTankHero_Func");
    TriggerAddEventDialogControl(gt_ActivateTankHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Creation
//--------------------------------------------------------------------------------------------------
bool gt_StalkerCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_stalker[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_stalker[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_stalker[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\stalkerportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerCreation_Init () {
    gt_StalkerCreation = TriggerCreate("gt_StalkerCreation_Func");
    TriggerAddEventMapInit(gt_StalkerCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Stalker
//--------------------------------------------------------------------------------------------------
bool gt_ActivateStalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stalker[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\stalkerportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/C5CBDE45"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9E2BC811"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Stalker";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateStalker_Init () {
    gt_ActivateStalker = TriggerCreate("gt_ActivateStalker_Func");
    TriggerAddEventDialogControl(gt_ActivateStalker, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_StalkerCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_stalker2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0BC46AAE"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_stalker2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_stalker2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\stalkerportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_stalker2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerCreation2_Init () {
    gt_StalkerCreation2 = TriggerCreate("gt_StalkerCreation2_Func");
    TriggerAddEventMapInit(gt_StalkerCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Stalker 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateStalker2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stalker2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\stalkerportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/B6B1253D"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/26660549"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Stalker";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateStalker2_Init () {
    gt_ActivateStalker2 = TriggerCreate("gt_ActivateStalker2_Func");
    TriggerAddEventDialogControl(gt_ActivateStalker2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DiamondBack Creation
//--------------------------------------------------------------------------------------------------
bool gt_DiamondBackCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_diamondBack[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_diamondBack[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_diamondBack[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\diamondbackportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondBackCreation_Init () {
    gt_DiamondBackCreation = TriggerCreate("gt_DiamondBackCreation_Func");
    TriggerAddEventMapInit(gt_DiamondBackCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DiamondBack
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDiamondBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_diamondBack[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\diamondbackportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/40B5956D"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/92E63D43"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Diamondback";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 41000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDiamondBack_Init () {
    gt_ActivateDiamondBack = TriggerCreate("gt_ActivateDiamondBack_Func");
    TriggerAddEventDialogControl(gt_ActivateDiamondBack, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DiamondBack Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_DiamondBackCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_diamondBack2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/30791684"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 110, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_diamondBack2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_diamondBack2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\diamondbackportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_diamondBack2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondBackCreation2_Init () {
    gt_DiamondBackCreation2 = TriggerCreate("gt_DiamondBackCreation2_Func");
    TriggerAddEventMapInit(gt_DiamondBackCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DiamondBack 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDiamondBack2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_diamondBack2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\diamondbackportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/58EC9ABA"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/09A1B677"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Diamondback";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 41000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDiamondBack2_Init () {
    gt_ActivateDiamondBack2 = TriggerCreate("gt_ActivateDiamondBack2_Func");
    TriggerAddEventDialogControl(gt_ActivateDiamondBack2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scout Creation
//--------------------------------------------------------------------------------------------------
bool gt_ScoutCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_scout[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_scout[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_scout[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\scoutportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoutCreation_Init () {
    gt_ScoutCreation = TriggerCreate("gt_ScoutCreation_Func");
    TriggerAddEventMapInit(gt_ScoutCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Scout
//--------------------------------------------------------------------------------------------------
bool gt_ActivateScout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_scout[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\scoutportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0C2B6F71"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/4089BE3E"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Scout";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 123000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateScout_Init () {
    gt_ActivateScout = TriggerCreate("gt_ActivateScout_Func");
    TriggerAddEventDialogControl(gt_ActivateScout, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scout Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_ScoutCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_scout2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8D39F513"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 70, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_scout2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_scout2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\scoutportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_scout2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoutCreation2_Init () {
    gt_ScoutCreation2 = TriggerCreate("gt_ScoutCreation2_Func");
    TriggerAddEventMapInit(gt_ScoutCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Scout 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateScout2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_scout2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\scoutportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/467842D2"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/23B9D78C"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Scout";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 123000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateScout2_Init () {
    gt_ActivateScout2 = TriggerCreate("gt_ActivateScout2_Func");
    TriggerAddEventDialogControl(gt_ActivateScout2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyclone Creation
//--------------------------------------------------------------------------------------------------
bool gt_CycloneCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cyclone[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cyclone[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cyclone[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\cycloneportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CycloneCreation_Init () {
    gt_CycloneCreation = TriggerCreate("gt_CycloneCreation_Func");
    TriggerAddEventMapInit(gt_CycloneCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Cyclone
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCyclone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cyclone[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\cycloneportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/10D9ED10"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/B60AF70C"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Cyclone";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 221000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCyclone_Init () {
    gt_ActivateCyclone = TriggerCreate("gt_ActivateCyclone_Func");
    TriggerAddEventDialogControl(gt_ActivateCyclone, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyclone Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_CycloneCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cyclone2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/F5699997"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cyclone2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cyclone2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\cycloneportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_cyclone2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CycloneCreation2_Init () {
    gt_CycloneCreation2 = TriggerCreate("gt_CycloneCreation2_Func");
    TriggerAddEventMapInit(gt_CycloneCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Cyclone 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCyclone2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cyclone2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\cycloneportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/28B18B77"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/40D8FB76"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Cyclone";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 221000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCyclone2_Init () {
    gt_ActivateCyclone2 = TriggerCreate("gt_ActivateCyclone2_Func");
    TriggerAddEventDialogControl(gt_ActivateCyclone2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Creation
//--------------------------------------------------------------------------------------------------
bool gt_MothershipCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_mothership[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_mothership[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_mothership[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\mothershipportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipCreation_Init () {
    gt_MothershipCreation = TriggerCreate("gt_MothershipCreation_Func");
    TriggerAddEventMapInit(gt_MothershipCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Mothership
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_mothership[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\mothershipportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/BCCE9F12"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/2B497149"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Mothership";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 525000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 300;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMothership_Init () {
    gt_ActivateMothership = TriggerCreate("gt_ActivateMothership_Func");
    TriggerAddEventDialogControl(gt_ActivateMothership, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_MothershipCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_mothership2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/93A8F66E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_mothership2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_mothership2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\mothershipportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_mothership2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipCreation2_Init () {
    gt_MothershipCreation2 = TriggerCreate("gt_MothershipCreation2_Func");
    TriggerAddEventMapInit(gt_MothershipCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Mothership 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMothership2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_mothership2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\mothershipportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/DC53E04B"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C7D37624"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Mothership";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 525000;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 300;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMothership2_Init () {
    gt_ActivateMothership2 = TriggerCreate("gt_ActivateMothership2_Func");
    TriggerAddEventDialogControl(gt_ActivateMothership2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpecialistHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_SpecialistHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_specialistHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1BBE9BF6"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/EBE65AF6"));
    gv_specialistHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/445376AC"));
    gv_specialistHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5E7C4BB0"));
    gv_specialistHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E150DBE0"));
    gv_specialistHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E974E67E"));
    gv_specialistHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0FD1D5F8"));
    gv_specialistHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -130, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_specialistHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_specialistHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_specialistHero[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_specialistHero[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialistHeroCreation_Init () {
    gt_SpecialistHeroCreation = TriggerCreate("gt_SpecialistHeroCreation_Func");
    TriggerAddEventMapInit(gt_SpecialistHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SpecialistHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpecialistHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_specialistHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_specialistHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\stalkerportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0F07DE4B"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9A8B5020"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateStalker";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 1)) {
            gv_unitType[EventPlayer()] = "CorporalStalker";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 2)) {
            gv_unitType[EventPlayer()] = "SergeantStalker";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 3)) {
            gv_unitType[EventPlayer()] = "SergeantMajorStalker";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 4)) {
            gv_unitType[EventPlayer()] = "SergeantMajorInstigator";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 5)) {
            gv_unitType[EventPlayer()] = "LeutinetInstigator";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 6)) {
            gv_unitType[EventPlayer()] = "CaptainInstigator";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222222", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 7)) {
            gv_unitType[EventPlayer()] = "CommissionerInstigator";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222222", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 8)) {
            gv_unitType[EventPlayer()] = "Dragoon";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222222", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_stalkerStage == 9)) {
            gv_unitType[EventPlayer()] = "GeneralDragoon";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222223", 1);
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_specialistHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\diamondbackportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/23748133"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/828E45D5"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Diamondback";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 41000;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_specialistHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\scoutportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/52BE310A"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/3FA6BD50"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Scout";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 123000;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_specialistHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\cycloneportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/A7D1226C"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/87FC1B11"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Cyclone";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 221000;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 150;
    }

    if ((DialogControlGetSelectedItem(gv_specialistHero[1], EventPlayer()) == 5)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\mothershipportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/AF31F050"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/3B027E99"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Mothership";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 525000;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 300;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpecialistHero_Init () {
    gt_ActivateSpecialistHero = TriggerCreate("gt_ActivateSpecialistHero_Func");
    TriggerAddEventDialogControl(gt_ActivateSpecialistHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Creation
//--------------------------------------------------------------------------------------------------
bool gt_GhostCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_ghost[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_ghost[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_ghost[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ghostportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostCreation_Init () {
    gt_GhostCreation = TriggerCreate("gt_GhostCreation_Func");
    TriggerAddEventMapInit(gt_GhostCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Ghost
//--------------------------------------------------------------------------------------------------
bool gt_ActivateGhost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ghost[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\ghostportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/C750DA8D"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C9683053"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Ghost";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateGhost_Init () {
    gt_ActivateGhost = TriggerCreate("gt_ActivateGhost_Func");
    TriggerAddEventDialogControl(gt_ActivateGhost, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_GhostCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_ghost2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7F4D825D"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_ghost2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_ghost2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ghostportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_ghost2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostCreation2_Init () {
    gt_GhostCreation2 = TriggerCreate("gt_GhostCreation2_Func");
    TriggerAddEventMapInit(gt_GhostCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Ghost 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateGhost2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ghost2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\ghostportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/CDFFBE9F"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/095E2C03"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Ghost";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateGhost2_Init () {
    gt_ActivateGhost2 = TriggerCreate("gt_ActivateGhost2_Func");
    TriggerAddEventDialogControl(gt_ActivateGhost2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectre Creation
//--------------------------------------------------------------------------------------------------
bool gt_SpectreCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_spectre[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_spectre[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_spectre[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\spectreportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectreCreation_Init () {
    gt_SpectreCreation = TriggerCreate("gt_SpectreCreation_Func");
    TriggerAddEventMapInit(gt_SpectreCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Spectre
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpectre_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_spectre[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\spectreportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/7112B2F1"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/A5B12BBC"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Spectre";
    gv_assassinReq[EventPlayer()] = 25000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpectre_Init () {
    gt_ActivateSpectre = TriggerCreate("gt_ActivateSpectre_Func");
    TriggerAddEventDialogControl(gt_ActivateSpectre, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectre Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_SpectreCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_spectre2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/DC346342"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_spectre2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_spectre2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\spectreportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_spectre2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectreCreation2_Init () {
    gt_SpectreCreation2 = TriggerCreate("gt_SpectreCreation2_Func");
    TriggerAddEventMapInit(gt_SpectreCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Spectre 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpectre2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_spectre2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\spectreportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/DB585BB0"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D8803428"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Spectre";
    gv_assassinReq[EventPlayer()] = 25000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpectre2_Init () {
    gt_ActivateSpectre2 = TriggerCreate("gt_ActivateSpectre2_Func");
    TriggerAddEventDialogControl(gt_ActivateSpectre2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarkTemplar Creation
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_darkTemplar[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_darkTemplar[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_darkTemplar[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\darktemplarportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarCreation_Init () {
    gt_DarkTemplarCreation = TriggerCreate("gt_DarkTemplarCreation_Func");
    TriggerAddEventMapInit(gt_DarkTemplarCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DarkTemplar
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDarkTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_darkTemplar[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\darktemplarportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/3279B7BF"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/48E9225D"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "DarkTemplar";
    gv_assassinReq[EventPlayer()] = 82000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDarkTemplar_Init () {
    gt_ActivateDarkTemplar = TriggerCreate("gt_ActivateDarkTemplar_Func");
    TriggerAddEventDialogControl(gt_ActivateDarkTemplar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarkTemplar Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_darkTemplar2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/1E553146"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_darkTemplar2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_darkTemplar2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\darktemplarportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_darkTemplar2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarCreation2_Init () {
    gt_DarkTemplarCreation2 = TriggerCreate("gt_DarkTemplarCreation2_Func");
    TriggerAddEventMapInit(gt_DarkTemplarCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DarkTemplar 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDarkTemplar2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_darkTemplar2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\darktemplarportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/C584C3CB"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/972DE78F"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "DarkTemplar";
    gv_assassinReq[EventPlayer()] = 82000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDarkTemplar2_Init () {
    gt_ActivateDarkTemplar2 = TriggerCreate("gt_ActivateDarkTemplar2_Func");
    TriggerAddEventDialogControl(gt_ActivateDarkTemplar2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wraith Creation
//--------------------------------------------------------------------------------------------------
bool gt_WraithCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_wraith[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_wraith[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_wraith[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\wraithportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WraithCreation_Init () {
    gt_WraithCreation = TriggerCreate("gt_WraithCreation_Func");
    TriggerAddEventMapInit(gt_WraithCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Wraith
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWraith_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wraith[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\wraithportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/B6F8AEF3"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/29BE25DA"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Wraith";
    gv_assassinReq[EventPlayer()] = 161000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWraith_Init () {
    gt_ActivateWraith = TriggerCreate("gt_ActivateWraith_Func");
    TriggerAddEventDialogControl(gt_ActivateWraith, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wraith Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_WraithCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_wraith2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/3095AB40"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_wraith2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_wraith2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\wraithportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_wraith2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WraithCreation2_Init () {
    gt_WraithCreation2 = TriggerCreate("gt_WraithCreation2_Func");
    TriggerAddEventMapInit(gt_WraithCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Wraith 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWraith2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wraith2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\wraithportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/D770AA26"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/013379B6"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Wraith";
    gv_assassinReq[EventPlayer()] = 161000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWraith2_Init () {
    gt_ActivateWraith2 = TriggerCreate("gt_ActivateWraith2_Func");
    TriggerAddEventDialogControl(gt_ActivateWraith2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tempest Creation
//--------------------------------------------------------------------------------------------------
bool gt_TempestCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_tempest[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tempest[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tempest[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\tempestportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempestCreation_Init () {
    gt_TempestCreation = TriggerCreate("gt_TempestCreation_Func");
    TriggerAddEventMapInit(gt_TempestCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Tempest
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTempest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tempest[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\tempestportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/0C3855E6"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/4747DE4F"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Tempest";
    gv_assassinReq[EventPlayer()] = 386000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTempest_Init () {
    gt_ActivateTempest = TriggerCreate("gt_ActivateTempest_Func");
    TriggerAddEventDialogControl(gt_ActivateTempest, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tempest Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_TempestCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_tempest2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5B91DAE6"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 80, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tempest2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tempest2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\tempestportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_tempest2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempestCreation2_Init () {
    gt_TempestCreation2 = TriggerCreate("gt_TempestCreation2_Func");
    TriggerAddEventMapInit(gt_TempestCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Tempest 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTempest2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tempest2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\tempestportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/93E033D7"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9D55B7C1"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
    gv_unitType[EventPlayer()] = "Tempest";
    gv_assassinReq[EventPlayer()] = 386000;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTempest2_Init () {
    gt_ActivateTempest2 = TriggerCreate("gt_ActivateTempest2_Func");
    TriggerAddEventDialogControl(gt_ActivateTempest2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AssassinHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_AssassinHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_assassinHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E998E3F8"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8B4B1126"));
    gv_assassinHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/06D1EBC6"));
    gv_assassinHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1571B6FC"));
    gv_assassinHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/64A0BF46"));
    gv_assassinHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/37C0111E"));
    gv_assassinHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F5402DB7"));
    gv_assassinHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -390, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_assassinHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_assassinHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_assassinHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_assassinHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssassinHeroCreation_Init () {
    gt_AssassinHeroCreation = TriggerCreate("gt_AssassinHeroCreation_Func");
    TriggerAddEventMapInit(gt_AssassinHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate AssassinHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAssassinHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_assassinHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_assassinHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\ghostportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/A7BA5017"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/2ACDF8FC"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateGhost";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 1)) {
            gv_unitType[EventPlayer()] = "CorporalGhost";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 2)) {
            gv_unitType[EventPlayer()] = "SergeantGhost";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 3)) {
            gv_unitType[EventPlayer()] = "SergeantMajorGhost";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 4)) {
            gv_unitType[EventPlayer()] = "SergeantMajorNova";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 5)) {
            gv_unitType[EventPlayer()] = "LieutenentNova";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier6", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 6)) {
            gv_unitType[EventPlayer()] = "CaptainNova";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier7", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 7)) {
            gv_unitType[EventPlayer()] = "CommissionerNova";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier7", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier8", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 8)) {
            gv_unitType[EventPlayer()] = "CommissionerMarksman";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier7", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier8", 1);
        }

        if ((gv_playerInfo[EventPlayer()].lv_sniperStage == 9)) {
            gv_unitType[EventPlayer()] = "GeneralMarksman";
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier7", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier8", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier10", 1);
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_assassinHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\spectreportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/C9F7834F"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/E1680E62"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Spectre";
        gv_assassinReq[EventPlayer()] = 25000;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_assassinHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\darktemplarportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/56815B37"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C59CF45E"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "DarkTemplar";
        gv_assassinReq[EventPlayer()] = 82000;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_assassinHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\wraithportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/093F5BC6"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/6D37751E"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Wraith";
        gv_assassinReq[EventPlayer()] = 161000;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 150;
    }

    if ((DialogControlGetSelectedItem(gv_assassinHero[1], EventPlayer()) == 5)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\tempestportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/11818CEE"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/2EB03823"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 300, 100);
        gv_unitType[EventPlayer()] = "Tempest";
        gv_assassinReq[EventPlayer()] = 386000;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 250;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAssassinHero_Init () {
    gt_ActivateAssassinHero = TriggerCreate("gt_ActivateAssassinHero_Func");
    TriggerAddEventDialogControl(gt_ActivateAssassinHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Creation
//--------------------------------------------------------------------------------------------------
bool gt_MedicCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_medic[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -400);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_medic[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_medic[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\medicportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicCreation_Init () {
    gt_MedicCreation = TriggerCreate("gt_MedicCreation_Func");
    TriggerAddEventMapInit(gt_MedicCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Medic
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMedic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_medic[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\medicportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/26564B27"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/B4CE542A"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Medic";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMedic_Init () {
    gt_ActivateMedic = TriggerCreate("gt_ActivateMedic_Func");
    TriggerAddEventDialogControl(gt_ActivateMedic, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_MedicCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_medic2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BE82D052"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_medic2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_medic2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\medicportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_medic2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicCreation2_Init () {
    gt_MedicCreation2 = TriggerCreate("gt_MedicCreation2_Func");
    TriggerAddEventMapInit(gt_MedicCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Medic 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMedic2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_medic2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\medicportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/F2C44E64"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/BBCBDF74"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Medic";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 0;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMedic2_Init () {
    gt_ActivateMedic2 = TriggerCreate("gt_ActivateMedic2_Func");
    TriggerAddEventDialogControl(gt_ActivateMedic2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Creation
//--------------------------------------------------------------------------------------------------
bool gt_SentryCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_sentry[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -265);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_sentry[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_sentry[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\sentryportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryCreation_Init () {
    gt_SentryCreation = TriggerCreate("gt_SentryCreation_Func");
    TriggerAddEventMapInit(gt_SentryCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Sentry
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSentry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sentry[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\sentryportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/03599D11"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/9325AFE4"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Sentry";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 3750;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSentry_Init () {
    gt_ActivateSentry = TriggerCreate("gt_ActivateSentry_Func");
    TriggerAddEventDialogControl(gt_ActivateSentry, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_SentryCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_sentry2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2F56C7D9"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -215);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_sentry2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_sentry2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\sentryportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_sentry2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryCreation2_Init () {
    gt_SentryCreation2 = TriggerCreate("gt_SentryCreation2_Func");
    TriggerAddEventMapInit(gt_SentryCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Sentry 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSentry2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sentry2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\sentryportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/CBC49462"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/C9271665"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Sentry";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 3750;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 50;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSentry2_Init () {
    gt_ActivateSentry2 = TriggerCreate("gt_ActivateSentry2_Func");
    TriggerAddEventDialogControl(gt_ActivateSentry2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: High Templar Creation
//--------------------------------------------------------------------------------------------------
bool gt_HighTemplarCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_highTemplar[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_highTemplar[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_highTemplar[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hightemplarportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HighTemplarCreation_Init () {
    gt_HighTemplarCreation = TriggerCreate("gt_HighTemplarCreation_Func");
    TriggerAddEventMapInit(gt_HighTemplarCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate High Templar
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHighTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_highTemplar[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hightemplarportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/F25D9918"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/786BA255"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "HighTemplar";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 56000;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHighTemplar_Init () {
    gt_ActivateHighTemplar = TriggerCreate("gt_ActivateHighTemplar_Func");
    TriggerAddEventDialogControl(gt_ActivateHighTemplar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: High Templar Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_HighTemplarCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_highTemplar2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/103F2E7A"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 110, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_highTemplar2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_highTemplar2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hightemplarportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_highTemplar2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HighTemplarCreation2_Init () {
    gt_HighTemplarCreation2 = TriggerCreate("gt_HighTemplarCreation2_Func");
    TriggerAddEventMapInit(gt_HighTemplarCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate High Templar 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHighTemplar2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_highTemplar2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hightemplarportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/DDD7D9F9"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/A0CBC92E"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "HighTemplar";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 56000;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHighTemplar2_Init () {
    gt_ActivateHighTemplar2 = TriggerCreate("gt_ActivateHighTemplar2_Func");
    TriggerAddEventDialogControl(gt_ActivateHighTemplar2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adept Creation
//--------------------------------------------------------------------------------------------------
bool gt_AdeptCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_adept[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 5);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_adept[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_adept[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdeptCreation_Init () {
    gt_AdeptCreation = TriggerCreate("gt_AdeptCreation_Func");
    TriggerAddEventMapInit(gt_AdeptCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Adept
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAdept_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_adept[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/7EAE29BE"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/F453FF0D"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Adept";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 142000;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAdept_Init () {
    gt_ActivateAdept = TriggerCreate("gt_ActivateAdept_Func");
    TriggerAddEventDialogControl(gt_ActivateAdept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adept Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_AdeptCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_adept2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8E375B20"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 55);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_adept2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_adept2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_adept2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdeptCreation2_Init () {
    gt_AdeptCreation2 = TriggerCreate("gt_AdeptCreation2_Func");
    TriggerAddEventMapInit(gt_AdeptCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Adept 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAdept2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_adept2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/F43095F0"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/78A481A1"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Adept";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 142000;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 150;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAdept2_Init () {
    gt_ActivateAdept2 = TriggerCreate("gt_ActivateAdept2_Func");
    TriggerAddEventDialogControl(gt_ActivateAdept2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raven Creation
//--------------------------------------------------------------------------------------------------
bool gt_RavenCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_raven[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 140);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_raven[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_raven[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ravenportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavenCreation_Init () {
    gt_RavenCreation = TriggerCreate("gt_RavenCreation_Func");
    TriggerAddEventMapInit(gt_RavenCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Raven
//--------------------------------------------------------------------------------------------------
bool gt_ActivateRaven_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_raven[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\ravenportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/316FE5C8"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D8AE9BD6"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Raven";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 333333;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateRaven_Init () {
    gt_ActivateRaven = TriggerCreate("gt_ActivateRaven_Func");
    TriggerAddEventDialogControl(gt_ActivateRaven, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raven 2 Creation
//--------------------------------------------------------------------------------------------------
bool gt_Raven2Creation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_raven2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/571B30BD"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 75, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 190);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_raven2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_raven2[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ravenportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_raven2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Raven2Creation_Init () {
    gt_Raven2Creation = TriggerCreate("gt_Raven2Creation_Func");
    TriggerAddEventMapInit(gt_Raven2Creation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Raven 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateRaven2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_raven2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\ravenportrait_static.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/CBB87CB1"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/BD7BB2FC"), PlayerGroupSingle(EventPlayer()));
    DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
    gv_unitType[EventPlayer()] = "Raven";
    gv_assassinReq[EventPlayer()] = 0;
    gv_assaultReq[EventPlayer()] = 0;
    gv_engineerReq[EventPlayer()] = 0;
    gv_specialistReq[EventPlayer()] = 0;
    gv_supportReq[EventPlayer()] = 333333;
    gv_splashReq[EventPlayer()] = 0;
    gv_tankReq[EventPlayer()] = 0;
    gv_waveReq[EventPlayer()] = 250;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateRaven2_Init () {
    gt_ActivateRaven2 = TriggerCreate("gt_ActivateRaven2_Func");
    TriggerAddEventDialogControl(gt_ActivateRaven2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SupportHero Creation
//--------------------------------------------------------------------------------------------------
bool gt_SupportHeroCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_supportHero[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0B3AFD71"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E042108F"));
    gv_supportHeroButton[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C2CA7792"));
    gv_supportHeroButton[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AA8EDA67"));
    gv_supportHeroButton[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/47FFE249"));
    gv_supportHeroButton[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7867C8C2"));
    gv_supportHeroButton[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E8A0FA72"));
    gv_supportHeroButton[6] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 145, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 350);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_supportHero[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_supportHero[1], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\carrierportrait_static.dds", PlayerGroupAll());
    DialogControlSetVisible(gv_supportHero[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_supportHero[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupportHeroCreation_Init () {
    gt_SupportHeroCreation = TriggerCreate("gt_SupportHeroCreation_Func");
    TriggerAddEventMapInit(gt_SupportHeroCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SupportHero
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSupportHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_supportHero[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_supportHero[1], EventPlayer()) == 1)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\medicportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/1BBAABD9"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D33B73A0"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 0)) {
            gv_unitType[EventPlayer()] = "PrivateMedic";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            gv_unitType[EventPlayer()] = "CorporalMedic";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            gv_unitType[EventPlayer()] = "SergeantMedic";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            gv_unitType[EventPlayer()] = "SergeantMajorMedic";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 4)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
            gv_unitType[EventPlayer()] = "SergeantMajorSurgeon";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 5)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222", 1);
            gv_unitType[EventPlayer()] = "LeutinetSurgeon2";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 6)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222", 1);
            gv_unitType[EventPlayer()] = "CaptainSurgeon";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 7)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322222", 1);
            gv_unitType[EventPlayer()] = "CommissionerSurgeon";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 8)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222222", 1);
            gv_unitType[EventPlayer()] = "CommissionerDoctor";
        }

        if ((gv_playerInfo[EventPlayer()].lv_medicStage == 9)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222222", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222222", 1);
            gv_unitType[EventPlayer()] = "GeneralDoctor";
        }

        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 0;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 0;
    }

    if ((DialogControlGetSelectedItem(gv_supportHero[1], EventPlayer()) == 2)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\sentryportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/00DE94B6"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/D5BE2E52"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Sentry";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 3750;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 50;
    }

    if ((DialogControlGetSelectedItem(gv_supportHero[1], EventPlayer()) == 3)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\hightemplarportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/806D4E9D"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/948217BC"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "HighTemplar";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 56000;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 100;
    }

    if ((DialogControlGetSelectedItem(gv_supportHero[1], EventPlayer()) == 4)) {
        DialogControlSetVisible(gv_heroIcon[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIcon[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_heroIcon[2], "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIcon[1], StringExternal("Param/Value/DF1237CA"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_heroIconReq[1], StringExternal("Param/Value/CEADD1B8"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetSize(gv_heroIconReq[1], PlayerGroupSingle(EventPlayer()), 280, 100);
        gv_unitType[EventPlayer()] = "Adept";
        gv_assassinReq[EventPlayer()] = 0;
        gv_assaultReq[EventPlayer()] = 0;
        gv_engineerReq[EventPlayer()] = 0;
        gv_specialistReq[EventPlayer()] = 0;
        gv_supportReq[EventPlayer()] = 142000;
        gv_splashReq[EventPlayer()] = 0;
        gv_tankReq[EventPlayer()] = 0;
        gv_waveReq[EventPlayer()] = 150;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSupportHero_Init () {
    gt_ActivateSupportHero = TriggerCreate("gt_ActivateSupportHero_Func");
    TriggerAddEventDialogControl(gt_ActivateSupportHero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarineEvo
//--------------------------------------------------------------------------------------------------
bool gt_MarineEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateMarine") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalMarine", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 10000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 10000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalMarine", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/EE98313C") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/AFDDE735") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalMarine") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMarine", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 12500)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 12500;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMarine", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/12DB8961") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/C6FA75CA") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMarine") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorMarine", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 15000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 15000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SergeantMajorMarine", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/E82855E6") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/5FDB9AAA") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorMarine") && (EventUnitAbility() == AbilityCommand("UpgradetoMarineHero1", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 50000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 50000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TychusCommando", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/D2167125") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/06CC5B7E") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
    }

    if ((UnitGetType(EventUnit()) == "TychusCommando") && (EventUnitAbility() == AbilityCommand("UpgradetoLeutinetTychus", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 25000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 5;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 25000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LeutinetTychus", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/AAEADF79") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/1125749D") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
    }

    if ((UnitGetType(EventUnit()) == "LeutinetTychus") && (EventUnitAbility() == AbilityCommand("UpgradetoCaptainTychus", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 30000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 6;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 30000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CaptainTychus", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/9187DB84") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/D3F65AEA") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
    }

    if ((UnitGetType(EventUnit()) == "CaptainTychus") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerTychus", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 35000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 7;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 35000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommissionerTychus", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/7C587781") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/0997B37E") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier81", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerTychus") && (EventUnitAbility() == AbilityCommand("UpgradetoMarineHero2", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 250000)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 8;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 250000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaynorCommando", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/8CEC6134") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/B6758F5B") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier81", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier91", 1);
    }

    if ((UnitGetType(EventUnit()) == "RaynorCommando") && (EventUnitAbility() == AbilityCommand("UpgradetoGeneralRaynor", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 72500)) {
        gv_playerInfo[EventPlayer()].lv_marineStage = 9;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "marinestage", gv_playerInfo[EventPlayer()].lv_marineStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 72500;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GeneralRaynor", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/B864D84A") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/C57F88F8") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier31", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier41", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier51", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier61", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier71", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier81", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier91", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineTier101", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineEvo_Init () {
    gt_MarineEvo = TriggerCreate("gt_MarineEvo_Func");
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoCorporalMarine", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoSergeantMarine", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoSergeantMajorMarine", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoMarineHero1", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoLeutinetTychus", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoCaptainTychus", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoCommissionerTychus", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoMarineHero2", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MarineEvo, null, AbilityCommand("UpgradetoGeneralRaynor", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedicEvo
//--------------------------------------------------------------------------------------------------
bool gt_MedicEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateMedic") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalMedic", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 5000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 5000;
        BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalMedic", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/0CA33D9A") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/96C8DBBC") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier2", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalMedic") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMedic", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 6000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 6000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMedic", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/B118C367") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/346177A3") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMedic") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorMedic", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 7000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 7000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorMedic", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/0FB28994") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/BB09ABDF") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorMedic") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorSurgeon", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 25000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 25000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorSurgeon", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/18EF7F54") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/AFC92DF1") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorSurgeon") && (EventUnitAbility() == AbilityCommand("UpgradetoLeutinetSurgeon", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 10000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 5;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 10000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "LeutinetSurgeon2", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/0E5C4AAB") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/624E739D") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222", 1);
    }

    if ((UnitGetType(EventUnit()) == "LeutinetSurgeon2") && (EventUnitAbility() == AbilityCommand("UpgradetoCaptainSurgeon", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 12500)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 6;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 12500;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CaptainSurgeon", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/9CC5A1D9") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/DABA1364") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CaptainSurgeon") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerSurgeon", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 15000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 7;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 15000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerSurgeon", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/5D32C4A1") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/179F790F") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier322222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerSurgeon") && (EventUnitAbility() == AbilityCommand("UpgradetoMedicHeroS2", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 125000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 8;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 125000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerDoctor", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/5C25E5F4") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/F02732B8") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier3222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerDoctor") && (EventUnitAbility() == AbilityCommand("UpgradetoGeneralDoctor", 0)) && (gv_playerInfo[EventPlayer()].lv_supportKills >= 35000)) {
        gv_playerInfo[EventPlayer()].lv_medicStage = 9;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "medicstage", gv_playerInfo[EventPlayer()].lv_medicStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_supportKills -= 35000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "GeneralDoctor", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/F0C52EA8") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/9BA3D54D") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MedicTier32222222", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicEvo_Init () {
    gt_MedicEvo = TriggerCreate("gt_MedicEvo_Func");
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoCorporalMedic", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoSergeantMedic", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoSergeantMajorMedic", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoSergeantMajorSurgeon", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoLeutinetSurgeon", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoCaptainSurgeon", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoCommissionerSurgeon", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoMedicHeroS2", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_MedicEvo, null, AbilityCommand("UpgradetoGeneralDoctor", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VultureEvo
//--------------------------------------------------------------------------------------------------
bool gt_VultureEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Vulture2") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalVulture", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 10000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 10000;
        BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalVulture", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/CA99A220") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/99FC5A89") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalVulture") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantVulture", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 12500)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 12500;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantVulture", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/ECE66FC5") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/5D4A97A5") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantVulture") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorVulture", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 15000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 15000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorVulture", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/44EDB6F8") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/2A32DAF7") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorVulture") && (EventUnitAbility() == AbilityCommand("UpgradetoVultureHeroS1", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 50000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 50000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorBiker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/CA312477") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/C4714337") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorBiker") && (EventUnitAbility() == AbilityCommand("UpgradetoLeutinetBiker", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 25000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 5;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 25000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "LeutinetBiker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/3026163B") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/1A6A3C70") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222", 1);
    }

    if ((UnitGetType(EventUnit()) == "LeutinetBiker") && (EventUnitAbility() == AbilityCommand("UpgradetoCaptainBiker", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 30000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 6;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 30000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CaptainBiker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/CBFDF8A6") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/45C6094F") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CaptainBiker") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerBiker", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 35000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 7;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 35000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerBiker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/30218979") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/E3AAAEB3") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier2222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerBiker") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerScooter", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 250000)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 8;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 250000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerScooter", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/A8E65C21") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/AED84EA8") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier22222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerScooter") && (EventUnitAbility() == AbilityCommand("UpgradetoGeneralScooter", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 72500)) {
        gv_playerInfo[EventPlayer()].lv_vultureStage = 9;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "vultures", gv_playerInfo[EventPlayer()].lv_vultureStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 72500;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "GeneralScooter", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/9B9E10BB") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/A5DD70A1") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VultureTier222222222", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VultureEvo_Init () {
    gt_VultureEvo = TriggerCreate("gt_VultureEvo_Func");
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoCorporalVulture", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoSergeantVulture", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoSergeantMajorVulture", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoVultureHeroS1", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoLeutinetBiker", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoCaptainBiker", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoCommissionerBiker", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoCommissionerScooter", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VultureEvo, null, AbilityCommand("UpgradetoGeneralScooter", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GhostEvo
//--------------------------------------------------------------------------------------------------
bool gt_GhostEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateGhost") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalGhost", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 10000)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 10000;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalGhost", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/EA030777") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/F8E61EF0") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier2", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalGhost") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantGhost", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 12500)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 12500;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantGhost", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/9BE2ACB0") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/F4000524") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier3", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantGhost") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorGhost", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 15000)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 15000;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorGhost", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/4AF1C0F3") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/1F8BAC6B") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier4", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorGhost") && (EventUnitAbility() == AbilityCommand("UpgradetoGhostHero1", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 60000)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 60000;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorNova", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/93201B61") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/52D0548A") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier5", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorNova") && (EventUnitAbility() == AbilityCommand("UpgradetoLeutinetNova", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 27500)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 5;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 27500;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "LieutenentNova", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/E6A78E6E") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/B688FF6C") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier6", 1);
    }

    if ((UnitGetType(EventUnit()) == "LieutenentNova") && (EventUnitAbility() == AbilityCommand("UpgradetoCaptainNova", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 32500)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 6;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 32500;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CaptainNova", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/C654D266") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/51C12090") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier7", 1);
    }

    if ((UnitGetType(EventUnit()) == "CaptainNova") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerNova", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 37500)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 7;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 37500;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerNova", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/3021DC0F") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/72237156") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier8", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerNova") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerMarksman", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 300000)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 8;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 300000;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerMarksman", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/E854BA7F") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/0B07E20C") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    }

    if ((UnitGetType(EventUnit()) == "CommissionerMarksman") && (EventUnitAbility() == AbilityCommand("UpgradetoGeneralMarksman", 0)) && (gv_playerInfo[EventPlayer()].lv_asassinKills >= 80000)) {
        gv_playerInfo[EventPlayer()].lv_sniperStage = 9;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "sniperstage", gv_playerInfo[EventPlayer()].lv_sniperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_asassinKills -= 80000;
        BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
        UnitKill(EventUnit());
        UnitCreate(1, "GeneralMarksman", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/F701C777") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/C636C05F") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostTier10", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostEvo_Init () {
    gt_GhostEvo = TriggerCreate("gt_GhostEvo_Func");
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoCorporalGhost", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoSergeantGhost", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoSergeantMajorGhost", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoGhostHero1", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoLeutinetNova", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoCaptainNova", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoCommissionerNova", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoCommissionerMarksman", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_GhostEvo, null, AbilityCommand("UpgradetoGeneralMarksman", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZealotEvo
//--------------------------------------------------------------------------------------------------
bool gt_ZealotEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateZealot") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalZealot", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 7500)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 7500;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalZealot", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/2613DDC4") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/4C8E4A06") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier21", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalZealot") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantZealot", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 10000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 10000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantZealot", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/601D373E") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/D7E86B76") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier31", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantZealot") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorZealot", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 12500)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 12500;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorZealot", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/CE1FD17C") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/1E2E0539") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier41", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorZealot") && (EventUnitAbility() == AbilityCommand("UpgradetoZealotHero1", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 40000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 40000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "ZealotShakuras", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/883DCCEF") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/D06D0336") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
    }

    if ((UnitGetType(EventUnit()) == "ZealotShakuras") && (EventUnitAbility() == AbilityCommand("UpgradetoLeutinetCenturion", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 20000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 5;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 20000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "LeutinetCenturion", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/23289861") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/D2DDF9B1") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier61", 1);
    }

    if ((UnitGetType(EventUnit()) == "LeutinetCenturion") && (EventUnitAbility() == AbilityCommand("UpgradetoCaptainCenturion", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 25000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 6;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 25000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CaptainCenturion", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/8FA31775") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/6B83E4F8") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier71", 1);
    }

    if ((UnitGetType(EventUnit()) == "CaptainCenturion") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerCenturion", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 30000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 7;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 30000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerCenturion", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/53E93FB8") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/AE4DC522") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier81", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerCenturion") && (EventUnitAbility() == AbilityCommand("UpgradetoZealotHero2", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 200000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 8;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 200000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerSentinel", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/A7825035") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/9CBE49C8") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier91", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerSentinel") && (EventUnitAbility() == AbilityCommand("UpgradetoGeneralSentinel", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 65000)) {
        gv_playerInfo[EventPlayer()].lv_metalManStage = 9;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "metalmans", gv_playerInfo[EventPlayer()].lv_metalManStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 65000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "GeneralSentinel", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/649E8B6B") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/82CB1B16") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZealotTier101", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotEvo_Init () {
    gt_ZealotEvo = TriggerCreate("gt_ZealotEvo_Func");
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoCorporalZealot", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoSergeantZealot", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoSergeantMajorZealot", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoZealotHero1", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoLeutinetCenturion", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoCaptainCenturion", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoCommissionerCenturion", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoZealotHero2", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ZealotEvo, null, AbilityCommand("UpgradetoGeneralSentinel", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StalkerEvo
//--------------------------------------------------------------------------------------------------
bool gt_StalkerEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateStalker") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalStalker", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 15000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 15000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalStalker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/D47C8781") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/4DE05DCE") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalStalker") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantStalker", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 17500)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 17500;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantStalker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/01657956") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/77472DF3") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantStalker") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorStalker", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 20000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 20000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorStalker", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/4A66FDFB") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/E3972356") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorStalker") && (EventUnitAbility() == AbilityCommand("UpgradetoStalkerHeroS1", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 75000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 75000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorInstigator", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/E4B84086") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/33DD1588") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorInstigator") && (EventUnitAbility() == AbilityCommand("UpgradetoLeutinetInstigator", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 30000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 5;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 30000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "LeutinetInstigator", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/90BD4627") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/320D49D4") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222", 1);
    }

    if ((UnitGetType(EventUnit()) == "LeutinetInstigator") && (EventUnitAbility() == AbilityCommand("UpgradetoCaptainInstigator", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 35000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 6;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 35000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CaptainInstigator", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/44F39A0E") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/C9D2F081") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier1222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CaptainInstigator") && (EventUnitAbility() == AbilityCommand("UpgradetoCommissionerInstigator", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 40000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 7;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 40000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CommissionerInstigator", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/9E60E6F4") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/10F5BE3B") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier12222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "CommissionerInstigator") && (EventUnitAbility() == AbilityCommand("UpgradetoStalkerHeroS2", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 350000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 8;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 350000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "Dragoon", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/97A8A078") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/E140C610") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222222", 1);
    }

    if ((UnitGetType(EventUnit()) == "Dragoon") && (EventUnitAbility() == AbilityCommand("UpgradetoGeneralDragoon", 0)) && (gv_playerInfo[EventPlayer()].lv_specialistKills >= 90000)) {
        gv_playerInfo[EventPlayer()].lv_stalkerStage = 9;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "stalkerstage", gv_playerInfo[EventPlayer()].lv_stalkerStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_specialistKills -= 90000;
        BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
        UnitKill(EventUnit());
        UnitCreate(1, "GeneralDragoon", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/518BD1F1") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/063D007B") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "StalkerTier122222223", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerEvo_Init () {
    gt_StalkerEvo = TriggerCreate("gt_StalkerEvo_Func");
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoCorporalStalker", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoSergeantStalker", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoSergeantMajorStalker", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoStalkerHeroS1", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoLeutinetInstigator", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoCaptainInstigator", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoCommissionerInstigator", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoStalkerHeroS2", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StalkerEvo, null, AbilityCommand("UpgradetoGeneralDragoon", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReaperEvo
//--------------------------------------------------------------------------------------------------
bool gt_ReaperEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateReaper") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalReaper", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 10000)) {
        gv_playerInfo[EventPlayer()].lv_reaperStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "reaperstage", gv_playerInfo[EventPlayer()].lv_reaperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 10000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalReaper", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/CD001542") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/0D06A0E9") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier2", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalReaper") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantReaper", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 15000)) {
        gv_playerInfo[EventPlayer()].lv_reaperStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "reaperstage", gv_playerInfo[EventPlayer()].lv_reaperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 15000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantReaper", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/BB71C2F7") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/7686E4E1") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier3", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantReaper") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorReaper", 0)) && (gv_playerInfo[EventPlayer()].lv_splashKills >= 25000)) {
        gv_playerInfo[EventPlayer()].lv_reaperStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "reaperstage", gv_playerInfo[EventPlayer()].lv_reaperStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_splashKills -= 25000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorReaper", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/7691B00A") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/19533D4F") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperTier4", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaperEvo_Init () {
    gt_ReaperEvo = TriggerCreate("gt_ReaperEvo_Func");
    TriggerAddEventUnitAbility(gt_ReaperEvo, null, AbilityCommand("UpgradetoCorporalReaper", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ReaperEvo, null, AbilityCommand("UpgradetoSergeantReaper", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ReaperEvo, null, AbilityCommand("UpgradetoSergeantMajorReaper", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidRayEvo
//--------------------------------------------------------------------------------------------------
bool gt_VoidRayEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PrivateVoidRay") && (EventUnitAbility() == AbilityCommand("UpgradetoCorporalVoidRay", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 20000)) {
        gv_playerInfo[EventPlayer()].lv_voidRayStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "dynomito", gv_playerInfo[EventPlayer()].lv_voidRayStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 20000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "CorporalVoidRay", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/1470EA6A") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/16986E61") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier21", 1);
    }

    if ((UnitGetType(EventUnit()) == "CorporalVoidRay") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantVoidRay", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 25000)) {
        gv_playerInfo[EventPlayer()].lv_voidRayStage = 2;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "dynomito", gv_playerInfo[EventPlayer()].lv_voidRayStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 25000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantVoidRay", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/79168361") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/71A2DAE0") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier31", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantVoidRay") && (EventUnitAbility() == AbilityCommand("UpgradetoSergeantMajorVoidRay", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 30000)) {
        gv_playerInfo[EventPlayer()].lv_voidRayStage = 3;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "dynomito", gv_playerInfo[EventPlayer()].lv_voidRayStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 30000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "SergeantMajorVoidRay", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/1A3103AA") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/66CA9863") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier41", 1);
    }

    if ((UnitGetType(EventUnit()) == "SergeantMajorVoidRay") && (EventUnitAbility() == AbilityCommand("UpgradetoVoidRayHero1", 0)) && (gv_playerInfo[EventPlayer()].lv_singleTargetKills >= 75000)) {
        gv_playerInfo[EventPlayer()].lv_voidRayStage = 4;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "dynomito", gv_playerInfo[EventPlayer()].lv_voidRayStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_singleTargetKills -= 75000;
        BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
        UnitKill(EventUnit());
        UnitCreate(1, "Mohandar", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/C87AFFC6") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/631F04CB") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidRayTier51", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRayEvo_Init () {
    gt_VoidRayEvo = TriggerCreate("gt_VoidRayEvo_Func");
    TriggerAddEventUnitAbility(gt_VoidRayEvo, null, AbilityCommand("UpgradetoCorporalVoidRay", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VoidRayEvo, null, AbilityCommand("UpgradetoSergeantVoidRay", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VoidRayEvo, null, AbilityCommand("UpgradetoSergeantMajorVoidRay", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_VoidRayEvo, null, AbilityCommand("UpgradetoVoidRayHero1", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridEvo
//--------------------------------------------------------------------------------------------------
bool gt_HybridEvo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "RagingHybrid") && (EventUnitAbility() == AbilityCommand("UpgradetoOutragingHybrid", 0)) && (gv_playerInfo[EventPlayer()].lv_tankKills >= 100000)) {
        gv_playerInfo[EventPlayer()].lv_hybridStage = 1;
        BankLoad("zombieworldu", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "j", "hybridstage", gv_playerInfo[EventPlayer()].lv_hybridStage);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
        gv_playerInfo[EventPlayer()].lv_tankKills -= 100000;
        BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
        UnitKill(EventUnit());
        UnitCreate(1, "OutragingHybrid", 0, EventPlayer(), UnitGetPosition(EventUnit()), 270.0);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        UnitGroupAdd(gv_tEAM, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/9A4C9272") + (UnitGetName(EventUnit()) + (StringExternal("Param/Value/FEEDD9F0") + UnitGetName(UnitLastCreated()))))));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HybridTier2", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridEvo_Init () {
    gt_HybridEvo = TriggerCreate("gt_HybridEvo_Func");
    TriggerAddEventUnitAbility(gt_HybridEvo, null, AbilityCommand("UpgradetoOutragingHybrid", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -145
//--------------------------------------------------------------------------------------------------
bool gt__145_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1B214FBD_ae = 8;
    int auto1B214FBD_var;

    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 145;
    gv_zombielife = 1000;
    auto1B214FBD_var = 1;
    for ( ; auto1B214FBD_var <= auto1B214FBD_ae; auto1B214FBD_var += 1 ) {
        PlayerModifyPropertyInt(auto1B214FBD_var, c_playerPropMinerals, c_playerPropOperSetTo, 9999999);
        PlayerModifyPropertyInt(auto1B214FBD_var, c_playerPropVespene, c_playerPropOperSetTo, 9999999);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__145_Init () {
    gt__145 = TriggerCreate("gt__145_Func");
    TriggerAddEventChatMessage(gt__145, c_playerAny, "-145", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -61
//--------------------------------------------------------------------------------------------------
bool gt__61_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto503C97E2_ae = 8;
    int auto503C97E2_var;

    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 61;
    auto503C97E2_var = 1;
    for ( ; auto503C97E2_var <= auto503C97E2_ae; auto503C97E2_var += 1 ) {
        PlayerModifyPropertyInt(auto503C97E2_var, c_playerPropMinerals, c_playerPropOperSetTo, 9999999);
        PlayerModifyPropertyInt(auto503C97E2_var, c_playerPropVespene, c_playerPropOperSetTo, 9999999);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__61_Init () {
    gt__61 = TriggerCreate("gt__61_Func");
    TriggerAddEventChatMessage(gt__61, c_playerAny, "-60", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -146
//--------------------------------------------------------------------------------------------------
bool gt__146_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE13D38CE_ae = 8;
    int autoE13D38CE_var;

    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 750;
    gv_zombielife = 45000;
    autoE13D38CE_var = 1;
    for ( ; autoE13D38CE_var <= autoE13D38CE_ae; autoE13D38CE_var += 1 ) {
        PlayerModifyPropertyInt(autoE13D38CE_var, c_playerPropMinerals, c_playerPropOperSetTo, 9999999);
        PlayerModifyPropertyInt(autoE13D38CE_var, c_playerPropVespene, c_playerPropOperSetTo, 9999999);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__146_Init () {
    gt__146 = TriggerCreate("gt__146_Func");
    TriggerAddEventChatMessage(gt__146, c_playerAny, "-finewhateverman", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Playerdies
//--------------------------------------------------------------------------------------------------
bool gt_Playerdies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 11))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 13))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemyKilleType = libNtve_gf_KillingUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerdies_Init () {
    gt_Playerdies = TriggerCreate("gt_Playerdies_Func");
    TriggerAddEventUnitDied(gt_Playerdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -kill
//--------------------------------------------------------------------------------------------------
bool gt_kill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB0B1C53B_g;
    int autoB0B1C53B_u;
    unit autoB0B1C53B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0B1C53B_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB0B1C53B_u = UnitGroupCount(autoB0B1C53B_g, c_unitCountAll);
    for (;; autoB0B1C53B_u -= 1) {
        autoB0B1C53B_var = UnitGroupUnitFromEnd(autoB0B1C53B_g, autoB0B1C53B_u);
        if (autoB0B1C53B_var == null) { break; }
        if ((UnitGetType(autoB0B1C53B_var) != "CyberneticsCore")) {
            UnitKill(autoB0B1C53B_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kill_Init () {
    gt_kill = TriggerCreate("gt_kill_Func");
    TriggerEnable(gt_kill, false);
    TriggerAddEventChatMessage(gt_kill, c_playerAny, "-kill", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -SpawnNow
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowSetTimer(TimerWindowLastCreated(), TimerCreate());
    gv_instaSpawn[EventPlayer()] = 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNow_Init () {
    gt_SpawnNow = TriggerCreate("gt_SpawnNow_Func");
    TriggerAddEventChatMessage(gt_SpawnNow, c_playerAny, "-SpawnNow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndGameCondition
//--------------------------------------------------------------------------------------------------
bool gt_EndGameCondition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_EndGame, true);
    TriggerEnable(gt_Respawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGameCondition_Init () {
    gt_EndGameCondition = TriggerCreate("gt_EndGameCondition_Func");
    TriggerAddEventTimeElapsed(gt_EndGameCondition, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn
//--------------------------------------------------------------------------------------------------
bool gt_Respawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialHybrid1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshRadius[lv_triggeringPlayer] -= 2.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBootsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitalsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkMage1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaver1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMothership1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialBattlecruiser1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHybrid1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialRaven1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAlarak1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArtanis1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialRaven1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzZealot", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzMedic", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/C5650F39") + UnitGetName(gv_enemyKilleType))) + (StringExternal("Param/Value/DEB5A9EF") + (TextWithColor(IntToText((60 - gv_playerInfo[EventPlayer()].lv_respawnTimerPoints)), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/25A098DC")))));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/4FFEED94"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    TimerStart(TimerCreate(), (60 - gv_playerInfo[lv_triggeringPlayer].lv_respawnTimerPoints), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/A174EC2D"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lv_triggeringPlayer), true);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    while (!(((gv_instaSpawn[lv_triggeringPlayer] == 2) || (TimerGetRemaining(TimerLastStarted()) < 1.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(TimerWindowLastCreated());
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_assassinHero[1], PlayerGroupSingle(EventPlayer()), 6);
    DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_assaultHero[1], PlayerGroupSingle(EventPlayer()), 6);
    DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_tankHero[1], PlayerGroupSingle(EventPlayer()), 7);
    DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_specialistHero[1], PlayerGroupSingle(EventPlayer()), 6);
    DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_splashHero[1], PlayerGroupSingle(EventPlayer()), 6);
    DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_supportHero[1], PlayerGroupSingle(EventPlayer()), 6);
    DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_engineerHero[1], PlayerGroupSingle(EventPlayer()), 6);
    DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSelectItem(gv_comboHero[1], PlayerGroupSingle(EventPlayer()), 5);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Respawn_Init () {
    gt_Respawn = TriggerCreate("gt_Respawn_Func");
    TriggerEnable(gt_Respawn, false);
    TriggerAddEventPlayerPropChange(gt_Respawn, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Respawn, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn-CLInfantry
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCLInfantry_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialHybrid1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshRadius[lv_triggeringPlayer] -= 2.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBootsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitalsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkMage1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaver1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMothership1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialBattlecruiser1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHybrid1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzZealot", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzMedic", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/806261E4") + UnitGetName(gv_enemyKilleType))) + (StringExternal("Param/Value/2A3EA1EF") + (TextWithColor(IntToText((60 - gv_playerInfo[EventPlayer()].lv_respawnTimerPoints)), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/06096D8F")))));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/1B6FB76F"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    TimerStart(TimerCreate(), (60 - gv_playerInfo[lv_triggeringPlayer].lv_respawnTimerPoints), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/0B281C66"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lv_triggeringPlayer), true);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    while (!(((gv_instaSpawn[lv_triggeringPlayer] == 2) || (TimerGetRemaining(TimerLastStarted()) < 1.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(TimerWindowLastCreated());
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnCLInfantry_Init () {
    gt_RespawnCLInfantry = TriggerCreate("gt_RespawnCLInfantry_Func");
    TriggerEnable(gt_RespawnCLInfantry, false);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLInfantry, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn-CLTeamGame
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCLTeamGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialHybrid1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshRadius[lv_triggeringPlayer] -= 2.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBootsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitalsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkMage1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaver1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMothership1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialBattlecruiser1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHybrid1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzZealot", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzMedic", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/399043EF") + UnitGetName(gv_enemyKilleType))) + (StringExternal("Param/Value/3D2CAA4C") + (TextWithColor(IntToText((60 - gv_playerInfo[EventPlayer()].lv_respawnTimerPoints)), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/A604DA2A")))));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/9F7E7087"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    TimerStart(TimerCreate(), (60 - gv_playerInfo[lv_triggeringPlayer].lv_respawnTimerPoints), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/6A43F8CE"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lv_triggeringPlayer), true);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    while (!(((gv_instaSpawn[lv_triggeringPlayer] == 2) || (TimerGetRemaining(TimerLastStarted()) < 1.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(TimerWindowLastCreated());
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnCLTeamGame_Init () {
    gt_RespawnCLTeamGame = TriggerCreate("gt_RespawnCLTeamGame_Func");
    TriggerEnable(gt_RespawnCLTeamGame, false);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTeamGame, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn-CLConstructor
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCLConstructor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialHybrid1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshRadius[lv_triggeringPlayer] -= 2.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBootsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitalsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkMage1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaver1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMothership1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialBattlecruiser1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHybrid1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzZealot", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzMedic", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/D2618145") + UnitGetName(gv_enemyKilleType))) + (StringExternal("Param/Value/AFBC4C7E") + (TextWithColor(IntToText((60 - gv_playerInfo[EventPlayer()].lv_respawnTimerPoints)), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/5A5A3F1D")))));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/BA546DB8"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    TimerStart(TimerCreate(), (60 - gv_playerInfo[lv_triggeringPlayer].lv_respawnTimerPoints), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/F19670BE"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lv_triggeringPlayer), true);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    while (!(((gv_instaSpawn[lv_triggeringPlayer] == 2) || (TimerGetRemaining(TimerLastStarted()) < 1.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(TimerWindowLastCreated());
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnCLConstructor_Init () {
    gt_RespawnCLConstructor = TriggerCreate("gt_RespawnCLConstructor_Func");
    TriggerEnable(gt_RespawnCLConstructor, false);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLConstructor, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn-CLEvasive
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCLEvasive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialHybrid1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshRadius[lv_triggeringPlayer] -= 2.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBootsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitalsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkMage1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaver1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMothership1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialBattlecruiser1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHybrid1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzZealot", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzMedic", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/6D883DC2") + UnitGetName(gv_enemyKilleType))) + (StringExternal("Param/Value/555D62EA") + (TextWithColor(IntToText((60 - gv_playerInfo[EventPlayer()].lv_respawnTimerPoints)), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/1A2D4B86")))));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/11ED5ED9"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    TimerStart(TimerCreate(), (60 - gv_playerInfo[lv_triggeringPlayer].lv_respawnTimerPoints), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/55FD566C"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lv_triggeringPlayer), true);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    while (!(((gv_instaSpawn[lv_triggeringPlayer] == 2) || (TimerGetRemaining(TimerLastStarted()) < 1.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(TimerWindowLastCreated());
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), true);
    if ((EventPlayer() == gv_only1Oracle)) {
        DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnCLEvasive_Init () {
    gt_RespawnCLEvasive = TriggerCreate("gt_RespawnCLEvasive_Func");
    TriggerEnable(gt_RespawnCLEvasive, false);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLEvasive, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn-CLTorture
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCLTorture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialHybrid1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshRadius[lv_triggeringPlayer] -= 2.5;
    }

    if ((TechTreeUpgradeCount(lv_triggeringPlayer, "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        gv_skadooshMultiplier[lv_triggeringPlayer] -= 0.5;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBootsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitalsBehavior1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkMage1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaver1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMothership1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialBattlecruiser1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHybrid1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialRaven1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAlarak1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArtanis1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialRaven1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzZealot", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzzMedic", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/3080B97C") + UnitGetName(gv_enemyKilleType))) + (StringExternal("Param/Value/D2BDFC3A") + (TextWithColor(IntToText((60 - gv_playerInfo[EventPlayer()].lv_respawnTimerPoints)), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/66ED7865")))));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/AACAD65F"));
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    TimerStart(TimerCreate(), (60 - gv_playerInfo[lv_triggeringPlayer].lv_respawnTimerPoints), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/AA6C8528"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(lv_triggeringPlayer), true);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorCenter, 0, 0);
    while (!(((gv_instaSpawn[lv_triggeringPlayer] == 2) || (TimerGetRemaining(TimerLastStarted()) < 1.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(TimerWindowLastCreated());
    DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnCLTorture_Init () {
    gt_RespawnCLTorture = TriggerCreate("gt_RespawnCLTorture_Func");
    TriggerEnable(gt_RespawnCLTorture, false);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnCLTorture, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RespawnChallengeMode
//--------------------------------------------------------------------------------------------------
bool gt_RespawnChallengeMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_place;
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_triggeringPlayer = EventPlayer();
    PlayerModifyPropertyInt(lv_triggeringPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DarkTemplarChargeCooldown1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "UnknownUpgrade4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedGlove1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedCooldowns1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "VisionandRange1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpeedBoots1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "DamageBonus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "BonusVitals21", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialArchon1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDiamondBack1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGhost1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarine1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMedic1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMiner1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHydralisk1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialPredator1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSCV1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSentry1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSpectre1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStalker1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialViking1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialSiegeTank1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHellion1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHighTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialFirebat1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialAdept1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCyclone1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialColossus1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialThor1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialTempest1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCarrier1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialCorsair1", 0);
    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault")) {
        TriggerEnable(gt_SpeedCooldowns, false);
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVoidRay1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialVulture1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialZealot1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialReaper1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialImmortal1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialHERC1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialWraith1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialDarkTemplar1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialGoliath1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialScout1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialOracle1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialMarauder1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "SpecialStats1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_triggeringPlayer, "zzz2", 0);
    TextTagShow(gv_biggerBulets, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedSpecialties, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_sightRange, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedBoots, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedCooldown, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_speedGloves, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_bonusVitals, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_specialStats, PlayerGroupSingle(lv_triggeringPlayer), true);
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(lv_triggeringPlayer), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false))) + (StringExternal("Param/Value/EE39DD53") + IntToText(gv_challengeModePos))) + StringExternal("Param/Value/99DC3CAC")));
    gv_playerInfo[lv_triggeringPlayer].lv_deaths = (gv_playerInfo[lv_triggeringPlayer].lv_deaths + 1);
    BoardItemSetText(gv_thisgmaeleader, 4, lv_triggeringPlayer, IntToText(gv_playerInfo[lv_triggeringPlayer].lv_deaths));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, lv_triggeringPlayer, 16);
    if ((gv_challengeModePos == 6)) {
        BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/FE578D99"));
    }

    if ((gv_challengeModePos == 5)) {
        BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/F096E930"));
    }

    if ((gv_challengeModePos == 4)) {
        BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/C64B30DC"));
    }

    if ((gv_challengeModePos == 3)) {
        BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/F50009D4"));
    }

    if ((gv_challengeModePos == 2)) {
        BoardItemSetText(gv_thisgmaeleader, 3, lv_triggeringPlayer, StringExternal("Param/Value/9CC22A1B"));
    }

    gv_challengeModePos -= 1;
    BoardItemSetFontSize(gv_thisgmaeleader, 3, lv_triggeringPlayer, 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnChallengeMode_Init () {
    gt_RespawnChallengeMode = TriggerCreate("gt_RespawnChallengeMode_Func");
    TriggerEnable(gt_RespawnChallengeMode, false);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_RespawnChallengeMode, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndGame
//--------------------------------------------------------------------------------------------------
bool gt_EndGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9BEF0616_ae = 8;
    int auto9BEF0616_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyFixed(1, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(2, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(3, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(4, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(5, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(6, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(7, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }

        if (!((PlayerGetPropertyFixed(8, c_playerPropSuppliesUsed) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BEF0616_var = 1;
    for ( ; auto9BEF0616_var <= auto9BEF0616_ae; auto9BEF0616_var += 1 ) {
        GameOver(auto9BEF0616_var, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGame_Init () {
    gt_EndGame = TriggerCreate("gt_EndGame_Func");
    TriggerEnable(gt_EndGame, false);
    TriggerAddEventPlayerPropChange(gt_EndGame, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_EndGame, 8, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BlacklistHackers
//--------------------------------------------------------------------------------------------------
bool gt_BlacklistHackers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4BDD1613_ae = 6;
    int auto4BDD1613_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4BDD1613_var = 1;
    for ( ; auto4BDD1613_var <= auto4BDD1613_ae; auto4BDD1613_var += 1 ) {
        if ((PlayerHandle(auto4BDD1613_var) == "2-S2-2-2474602")) {
            gv_playerInfo[auto4BDD1613_var].lv_tankKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_supportKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_specialistKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_asassinKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_singleTargetKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_splashKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_builderKills = -696969;
            gv_playerInfo[auto4BDD1613_var].lv_highestWave = -696969;
            BoardItemSetText(gv_leaderboard, 2, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_highestWave));
            BoardItemSetText(gv_leaderboard, 3, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_tankKills));
            BoardItemSetText(gv_leaderboard, 4, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_supportKills));
            BoardItemSetText(gv_leaderboard, 5, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_specialistKills));
            BoardItemSetText(gv_leaderboard, 6, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_splashKills));
            BoardItemSetText(gv_leaderboard, 7, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_asassinKills));
            BoardItemSetText(gv_leaderboard, 8, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_singleTargetKills));
            BoardItemSetText(gv_leaderboard, 9, auto4BDD1613_var, IntToText(gv_playerInfo[auto4BDD1613_var].lv_builderKills));
            BoardItemSetFontSize(gv_leaderboard, 2, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 3, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 4, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 5, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 6, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 7, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 8, auto4BDD1613_var, 16);
            BoardItemSetFontSize(gv_leaderboard, 9, auto4BDD1613_var, 16);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlacklistHackers_Init () {
    gt_BlacklistHackers = TriggerCreate("gt_BlacklistHackers_Func");
    TriggerAddEventTimePeriodic(gt_BlacklistHackers, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -PlayerID
//--------------------------------------------------------------------------------------------------
bool gt_PlayerID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/3E384038") + StringToText(PlayerHandle(EventPlayer()))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerID_Init () {
    gt_PlayerID = TriggerCreate("gt_PlayerID_Func");
    TriggerAddEventChatMessage(gt_PlayerID, c_playerAny, "-PlayerID", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -TeamID
//--------------------------------------------------------------------------------------------------
bool gt_TeamID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDC91CA2C_ae = 6;
    int autoDC91CA2C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC91CA2C_var = 1;
    for ( ; autoDC91CA2C_var <= autoDC91CA2C_ae; autoDC91CA2C_var += 1 ) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, ((StringExternal("Param/Value/13B9E869") + (PlayerName(autoDC91CA2C_var) + StringExternal("Param/Value/8DD7C11A"))) + StringToText(PlayerHandle(autoDC91CA2C_var))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamID_Init () {
    gt_TeamID = TriggerCreate("gt_TeamID_Func");
    TriggerAddEventChatMessage(gt_TeamID, c_playerAny, "-TeamID", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourceTrading
//--------------------------------------------------------------------------------------------------
bool gt_ResourceTrading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceTradeCountdownTime(0);
    UISetResourceTradingMinorStep(c_resourceTypeMinerals, 100);
    UISetResourceTradingMajorStep(c_resourceTypeMinerals, 1500);
    UISetResourceTradingMajorStep(c_resourceTypeVespene, 500);
    UISetResourceTradingMajorStep(c_resourceTypeCustom, 0);
    UISetResourceTradingMinorStep(c_resourceTypeCustom, 0);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, true);
    GameCheatAllow(c_gameCheatAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceTrading_Init () {
    gt_ResourceTrading = TriggerCreate("gt_ResourceTrading_Func");
    TriggerAddEventMapInit(gt_ResourceTrading);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowCommands
//--------------------------------------------------------------------------------------------------
bool gt_ShowCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_commands, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowCommands_Init () {
    gt_ShowCommands = TriggerCreate("gt_ShowCommands_Func");
    TriggerAddEventTimeElapsed(gt_ShowCommands, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Minimap
//--------------------------------------------------------------------------------------------------
bool gt_Minimap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_minimapONOFF[EventPlayer()] == true)) {
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeMinimapPanel, false);
        gv_minimapONOFF[EventPlayer()] = false;
        return true;
    }

    if ((gv_minimapONOFF[EventPlayer()] == false)) {
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeMinimapPanel, true);
        gv_minimapONOFF[EventPlayer()] = true;
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Minimap_Init () {
    gt_Minimap = TriggerCreate("gt_Minimap_Func");
    TriggerAddEventKeyPressed(gt_Minimap, c_playerAny, c_keyM, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GrantPlayer9Vision
//--------------------------------------------------------------------------------------------------
bool gt_GrantPlayer9Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(9, RegionEntireMap(), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantPlayer9Vision_Init () {
    gt_GrantPlayer9Vision = TriggerCreate("gt_GrantPlayer9Vision_Func");
    TriggerAddEventTimeElapsed(gt_GrantPlayer9Vision, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -gimmethatsight
//--------------------------------------------------------------------------------------------------
bool gt_gimmethatsight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(EventPlayer(), RegionEntireMap());
    gv_reavelear = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gimmethatsight_Init () {
    gt_gimmethatsight = TriggerCreate("gt_gimmethatsight_Func");
    TriggerAddEventChatMessage(gt_gimmethatsight, c_playerAny, "-gimmethatsight", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -gimmeblindbats
//--------------------------------------------------------------------------------------------------
bool gt_gimmeblindbats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-998619") || (PlayerHandle(EventPlayer()) == "1-S2-1-5954390")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerDestroy(gv_reavelear);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gimmeblindbats_Init () {
    gt_gimmeblindbats = TriggerCreate("gt_gimmeblindbats_Func");
    TriggerAddEventChatMessage(gt_gimmeblindbats, c_playerAny, "-gimmeblindbats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove leaving players minerals
//--------------------------------------------------------------------------------------------------
bool gt_Removeleavingplayersminerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF6DBDA3E_ae = 8;
    int autoF6DBDA3E_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() != 9))) {
            return false;
        }

        if (!((EventPlayer() != 0))) {
            return false;
        }

        if (!((EventPlayer() != 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    autoF6DBDA3E_var = 1;
    for ( ; autoF6DBDA3E_var <= autoF6DBDA3E_ae; autoF6DBDA3E_var += 1 ) {
        if (((PlayerStatus(autoF6DBDA3E_var) == c_playerStatusUnused) || (PlayerStatus(autoF6DBDA3E_var) == c_playerStatusLeft))) {
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Removeleavingplayersminerals_Init () {
    gt_Removeleavingplayersminerals = TriggerCreate("gt_Removeleavingplayersminerals_Func");
    TriggerAddEventPlayerLeft(gt_Removeleavingplayersminerals, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveLeftPlayerMineral
//--------------------------------------------------------------------------------------------------
bool gt_RemoveLeftPlayerMineral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto02CC6E6C_ae = 8;
    int auto02CC6E6C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto02CC6E6C_var = 1;
    for ( ; auto02CC6E6C_var <= auto02CC6E6C_ae; auto02CC6E6C_var += 1 ) {
        if ((PlayerGroupHasPlayer(gf_HumanPlayers(), auto02CC6E6C_var) == false)) {
            PlayerModifyPropertyInt(auto02CC6E6C_var, c_playerPropMinerals, c_playerPropOperSetTo, 1);
            PlayerModifyPropertyInt(auto02CC6E6C_var, c_playerPropVespene, c_playerPropOperSetTo, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveLeftPlayerMineral_Init () {
    gt_RemoveLeftPlayerMineral = TriggerCreate("gt_RemoveLeftPlayerMineral_Func");
    TriggerAddEventTimePeriodic(gt_RemoveLeftPlayerMineral, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowMap
//--------------------------------------------------------------------------------------------------
bool gt_ShowMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0C948E02_ae = 8;
    int auto0C948E02_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0C948E02_var = 1;
    for ( ; auto0C948E02_var <= auto0C948E02_ae; auto0C948E02_var += 1 ) {
        libNtve_gf_SetAlliance(auto0C948E02_var, 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerModifyPropertyInt(auto0C948E02_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, 1);
    }
    libNtve_gf_SetAlliance(9, 0, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowMap_Init () {
    gt_ShowMap = TriggerCreate("gt_ShowMap_Func");
    TriggerAddEventMapInit(gt_ShowMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisableSimpleCommandcardandtags
//--------------------------------------------------------------------------------------------------
bool gt_DisableSimpleCommandcardandtags_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD4B10F4D_ae = 8;
    int autoD4B10F4D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/DAF293F8"), 24, PointFromId(1628028025), 1.0, true, false, PlayerGroupAll());
    gv_biggerBulets = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/1DA4E6E2"), 24, PointFromId(609218182), 1.0, true, false, PlayerGroupAll());
    gv_bonusVitals = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/201C579B"), 24, PointFromId(909413652), 1.0, true, false, PlayerGroupAll());
    gv_speedSpecialties = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/337C6673"), 24, PointFromId(1499566526), 1.0, true, false, PlayerGroupAll());
    gv_specialStats = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/43E64F96"), 24, PointFromId(1721100061), 1.0, true, false, PlayerGroupAll());
    gv_speedBoots = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/F657A3BE"), 24, PointFromId(1626240058), 1.0, true, false, PlayerGroupAll());
    gv_speedCooldown = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/BF63EFED"), 24, PointFromId(404101260), 1.0, true, false, PlayerGroupAll());
    gv_sightRange = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/4E51932C"), 24, PointFromId(84160766), 1.0, true, false, PlayerGroupAll());
    gv_speedGloves = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/C690321B"), 24, PointFromId(1628028025), 1.0, true, false, PlayerGroupAll());
    gv_biggerBuletsPurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/EF922122"), 24, PointFromId(1721100061), 1.0, true, false, PlayerGroupAll());
    gv_speedBootsPurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/6E4AEEF1"), 24, PointFromId(404101260), 1.0, true, false, PlayerGroupAll());
    gv_sightRangePurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/70356D29"), 24, PointFromId(84160766), 1.0, true, false, PlayerGroupAll());
    gv_speedGlovesPurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/BB59CA66"), 24, PointFromId(1626240058), 1.0, true, false, PlayerGroupAll());
    gv_speedCooldownPurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/688A983C"), 24, PointFromId(609218182), 1.0, true, false, PlayerGroupAll());
    gv_bonusVitalsPurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/D4DD0671"), 24, PointFromId(909413652), 1.0, true, false, PlayerGroupAll());
    gv_speedSpecialtiesPurchased = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/2EA19543"), 24, PointFromId(1499566526), 1.0, true, false, PlayerGroupAll());
    gv_specialStatsPurchased = TextTagLastCreated();
    TextTagShow(gv_biggerBuletsPurchased, PlayerGroupAll(), false);
    TextTagShow(gv_sightRangePurchased, PlayerGroupAll(), false);
    TextTagShow(gv_speedBootsPurchased, PlayerGroupAll(), false);
    TextTagShow(gv_speedGlovesPurchased, PlayerGroupAll(), false);
    TextTagShow(gv_speedCooldownPurchased, PlayerGroupAll(), false);
    TextTagShow(gv_bonusVitalsPurchased, PlayerGroupAll(), false);
    TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupAll(), false);
    TextTagShow(gv_specialStatsPurchased, PlayerGroupAll(), false);
    autoD4B10F4D_var = 1;
    for ( ; autoD4B10F4D_var <= autoD4B10F4D_ae; autoD4B10F4D_var += 1 ) {
        PlayerOptionOverride(autoD4B10F4D_var, "simplecommandcard", "0");
    }
    Wait(20.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSimpleCommandcardandtags_Init () {
    gt_DisableSimpleCommandcardandtags = TriggerCreate("gt_DisableSimpleCommandcardandtags_Func");
    TriggerAddEventMapInit(gt_DisableSimpleCommandcardandtags);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show map1
//--------------------------------------------------------------------------------------------------
bool gt_Showmap1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB6D4124D_ae = 8;
    int autoB6D4124D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(9, 15, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(9, 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    autoB6D4124D_var = 1;
    for ( ; autoB6D4124D_var <= autoB6D4124D_ae; autoB6D4124D_var += 1 ) {
        PlayerGroupAdd(gv_allies, autoB6D4124D_var);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_allies, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Showmap1_Init () {
    gt_Showmap1 = TriggerCreate("gt_Showmap1_Func");
    TriggerAddEventMapInit(gt_Showmap1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 75% KILL REDUCTION
//--------------------------------------------------------------------------------------------------
bool gt__75KILLREDUCTION_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7C423832_ae = 6;
    int auto7C423832_var;
    playergroup autoF5E8CBB0_g;
    int autoF5E8CBB0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7C423832_var = 1;
    for ( ; auto7C423832_var <= auto7C423832_ae; auto7C423832_var += 1 ) {
        if ((gv_playerInfo[auto7C423832_var].lv_killReducerApplied == false)) {
            gv_playerInfo[auto7C423832_var].lv_killReducerApplied = true;
            BankLoad("zombieworldu", auto7C423832_var);
            BankValueSetFromFlag(BankLastCreated(), "j", "KillReducerForBounty", gv_playerInfo[auto7C423832_var].lv_killReducerApplied);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            BankSave(BankLastCreated());
            gv_playerInfo[auto7C423832_var].lv_tankKills /= 4;
            gv_playerInfo[auto7C423832_var].lv_supportKills /= 4;
            gv_playerInfo[auto7C423832_var].lv_specialistKills /= 4;
            gv_playerInfo[auto7C423832_var].lv_builderKills /= 4;
            gv_playerInfo[auto7C423832_var].lv_asassinKills /= 4;
            gv_playerInfo[auto7C423832_var].lv_splashKills /= 4;
            gv_playerInfo[auto7C423832_var].lv_singleTargetKills /= 4;
            if ((gv_playerInfo[auto7C423832_var].lv_asassinKills < 1) && (gv_playerInfo[auto7C423832_var].lv_singleTargetKills < 1) && (gv_playerInfo[auto7C423832_var].lv_splashKills < 1) && (gv_playerInfo[auto7C423832_var].lv_builderKills < 1) && (gv_playerInfo[auto7C423832_var].lv_tankKills < 1) && (gv_playerInfo[auto7C423832_var].lv_supportKills < 1) && (gv_playerInfo[auto7C423832_var].lv_specialistKills < 1)) {
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B19EEA89"));
            }
            BoardItemSetText(gv_leaderboard, 3, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_tankKills));
            BoardItemSetText(gv_leaderboard, 4, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_supportKills));
            BoardItemSetText(gv_leaderboard, 7, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_asassinKills));
            BoardItemSetText(gv_leaderboard, 8, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_singleTargetKills));
            BoardItemSetText(gv_leaderboard, 6, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_splashKills));
            BoardItemSetText(gv_leaderboard, 5, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_specialistKills));
            BoardItemSetText(gv_leaderboard, 9, auto7C423832_var, IntToText(gv_playerInfo[auto7C423832_var].lv_builderKills));
            BankLoad("zombieworldu", auto7C423832_var);
            BankValueSetFromInt(BankLastCreated(), "jj", "tankkills", gv_playerInfo[auto7C423832_var].lv_tankKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "tankkills", gv_playerInfo[auto7C423832_var].lv_tankKills);
            BankValueSetFromInt(BankLastCreated(), "jj", "supportkills", gv_playerInfo[auto7C423832_var].lv_supportKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "supportkills", gv_playerInfo[auto7C423832_var].lv_supportKills);
            BankValueSetFromInt(BankLastCreated(), "jj", "specialistkills", gv_playerInfo[auto7C423832_var].lv_specialistKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "specialistkills", gv_playerInfo[auto7C423832_var].lv_specialistKills);
            BankValueSetFromInt(BankLastCreated(), "jj", "splashkills", gv_playerInfo[auto7C423832_var].lv_splashKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "splashkills", gv_playerInfo[auto7C423832_var].lv_splashKills);
            BankValueSetFromInt(BankLastCreated(), "jj", "assassinkills", gv_playerInfo[auto7C423832_var].lv_asassinKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "assassinkills", gv_playerInfo[auto7C423832_var].lv_asassinKills);
            BankValueSetFromInt(BankLastCreated(), "jj", "singletargetkills", gv_playerInfo[auto7C423832_var].lv_singleTargetKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "singletargetkills", gv_playerInfo[auto7C423832_var].lv_singleTargetKills);
            BankValueSetFromInt(BankLastCreated(), "jj", "builderkills", gv_playerInfo[auto7C423832_var].lv_builderKills);
            BankValueSetFromInt(BankLastCreated(), "jjj", "builderkills", gv_playerInfo[auto7C423832_var].lv_builderKills);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            BankSave(BankLastCreated());
            autoF5E8CBB0_g = PlayerGroupAll();
            autoF5E8CBB0_var = -1;
            while (true) {
                autoF5E8CBB0_var = PlayerGroupNextPlayer(autoF5E8CBB0_g, autoF5E8CBB0_var);
                if (autoF5E8CBB0_var < 0) { break; }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__75KILLREDUCTION_Init () {
    gt__75KILLREDUCTION = TriggerCreate("gt__75KILLREDUCTION_Func");
    TriggerAddEventTimeElapsed(gt__75KILLREDUCTION, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map cleanup
//--------------------------------------------------------------------------------------------------
bool gt_Mapcleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitscleared;

    // Automatic Variable Declarations
    unitgroup autoA0132D96_g;
    int autoA0132D96_u;
    unit autoA0132D96_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA0132D96_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA0132D96_u = UnitGroupCount(autoA0132D96_g, c_unitCountAll);
    for (;; autoA0132D96_u -= 1) {
        autoA0132D96_var = UnitGroupUnitFromEnd(autoA0132D96_g, autoA0132D96_u);
        if (autoA0132D96_var == null) { break; }
        if ((UnitGetOwner(autoA0132D96_var) != 15) && (UnitGetOwner(autoA0132D96_var) != 0) && (UnitGetOwner(autoA0132D96_var) != 9) && (UnitGetType(autoA0132D96_var) != "SunkenColony") && (UnitGetType(autoA0132D96_var) != "Probe")) {
            UnitRemove(autoA0132D96_var);
            lv_unitscleared += 1;
        }

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (IntToText(lv_unitscleared) + StringExternal("Param/Value/286A6849")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mapcleanup_Init () {
    gt_Mapcleanup = TriggerCreate("gt_Mapcleanup_Func");
    TriggerAddEventMapInit(gt_Mapcleanup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(AdminOnly)
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSAdminOnly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_tankKills = (gv_playerInfo[EventPlayer()].lv_tankKills + 50000);
    gv_playerInfo[EventPlayer()].lv_supportKills = (gv_playerInfo[EventPlayer()].lv_supportKills + 50000);
    gv_playerInfo[EventPlayer()].lv_specialistKills = (gv_playerInfo[EventPlayer()].lv_specialistKills + 50000);
    gv_playerInfo[EventPlayer()].lv_asassinKills = (gv_playerInfo[EventPlayer()].lv_asassinKills + 50000);
    gv_playerInfo[EventPlayer()].lv_singleTargetKills = (gv_playerInfo[EventPlayer()].lv_singleTargetKills + 50000);
    gv_playerInfo[EventPlayer()].lv_splashKills = (gv_playerInfo[EventPlayer()].lv_splashKills + 50000);
    gv_playerInfo[EventPlayer()].lv_builderKills = (gv_playerInfo[EventPlayer()].lv_builderKills + 50000);
    gv_playerInfo[EventPlayer()].lv_highestWave = (gv_playerInfo[EventPlayer()].lv_highestWave + 7);
    BoardItemSetText(gv_leaderboard, 2, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSAdminOnly_Init () {
    gt_CHEATFORKILLSAdminOnly = TriggerCreate("gt_CHEATFORKILLSAdminOnly_Func");
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSAdminOnly, c_playerAny, c_keyQ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(HelpAFriend)
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSHelpAFriend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[2].lv_tankKills = (gv_playerInfo[2].lv_tankKills + 5000);
    gv_playerInfo[2].lv_supportKills = (gv_playerInfo[2].lv_supportKills + 5000);
    gv_playerInfo[2].lv_specialistKills = (gv_playerInfo[2].lv_specialistKills + 5000);
    gv_playerInfo[2].lv_asassinKills = (gv_playerInfo[2].lv_asassinKills + 5000);
    gv_playerInfo[2].lv_singleTargetKills = (gv_playerInfo[2].lv_singleTargetKills + 5000);
    gv_playerInfo[2].lv_splashKills = (gv_playerInfo[2].lv_splashKills + 5000);
    gv_playerInfo[2].lv_builderKills = (gv_playerInfo[2].lv_builderKills + 5000);
    gv_playerInfo[2].lv_highestWave = (gv_playerInfo[2].lv_highestWave + 5);
    BoardItemSetText(gv_leaderboard, 2, 2, IntToText(gv_playerInfo[2].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, 2, IntToText(gv_playerInfo[2].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, 2, IntToText(gv_playerInfo[2].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, 2, IntToText(gv_playerInfo[2].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, 2, IntToText(gv_playerInfo[2].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, 2, IntToText(gv_playerInfo[2].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, 2, IntToText(gv_playerInfo[2].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, 2, IntToText(gv_playerInfo[2].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSHelpAFriend_Init () {
    gt_CHEATFORKILLSHelpAFriend = TriggerCreate("gt_CHEATFORKILLSHelpAFriend_Func");
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSHelpAFriend, c_playerAny, c_keyF, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(HelpP3Friend)
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSHelpP3Friend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[3].lv_tankKills = (gv_playerInfo[3].lv_tankKills + 5000);
    gv_playerInfo[3].lv_supportKills = (gv_playerInfo[3].lv_supportKills + 5000);
    gv_playerInfo[3].lv_specialistKills = (gv_playerInfo[3].lv_specialistKills + 5000);
    gv_playerInfo[3].lv_asassinKills = (gv_playerInfo[3].lv_asassinKills + 5000);
    gv_playerInfo[3].lv_singleTargetKills = (gv_playerInfo[3].lv_singleTargetKills + 5000);
    gv_playerInfo[3].lv_splashKills = (gv_playerInfo[3].lv_splashKills + 5000);
    gv_playerInfo[3].lv_builderKills = (gv_playerInfo[3].lv_builderKills + 5000);
    gv_playerInfo[3].lv_highestWave = (gv_playerInfo[3].lv_highestWave + 5);
    BoardItemSetText(gv_leaderboard, 2, 3, IntToText(gv_playerInfo[3].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, 3, IntToText(gv_playerInfo[3].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, 3, IntToText(gv_playerInfo[3].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, 3, IntToText(gv_playerInfo[3].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, 3, IntToText(gv_playerInfo[3].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, 3, IntToText(gv_playerInfo[3].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, 3, IntToText(gv_playerInfo[3].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, 3, IntToText(gv_playerInfo[3].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSHelpP3Friend_Init () {
    gt_CHEATFORKILLSHelpP3Friend = TriggerCreate("gt_CHEATFORKILLSHelpP3Friend_Func");
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSHelpP3Friend, c_playerAny, c_keyF, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(BullyFriend)
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSBullyFriend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[2].lv_tankKills = 0;
    gv_playerInfo[2].lv_supportKills = 0;
    gv_playerInfo[2].lv_specialistKills = 0;
    gv_playerInfo[2].lv_asassinKills = 0;
    gv_playerInfo[2].lv_singleTargetKills = 0;
    gv_playerInfo[2].lv_splashKills = 0;
    gv_playerInfo[2].lv_builderKills = 0;
    gv_playerInfo[2].lv_highestWave = 0;
    BoardItemSetText(gv_leaderboard, 2, 2, IntToText(gv_playerInfo[2].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, 2, IntToText(gv_playerInfo[2].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, 2, IntToText(gv_playerInfo[2].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, 2, IntToText(gv_playerInfo[2].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, 2, IntToText(gv_playerInfo[2].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, 2, IntToText(gv_playerInfo[2].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, 2, IntToText(gv_playerInfo[2].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, 2, IntToText(gv_playerInfo[2].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSBullyFriend_Init () {
    gt_CHEATFORKILLSBullyFriend = TriggerCreate("gt_CHEATFORKILLSBullyFriend_Func");
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSBullyFriend, c_playerAny, c_keyB, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(BullyP3Friend)
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSBullyP3Friend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[3].lv_tankKills = 0;
    gv_playerInfo[3].lv_supportKills = 0;
    gv_playerInfo[3].lv_specialistKills = 0;
    gv_playerInfo[3].lv_asassinKills = 0;
    gv_playerInfo[3].lv_singleTargetKills = 0;
    gv_playerInfo[3].lv_splashKills = 0;
    gv_playerInfo[3].lv_builderKills = 0;
    gv_playerInfo[3].lv_highestWave = 0;
    BoardItemSetText(gv_leaderboard, 2, 3, IntToText(gv_playerInfo[3].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, 3, IntToText(gv_playerInfo[3].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, 3, IntToText(gv_playerInfo[3].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, 3, IntToText(gv_playerInfo[3].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, 3, IntToText(gv_playerInfo[3].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, 3, IntToText(gv_playerInfo[3].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, 3, IntToText(gv_playerInfo[3].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, 3, IntToText(gv_playerInfo[3].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSBullyP3Friend_Init () {
    gt_CHEATFORKILLSBullyP3Friend = TriggerCreate("gt_CHEATFORKILLSBullyP3Friend_Func");
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSBullyP3Friend, c_playerAny, c_keyB, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(AdminOnly) 2
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSAdminOnly2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[1].lv_builderKills = (gv_playerInfo[1].lv_builderKills + 5000);
    gv_playerInfo[1].lv_highestWave = (gv_playerInfo[1].lv_highestWave + 150);
    BoardItemSetText(gv_leaderboard, 2, 1, IntToText(gv_playerInfo[1].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 9, 1, IntToText(gv_playerInfo[1].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 8, 1, 16);
    BoardItemSetFontSize(gv_leaderboard, 9, 1, 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSAdminOnly2_Init () {
    gt_CHEATFORKILLSAdminOnly2 = TriggerCreate("gt_CHEATFORKILLSAdminOnly2_Func");
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSAdminOnly2, c_playerAny, c_keyP, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEATFORKILLS(AdminOnly) (removekills)
//--------------------------------------------------------------------------------------------------
bool gt_CHEATFORKILLSAdminOnlyremovekills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "2-S2-1-7593740") || (PlayerHandle(EventPlayer()) == "3-S2-1-5896837")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_tankKills = 0;
    gv_playerInfo[EventPlayer()].lv_supportKills = 0;
    gv_playerInfo[EventPlayer()].lv_specialistKills = 0;
    gv_playerInfo[EventPlayer()].lv_asassinKills = 0;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills = 0;
    gv_playerInfo[EventPlayer()].lv_splashKills = 0;
    gv_playerInfo[EventPlayer()].lv_builderKills = 0;
    gv_playerInfo[EventPlayer()].lv_highestWave = 0;
    BoardItemSetText(gv_leaderboard, 2, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CHEATFORKILLSAdminOnlyremovekills_Init () {
    gt_CHEATFORKILLSAdminOnlyremovekills = TriggerCreate("gt_CHEATFORKILLSAdminOnlyremovekills_Func");
    TriggerEnable(gt_CHEATFORKILLSAdminOnlyremovekills, false);
    TriggerAddEventKeyPressed(gt_CHEATFORKILLSAdminOnlyremovekills, c_playerAny, c_keyW, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: leaderboardhelp
//--------------------------------------------------------------------------------------------------
bool gt_leaderboardhelp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/FE7ACD68"));
    Wait(15.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_leaderboardhelp_Init () {
    gt_leaderboardhelp = TriggerCreate("gt_leaderboardhelp_Func");
    TriggerAddEventTimeElapsed(gt_leaderboardhelp, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: maxstukovzombies
//--------------------------------------------------------------------------------------------------
bool gt_maxstukovzombies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(9, c_playerPropSuppliesMade, c_playerPropOperSetTo, 30);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_maxstukovzombies_Init () {
    gt_maxstukovzombies = TriggerCreate("gt_maxstukovzombies_Func");
    TriggerAddEventMapInit(gt_maxstukovzombies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: thisgameleader
//--------------------------------------------------------------------------------------------------
bool gt_thisgameleader_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(4, 6, StringExternal("Param/Value/D0242C69"), Color(100.00, 100.00, 100.00));
    gv_thisgmaeleader = BoardLastCreated();
    BoardItemSetText(BoardLastCreated(), 4, c_boardRowHeader, StringExternal("Param/Value/BD652286"));
    BoardItemSetText(BoardLastCreated(), 3, c_boardRowHeader, StringExternal("Param/Value/1868F189"));
    BoardItemSetText(BoardLastCreated(), 2, c_boardRowHeader, StringExternal("Param/Value/32BCD1D3"));
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/1E1998CD"));
    BoardItemSetFontSize(gv_thisgmaeleader, 4, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_thisgmaeleader, 3, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_thisgmaeleader, 2, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_thisgmaeleader, 1, c_boardRowHeader, 16);
    BoardItemSetText(gv_thisgmaeleader, 1, 1, PlayerName(1));
    BoardItemSetTextColor(BoardLastCreated(), 1, 1, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)));
    BoardItemSetText(gv_thisgmaeleader, 1, 2, PlayerName(2));
    BoardItemSetTextColor(BoardLastCreated(), 1, 2, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)));
    BoardItemSetText(gv_thisgmaeleader, 1, 3, PlayerName(3));
    BoardItemSetTextColor(BoardLastCreated(), 1, 3, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(3, false)));
    BoardItemSetText(gv_thisgmaeleader, 1, 4, PlayerName(4));
    BoardItemSetTextColor(BoardLastCreated(), 1, 4, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(4, false)));
    BoardItemSetText(gv_thisgmaeleader, 1, 5, PlayerName(5));
    BoardItemSetTextColor(BoardLastCreated(), 1, 5, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(5, false)));
    BoardItemSetText(gv_thisgmaeleader, 1, 6, PlayerName(6));
    BoardItemSetTextColor(BoardLastCreated(), 1, 6, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(6, false)));
    BoardShowAll(true, PlayerGroupAll());
    BoardMinimizeSetState(BoardLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_thisgameleader_Init () {
    gt_thisgameleader = TriggerCreate("gt_thisgameleader_Func");
    TriggerAddEventTimeElapsed(gt_thisgameleader, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: overallleader
//--------------------------------------------------------------------------------------------------
bool gt_overallleader_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(9, 6, StringExternal("Param/Value/31A63D27"), Color(100.00, 100.00, 100.00));
    gv_leaderboard = BoardLastCreated();
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/FE2FD29F"));
    BoardItemSetText(BoardLastCreated(), 2, c_boardRowHeader, StringExternal("Param/Value/2B4AEBD1"));
    BoardItemSetText(BoardLastCreated(), 3, c_boardRowHeader, StringExternal("Param/Value/48647CA5"));
    BoardItemSetText(BoardLastCreated(), 4, c_boardRowHeader, StringExternal("Param/Value/DEECF8EF"));
    BoardItemSetText(BoardLastCreated(), 5, c_boardRowHeader, StringExternal("Param/Value/46665C35"));
    BoardItemSetText(BoardLastCreated(), 6, c_boardRowHeader, StringExternal("Param/Value/B0087440"));
    BoardItemSetText(BoardLastCreated(), 7, c_boardRowHeader, StringExternal("Param/Value/38FA8F72"));
    BoardItemSetText(BoardLastCreated(), 8, c_boardRowHeader, StringExternal("Param/Value/5DF77A52"));
    BoardItemSetText(BoardLastCreated(), 9, c_boardRowHeader, StringExternal("Param/Value/6D786FE3"));
    BoardItemSetFontSize(gv_leaderboard, 9, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 8, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 7, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 6, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 5, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 4, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 3, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 2, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_leaderboard, 1, c_boardRowHeader, 16);
    BoardItemSetText(gv_leaderboard, 1, 1, PlayerName(1));
    BoardItemSetTextColor(BoardLastCreated(), 1, 1, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)));
    BoardItemSetText(gv_leaderboard, 1, 2, PlayerName(2));
    BoardItemSetTextColor(BoardLastCreated(), 1, 2, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)));
    BoardItemSetText(gv_leaderboard, 1, 3, PlayerName(3));
    BoardItemSetTextColor(BoardLastCreated(), 1, 3, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(3, false)));
    BoardItemSetText(gv_leaderboard, 1, 4, PlayerName(4));
    BoardItemSetTextColor(BoardLastCreated(), 1, 4, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(4, false)));
    BoardItemSetText(gv_leaderboard, 1, 5, PlayerName(5));
    BoardItemSetTextColor(BoardLastCreated(), 1, 5, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(5, false)));
    BoardItemSetText(gv_leaderboard, 1, 6, PlayerName(6));
    BoardItemSetTextColor(BoardLastCreated(), 1, 6, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(6, false)));
    BoardShowAll(true, PlayerGroupAll());
    BoardMinimizeSetState(BoardLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_overallleader_Init () {
    gt_overallleader = TriggerCreate("gt_overallleader_Func");
    TriggerAddEventMapInit(gt_overallleader);
}

//--------------------------------------------------------------------------------------------------
// Trigger: waveboard
//--------------------------------------------------------------------------------------------------
bool gt_waveboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(2, 1, StringExternal("Param/Value/2635178B"), Color(100.00, 100.00, 100.00));
    gv_waveboard = BoardLastCreated();
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/6BB37BBD"));
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/D4104ABF"));
    BoardSetAnchor(BoardLastCreated(), c_anchorTopLeft, 0, 0);
    BoardItemSetFontSize(gv_waveboard, 1, c_boardRowHeader, 16);
    BoardItemSetFontSize(gv_waveboard, 1, 1, 16);
    BoardItemSetFontSize(gv_waveboard, 1, 2, 16);
    BoardShowAll(true, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waveboard_Init () {
    gt_waveboard = TriggerCreate("gt_waveboard_Func");
    TriggerAddEventMapInit(gt_waveboard);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Stats
//--------------------------------------------------------------------------------------------------
bool gt_StartingStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int[7] lv_talentPoints;
    int[7] lv_playerID;
    int[7] lv_energyPointsMath;
    int[7] lv_energyRegenPointsMath;

    // Automatic Variable Declarations
    const int auto8325612B_ae = 6;
    int auto8325612B_var;
    playergroup autoE862760C_g;
    int autoE862760C_var;
    const int auto1AD3DB90_ae = 6;
    int auto1AD3DB90_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto8325612B_var = 1;
    for ( ; auto8325612B_var <= auto8325612B_ae; auto8325612B_var += 1 ) {
        if ((PlayerStatus(auto8325612B_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_players, auto8325612B_var);
        }

    }
    autoE862760C_g = lv_players;
    autoE862760C_var = -1;
    while (true) {
        autoE862760C_var = PlayerGroupNextPlayer(autoE862760C_g, autoE862760C_var);
        if (autoE862760C_var < 0) { break; }
        BankLoad("zombieworldu", autoE862760C_var);
        gv_playerInfo[autoE862760C_var].lv_playerBank = BankLastCreated();
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        if ((BankSectionExists(BankLastCreated(), "jjj") == true)) {
            if ((BankVerify(BankLastCreated()) == true)) {
                lv_talentPoints[autoE862760C_var] = BankValueGetAsInt(BankLastCreated(), "PlayerIDNumber", "InfoNumber");
                lv_playerID[autoE862760C_var] = BankValueGetAsInt(BankLastCreated(), "PlayerIDNumber", "PlayerID");
                lv_playerID[autoE862760C_var] /= 5;
                lv_talentPoints[autoE862760C_var] /= (9999 - (16 + lv_playerID[autoE862760C_var]));
                PlayerModifyPropertyInt(autoE862760C_var, c_playerPropCustom, c_playerPropOperSetTo, lv_talentPoints[autoE862760C_var]);
                gv_playerInfo[autoE862760C_var].lv_damagePoints = BankValueGetAsInt(BankLastCreated(), "TP", "DamagePoints");
                gv_playerInfo[autoE862760C_var].lv_damagePoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 100)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", gv_playerInfo[autoE862760C_var].lv_damagePoints);
                }
                else {
                    if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 200)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 100));
                    }
                    else {
                        if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 300)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 200));
                        }
                        else {
                            if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 400)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 300));
                            }
                            else {
                                if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 500)) {
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 400));
                                }
                                else {
                                    if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 600)) {
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1006", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 500));
                                    }
                                    else {
                                        if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 700)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1006", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1007", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 600));
                                        }
                                        else {
                                            if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 800)) {
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1006", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1007", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1008", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 700));
                                            }
                                            else {
                                                if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 900)) {
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1006", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1007", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1008", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1009", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 800));
                                                }
                                                else {
                                                    if ((gv_playerInfo[autoE862760C_var].lv_damagePoints < 1000)) {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints10010", (gv_playerInfo[autoE862760C_var].lv_damagePoints - 900));
                                                    }
                                                    else {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamagePoints10010", 100);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                gv_playerInfo[autoE862760C_var].lv_shieldPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ShieldPoints");
                gv_playerInfo[autoE862760C_var].lv_shieldPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 100)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", gv_playerInfo[autoE862760C_var].lv_shieldPoints);
                }
                else {
                    if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 200)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 100));
                    }
                    else {
                        if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 300)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 200));
                        }
                        else {
                            if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 400)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 300));
                            }
                            else {
                                if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 500)) {
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 400));
                                }
                                else {
                                    if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 600)) {
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1006", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 500));
                                    }
                                    else {
                                        if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 700)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1006", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1007", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 600));
                                        }
                                        else {
                                            if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 800)) {
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1006", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1007", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1008", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 700));
                                            }
                                            else {
                                                if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 900)) {
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1006", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1007", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1008", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1009", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 800));
                                                }
                                                else {
                                                    if ((gv_playerInfo[autoE862760C_var].lv_shieldPoints < 1000)) {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints10010", (gv_playerInfo[autoE862760C_var].lv_shieldPoints - 900));
                                                    }
                                                    else {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldPoints10010", 100);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ShieldRegenerationPoints");
                gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 100)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints);
                }
                else {
                    if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 200)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 100));
                    }
                    else {
                        if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 300)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 200));
                        }
                        else {
                            if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 400)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 300));
                            }
                            else {
                                if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 500)) {
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 400));
                                }
                                else {
                                    if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 600)) {
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10016", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 500));
                                    }
                                    else {
                                        if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 700)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10016", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10017", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 600));
                                        }
                                        else {
                                            if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 800)) {
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10016", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10017", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10018", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 700));
                                            }
                                            else {
                                                if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 900)) {
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10016", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10017", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10018", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10019", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 800));
                                                }
                                                else {
                                                    if ((gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints < 1000)) {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10016", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10017", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10018", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10019", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints100110", (gv_playerInfo[autoE862760C_var].lv_shieldRegenPoints - 900));
                                                    }
                                                    else {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10012", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10013", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10014", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10015", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10016", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10017", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10018", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints10019", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldRegenPoints100110", 100);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                gv_playerInfo[autoE862760C_var].lv_lifePoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifePoints");
                gv_playerInfo[autoE862760C_var].lv_lifePoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 100)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", gv_playerInfo[autoE862760C_var].lv_lifePoints);
                }
                else {
                    if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 200)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 100));
                    }
                    else {
                        if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 300)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 200));
                        }
                        else {
                            if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 400)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 300));
                            }
                            else {
                                if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 500)) {
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 400));
                                }
                                else {
                                    if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 600)) {
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1006", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 500));
                                    }
                                    else {
                                        if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 700)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1006", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1007", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 600));
                                        }
                                        else {
                                            if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 800)) {
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1006", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1007", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1008", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 700));
                                            }
                                            else {
                                                if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 900)) {
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1006", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1007", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1008", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1009", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 800));
                                                }
                                                else {
                                                    if ((gv_playerInfo[autoE862760C_var].lv_lifePoints < 1000)) {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints10010", (gv_playerInfo[autoE862760C_var].lv_lifePoints - 900));
                                                    }
                                                    else {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifePoints10010", 100);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifeRegenPoints");
                gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 100)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints);
                }
                else {
                    if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 200)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 100));
                    }
                    else {
                        if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 300)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 200));
                        }
                        else {
                            if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 400)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 300));
                            }
                            else {
                                if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 500)) {
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 400));
                                }
                                else {
                                    if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 600)) {
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", 100);
                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1006", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 500));
                                    }
                                    else {
                                        if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 700)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1006", 100);
                                            libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1007", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 600));
                                        }
                                        else {
                                            if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 800)) {
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1006", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1007", 100);
                                                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1008", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 700));
                                            }
                                            else {
                                                if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 900)) {
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1006", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1007", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1008", 100);
                                                    libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1009", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 800));
                                                }
                                                else {
                                                    if ((gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints < 1000)) {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints10010", (gv_playerInfo[autoE862760C_var].lv_lifeRegenPoints - 900));
                                                    }
                                                    else {
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1001", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1002", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1003", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1004", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1005", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1006", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1007", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1008", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints1009", 100);
                                                        libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeRegenPoints10010", 100);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                gv_playerInfo[autoE862760C_var].lv_mineralStartPoints = BankValueGetAsInt(BankLastCreated(), "TP", "MineralStartPoints");
                gv_playerInfo[autoE862760C_var].lv_mineralStartPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                gv_playerInfo[autoE862760C_var].lv_vespeneStartPoints = BankValueGetAsInt(BankLastCreated(), "TP", "VespeneStartPoints");
                gv_playerInfo[autoE862760C_var].lv_vespeneStartPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                gv_playerInfo[autoE862760C_var].lv_respawnTimerPoints = BankValueGetAsInt(BankLastCreated(), "TP", "RespawnSpeedPoints");
                gv_playerInfo[autoE862760C_var].lv_respawnTimerPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                gv_playerInfo[autoE862760C_var].lv_moveSpeedPoints = BankValueGetAsInt(BankLastCreated(), "TP", "MoveSpeedPoints");
                gv_playerInfo[autoE862760C_var].lv_moveSpeedPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "MoveSpeedPoints100", gv_playerInfo[autoE862760C_var].lv_moveSpeedPoints);
                gv_playerInfo[autoE862760C_var].lv_energyPoints = BankValueGetAsInt(BankLastCreated(), "TP", "EnergyPoints");
                gv_playerInfo[autoE862760C_var].lv_energyPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "EnergyPoints10", gv_playerInfo[autoE862760C_var].lv_energyPoints);
                gv_playerInfo[autoE862760C_var].lv_energyRegenPoints = BankValueGetAsInt(BankLastCreated(), "TP", "EnergyRegenPoints");
                gv_playerInfo[autoE862760C_var].lv_energyRegenPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "EnergyRegenPoints10", gv_playerInfo[autoE862760C_var].lv_energyRegenPoints);
                gv_playerInfo[autoE862760C_var].lv_shieldArmorMultiplyPoints = BankValueGetAsInt(BankLastCreated(), "TP", "YOUR KILLS WILL BE RESET IF YOU ATTEMPT TO HACK ANYTHING");
                gv_playerInfo[autoE862760C_var].lv_shieldArmorMultiplyPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldArmorMultiplyPoints100", gv_playerInfo[autoE862760C_var].lv_shieldArmorMultiplyPoints);
                gv_playerInfo[autoE862760C_var].lv_lifeArmorBonusPoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifeArmorBonusPoints");
                gv_playerInfo[autoE862760C_var].lv_lifeArmorBonusPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeArmorBonusPoints100", gv_playerInfo[autoE862760C_var].lv_lifeArmorBonusPoints);
                gv_playerInfo[autoE862760C_var].lv_lifeArmorMultiplyPoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifeArmorMultiplyPoints");
                gv_playerInfo[autoE862760C_var].lv_lifeArmorMultiplyPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "LifeArmorMultiplyPoints100", gv_playerInfo[autoE862760C_var].lv_lifeArmorMultiplyPoints);
                gv_playerInfo[autoE862760C_var].lv_cooldownPoints = BankValueGetAsInt(BankLastCreated(), "TP", "CooldownPoints");
                gv_playerInfo[autoE862760C_var].lv_cooldownPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "CooldownPoints25", gv_playerInfo[autoE862760C_var].lv_cooldownPoints);
                gv_playerInfo[autoE862760C_var].lv_damageReductionPoints = BankValueGetAsInt(BankLastCreated(), "TP", "DamageReductionPoints");
                gv_playerInfo[autoE862760C_var].lv_damageReductionPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "DamageReductionPoints10", gv_playerInfo[autoE862760C_var].lv_damageReductionPoints);
                gv_playerInfo[autoE862760C_var].lv_shieldArmorBonusPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ShieldArmorBonusPoints");
                gv_playerInfo[autoE862760C_var].lv_shieldArmorBonusPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "ShieldArmorBonusPoints50", gv_playerInfo[autoE862760C_var].lv_shieldArmorBonusPoints);
                gv_playerInfo[autoE862760C_var].lv_expPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ExpPoints");
                gv_playerInfo[autoE862760C_var].lv_expPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "EXPPoints100", gv_playerInfo[autoE862760C_var].lv_expPoints);
                gv_playerInfo[autoE862760C_var].lv_masteryPoints = BankValueGetAsInt(BankLastCreated(), "TP", "MasteryPoints");
                gv_playerInfo[autoE862760C_var].lv_masteryPoints /= (999 - (16 + lv_playerID[autoE862760C_var]));
                libNtve_gf_SetUpgradeLevelForPlayer(autoE862760C_var, "MasteryPoints15", gv_playerInfo[autoE862760C_var].lv_masteryPoints);
                gv_playerInfo[autoE862760C_var].lv_tankKills = BankValueGetAsInt(BankLastCreated(), "jjj", "tankkills");
                gv_playerInfo[autoE862760C_var].lv_supportKills = BankValueGetAsInt(BankLastCreated(), "jjj", "supportkills");
                gv_playerInfo[autoE862760C_var].lv_specialistKills = BankValueGetAsInt(BankLastCreated(), "jjj", "specialistkills");
                gv_playerInfo[autoE862760C_var].lv_splashKills = BankValueGetAsInt(BankLastCreated(), "jjj", "splashkills");
                gv_playerInfo[autoE862760C_var].lv_asassinKills = BankValueGetAsInt(BankLastCreated(), "jjj", "assassinkills");
                gv_playerInfo[autoE862760C_var].lv_singleTargetKills = BankValueGetAsInt(BankLastCreated(), "jjj", "singletargetkills");
                gv_playerInfo[autoE862760C_var].lv_builderKills = BankValueGetAsInt(BankLastCreated(), "jjj", "builderkills");
                gv_playerInfo[autoE862760C_var].lv_unlockaHerotruefalse = BankValueGetAsFlag(BankLastCreated(), "j", "unlockhero");
                gv_playerInfo[autoE862760C_var].lv_killReducerApplied = BankValueGetAsFlag(BankLastCreated(), "j", "KillReducerForBounty");
                gv_playerInfo[autoE862760C_var].lv_hydraliskYours = BankValueGetAsFlag(BankLastCreated(), "j", "UnlockHydralisk2");
                gv_playerInfo[autoE862760C_var].lv_highestWave = BankValueGetAsInt(BankLastCreated(), "number", "wave");
                gv_playerInfo[autoE862760C_var].lv_marineLevel = BankValueGetAsInt(BankLastCreated(), "j", "m");
                gv_playerInfo[autoE862760C_var].lv_johnsonLevel = BankValueGetAsInt(BankLastCreated(), "j", "johny");
                gv_playerInfo[autoE862760C_var].lv_marineStage = BankValueGetAsInt(BankLastCreated(), "j", "marinestage");
                gv_playerInfo[autoE862760C_var].lv_medicStage = BankValueGetAsInt(BankLastCreated(), "j", "medicstage");
                gv_playerInfo[autoE862760C_var].lv_reaperStage = BankValueGetAsInt(BankLastCreated(), "j", "reaperstage");
                gv_playerInfo[autoE862760C_var].lv_sentryStage = BankValueGetAsInt(BankLastCreated(), "j", "elecstage");
                gv_playerInfo[autoE862760C_var].lv_sniperLevel = BankValueGetAsInt(BankLastCreated(), "j", "n");
                gv_playerInfo[autoE862760C_var].lv_sniperStage = BankValueGetAsInt(BankLastCreated(), "j", "sniperstage");
                gv_playerInfo[autoE862760C_var].lv_hybridStage = BankValueGetAsInt(BankLastCreated(), "j", "hybridstage");
                gv_playerInfo[autoE862760C_var].lv_spectreLevel = BankValueGetAsInt(BankLastCreated(), "j", "spec");
                gv_playerInfo[autoE862760C_var].lv_firebatLevel = BankValueGetAsInt(BankLastCreated(), "j", "b");
                gv_playerInfo[autoE862760C_var].lv_fSniperLevel = BankValueGetAsInt(BankLastCreated(), "j", "fs");
                gv_playerInfo[autoE862760C_var].lv_reaperLevel = BankValueGetAsInt(BankLastCreated(), "j", "q");
                gv_playerInfo[autoE862760C_var].lv_reaverLevel = BankValueGetAsInt(BankLastCreated(), "j", "e");
                gv_playerInfo[autoE862760C_var].lv_darkArchonLevel = BankValueGetAsInt(BankLastCreated(), "j", "z");
                gv_playerInfo[autoE862760C_var].lv_artanisLevel = BankValueGetAsInt(BankLastCreated(), "j", "artanis");
                gv_playerInfo[autoE862760C_var].lv_stalkerLevel = BankValueGetAsInt(BankLastCreated(), "j", "l");
                gv_playerInfo[autoE862760C_var].lv_stalkerStage = BankValueGetAsInt(BankLastCreated(), "j", "stalkerstage");
                gv_playerInfo[autoE862760C_var].lv_spectreStage = BankValueGetAsInt(BankLastCreated(), "j", "specstage");
                gv_playerInfo[autoE862760C_var].lv_metalManStage = BankValueGetAsInt(BankLastCreated(), "j", "metalmans");
                gv_playerInfo[autoE862760C_var].lv_vultureStage = BankValueGetAsInt(BankLastCreated(), "j", "vultures");
                gv_playerInfo[autoE862760C_var].lv_zealotLevel = BankValueGetAsInt(BankLastCreated(), "j", "k");
                gv_playerInfo[autoE862760C_var].lv_hellionLevel = BankValueGetAsInt(BankLastCreated(), "j", "p");
                gv_playerInfo[autoE862760C_var].lv_paragonExperience = BankValueGetAsInt(BankLastCreated(), "j", "paragon");
                gv_playerInfo[autoE862760C_var].lv_paragonLevel = BankValueGetAsInt(BankLastCreated(), "j", "paragond");
                gv_playerInfo[autoE862760C_var].lv_highTemplarLevel = BankValueGetAsInt(BankLastCreated(), "j", "high");
                gv_playerInfo[autoE862760C_var].lv_warpPrismLevel = BankValueGetAsInt(BankLastCreated(), "j", "warprism");
                gv_playerInfo[autoE862760C_var].lv_highTemplarStage = BankValueGetAsInt(BankLastCreated(), "j", "highstage");
                gv_playerInfo[autoE862760C_var].lv_cLInfantry = BankValueGetAsFlag(BankLastCreated(), "Hack_This_I_Dare_You", "ChangeAnythingAndYourStatsReset");
                gv_playerInfo[autoE862760C_var].lv_cLTeamGame = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLTeamGame");
                gv_playerInfo[autoE862760C_var].lv_cLConstructor = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLConstructor");
                gv_playerInfo[autoE862760C_var].lv_cLEvasive = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLEvasive");
                gv_playerInfo[autoE862760C_var].lv_cLTorture = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLTorture1");
                gv_playerInfo[autoE862760C_var].lv_medicLevel = BankValueGetAsInt(BankLastCreated(), "j", "med");
                gv_playerInfo[autoE862760C_var].lv_thorLevel = BankValueGetAsInt(BankLastCreated(), "j", "j");
                gv_playerInfo[autoE862760C_var].lv_motorCycleLevel = BankValueGetAsInt(BankLastCreated(), "j", "moto");
                gv_playerInfo[autoE862760C_var].lv_thorStage = BankValueGetAsInt(BankLastCreated(), "j", "thorstage");
                gv_playerInfo[autoE862760C_var].lv_colossusLevel = BankValueGetAsInt(BankLastCreated(), "j", "o");
                gv_playerInfo[autoE862760C_var].lv_colossusStage = BankValueGetAsInt(BankLastCreated(), "j", "hotshotstage");
                gv_playerInfo[autoE862760C_var].lv_tempestStage = BankValueGetAsInt(BankLastCreated(), "j", "tempstage");
                gv_playerInfo[autoE862760C_var].lv_cycloneLevel = BankValueGetAsInt(BankLastCreated(), "j", "clone");
                gv_playerInfo[autoE862760C_var].lv_tempestLevel = BankValueGetAsInt(BankLastCreated(), "j", "tempest");
                gv_playerInfo[autoE862760C_var].lv_carrierLevel = BankValueGetAsInt(BankLastCreated(), "j", "carrierlvl");
                gv_playerInfo[autoE862760C_var].lv_carrierLevelHelper = BankValueGetAsInt(BankLastCreated(), "j", "carrierlvl");
                gv_playerInfo[autoE862760C_var].lv_immortalLevel = BankValueGetAsInt(BankLastCreated(), "j", "i");
                gv_playerInfo[autoE862760C_var].lv_necromancerLevel = BankValueGetAsInt(BankLastCreated(), "j", "necro");
                gv_playerInfo[autoE862760C_var].lv_immortalStage = BankValueGetAsInt(BankLastCreated(), "j", "immostage");
                gv_playerInfo[autoE862760C_var].lv_voidRayStage = BankValueGetAsInt(BankLastCreated(), "j", "dynomito");
                gv_playerInfo[autoE862760C_var].lv_dTLevel = BankValueGetAsInt(BankLastCreated(), "j", "u");
                gv_playerInfo[autoE862760C_var].lv_dTStage = BankValueGetAsInt(BankLastCreated(), "j", "dtstage");
                gv_playerInfo[autoE862760C_var].lv_tankLevel = BankValueGetAsInt(BankLastCreated(), "j", "y");
                gv_playerInfo[autoE862760C_var].lv_dragoonLevel = BankValueGetAsInt(BankLastCreated(), "j", "t");
                gv_playerInfo[autoE862760C_var].lv_goliathLevel = BankValueGetAsInt(BankLastCreated(), "j", "r");
                gv_playerInfo[autoE862760C_var].lv_warMachineStage = BankValueGetAsInt(BankLastCreated(), "j", "WMST");
                gv_playerInfo[autoE862760C_var].lv_adeptLevel = BankValueGetAsInt(BankLastCreated(), "j", "f");
                gv_playerInfo[autoE862760C_var].lv_joeLevel = BankValueGetAsInt(BankLastCreated(), "j", "d");
                gv_playerInfo[autoE862760C_var].lv_sentryLevel = BankValueGetAsInt(BankLastCreated(), "j", "w");
                gv_playerInfo[autoE862760C_var].lv_siegeTankStage = BankValueGetAsInt(BankLastCreated(), "j", "siegestage");
            }
            else {
                BankSectionRemove(BankLastCreated(), "j");
                BankSectionRemove(BankLastCreated(), "jj");
                BankSectionRemove(BankLastCreated(), "jjj");
                BankSectionRemove(BankLastCreated(), "number");
            }
        }
        else {
            gv_playerInfo[autoE862760C_var].lv_tankKills = BankValueGetAsInt(BankLastCreated(), "jj", "kill");
            gv_playerInfo[autoE862760C_var].lv_highestWave = BankValueGetAsInt(BankLastCreated(), "number", "wave");
            gv_playerInfo[autoE862760C_var].lv_marineLevel = BankValueGetAsInt(BankLastCreated(), "j", "m");
            gv_playerInfo[autoE862760C_var].lv_sniperLevel = BankValueGetAsInt(BankLastCreated(), "j", "n");
            gv_playerInfo[autoE862760C_var].lv_firebatLevel = BankValueGetAsInt(BankLastCreated(), "j", "b");
            gv_playerInfo[autoE862760C_var].lv_reaperLevel = BankValueGetAsInt(BankLastCreated(), "j", "q");
            gv_playerInfo[autoE862760C_var].lv_reaverLevel = BankValueGetAsInt(BankLastCreated(), "j", "e");
            gv_playerInfo[autoE862760C_var].lv_darkArchonLevel = BankValueGetAsInt(BankLastCreated(), "j", "z");
            gv_playerInfo[autoE862760C_var].lv_stalkerLevel = BankValueGetAsInt(BankLastCreated(), "j", "l");
            gv_playerInfo[autoE862760C_var].lv_zealotLevel = BankValueGetAsInt(BankLastCreated(), "j", "k");
            gv_playerInfo[autoE862760C_var].lv_hellionLevel = BankValueGetAsInt(BankLastCreated(), "j", "p");
            gv_playerInfo[autoE862760C_var].lv_highTemplarLevel = BankValueGetAsInt(BankLastCreated(), "j", "high");
            gv_playerInfo[autoE862760C_var].lv_medicLevel = BankValueGetAsInt(BankLastCreated(), "j", "med");
            gv_playerInfo[autoE862760C_var].lv_thorLevel = BankValueGetAsInt(BankLastCreated(), "j", "j");
            gv_playerInfo[autoE862760C_var].lv_colossusLevel = BankValueGetAsInt(BankLastCreated(), "j", "o");
            gv_playerInfo[autoE862760C_var].lv_cycloneLevel = BankValueGetAsInt(BankLastCreated(), "j", "clone");
            gv_playerInfo[autoE862760C_var].lv_immortalLevel = BankValueGetAsInt(BankLastCreated(), "j", "i");
            gv_playerInfo[autoE862760C_var].lv_dTLevel = BankValueGetAsInt(BankLastCreated(), "j", "u");
            gv_playerInfo[autoE862760C_var].lv_tankLevel = BankValueGetAsInt(BankLastCreated(), "j", "y");
            gv_playerInfo[autoE862760C_var].lv_dragoonLevel = BankValueGetAsInt(BankLastCreated(), "j", "t");
            gv_playerInfo[autoE862760C_var].lv_goliathLevel = BankValueGetAsInt(BankLastCreated(), "j", "r");
            gv_playerInfo[autoE862760C_var].lv_adeptLevel = BankValueGetAsInt(BankLastCreated(), "j", "f");
            gv_playerInfo[autoE862760C_var].lv_joeLevel = BankValueGetAsInt(BankLastCreated(), "j", "d");
            gv_playerInfo[autoE862760C_var].lv_sentryLevel = BankValueGetAsInt(BankLastCreated(), "j", "w");
        }
        BoardItemSetText(gv_leaderboard, 2, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_highestWave));
        BoardItemSetText(gv_leaderboard, 3, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_tankKills));
        BoardItemSetText(gv_leaderboard, 4, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_supportKills));
        BoardItemSetText(gv_leaderboard, 5, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_specialistKills));
        BoardItemSetText(gv_leaderboard, 6, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_splashKills));
        BoardItemSetText(gv_leaderboard, 7, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_asassinKills));
        BoardItemSetText(gv_leaderboard, 8, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_singleTargetKills));
        BoardItemSetText(gv_leaderboard, 9, autoE862760C_var, IntToText(gv_playerInfo[autoE862760C_var].lv_builderKills));
        BoardItemSetFontSize(gv_leaderboard, 2, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 3, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 4, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 5, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 6, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 7, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 8, autoE862760C_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 9, autoE862760C_var, 16);
        PlayerModifyPropertyInt(autoE862760C_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerInfo[autoE862760C_var].lv_tankKills);
    }
    auto1AD3DB90_var = 1;
    for ( ; auto1AD3DB90_var <= auto1AD3DB90_ae; auto1AD3DB90_var += 1 ) {
        if ((gv_playerInfo[auto1AD3DB90_var].lv_mineralStartPoints > 5000)) {
            gv_playerInfo[auto1AD3DB90_var].lv_mineralStartPoints = 5000;
        }

        if ((gv_playerInfo[auto1AD3DB90_var].lv_vespeneStartPoints > 500)) {
            gv_playerInfo[auto1AD3DB90_var].lv_vespeneStartPoints = 500;
        }

        if ((gv_playerInfo[auto1AD3DB90_var].lv_respawnTimerPoints > 20)) {
            gv_playerInfo[auto1AD3DB90_var].lv_respawnTimerPoints = 20;
        }

        PlayerModifyPropertyFixed(auto1AD3DB90_var, c_playerPropMinerals, c_playerPropOperSetTo, (25 + gv_playerInfo[auto1AD3DB90_var].lv_mineralStartPoints));
        PlayerModifyPropertyFixed(auto1AD3DB90_var, c_playerPropVespene, c_playerPropOperSetTo, (0 + gv_playerInfo[auto1AD3DB90_var].lv_vespeneStartPoints));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingStats_Init () {
    gt_StartingStats = TriggerCreate("gt_StartingStats_Func");
    TriggerEnable(gt_StartingStats, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting StatsNoTalents
//--------------------------------------------------------------------------------------------------
bool gt_StartingStatsNoTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int[7] lv_talentPoints;
    int[7] lv_playerID;
    int lv_energyPointsMath;
    int lv_energyRegenPointsMath;

    // Automatic Variable Declarations
    const int autoE52C91AE_ae = 6;
    int autoE52C91AE_var;
    playergroup autoD81F8DE1_g;
    int autoD81F8DE1_var;
    const int autoFBB8A4AA_ae = 6;
    int autoFBB8A4AA_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoE52C91AE_var = 1;
    for ( ; autoE52C91AE_var <= autoE52C91AE_ae; autoE52C91AE_var += 1 ) {
        if ((PlayerStatus(autoE52C91AE_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_players, autoE52C91AE_var);
        }

    }
    autoD81F8DE1_g = lv_players;
    autoD81F8DE1_var = -1;
    while (true) {
        autoD81F8DE1_var = PlayerGroupNextPlayer(autoD81F8DE1_g, autoD81F8DE1_var);
        if (autoD81F8DE1_var < 0) { break; }
        BankLoad("zombieworldu", autoD81F8DE1_var);
        gv_playerInfo[autoD81F8DE1_var].lv_playerBank = BankLastCreated();
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        if ((BankSectionExists(BankLastCreated(), "jjj") == true)) {
            if ((BankVerify(BankLastCreated()) == true)) {
                lv_talentPoints[autoD81F8DE1_var] = BankValueGetAsInt(BankLastCreated(), "PlayerIDNumber", "InfoNumber");
                lv_playerID[autoD81F8DE1_var] = BankValueGetAsInt(BankLastCreated(), "PlayerIDNumber", "PlayerID");
                lv_playerID[autoD81F8DE1_var] /= 5;
                lv_talentPoints[autoD81F8DE1_var] /= (9999 - (16 + lv_playerID[autoD81F8DE1_var]));
                PlayerModifyPropertyInt(autoD81F8DE1_var, c_playerPropCustom, c_playerPropOperSetTo, lv_talentPoints[autoD81F8DE1_var]);
                gv_playerInfo[autoD81F8DE1_var].lv_damagePoints = BankValueGetAsInt(BankLastCreated(), "TP", "DamagePoints");
                gv_playerInfo[autoD81F8DE1_var].lv_damagePoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_shieldPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ShieldPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_shieldPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_shieldRegenPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ShieldRegenerationPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_shieldRegenPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_lifePoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifePoints");
                gv_playerInfo[autoD81F8DE1_var].lv_lifePoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_lifeRegenPoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifeRegenPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_lifeRegenPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_mineralStartPoints = BankValueGetAsInt(BankLastCreated(), "TP", "MineralStartPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_mineralStartPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_vespeneStartPoints = BankValueGetAsInt(BankLastCreated(), "TP", "VespeneStartPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_vespeneStartPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_respawnTimerPoints = BankValueGetAsInt(BankLastCreated(), "TP", "RespawnSpeedPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_respawnTimerPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_moveSpeedPoints = BankValueGetAsInt(BankLastCreated(), "TP", "MoveSpeedPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_moveSpeedPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_energyPoints = BankValueGetAsInt(BankLastCreated(), "TP", "EnergyPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_energyPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_energyRegenPoints = BankValueGetAsInt(BankLastCreated(), "TP", "EnergyRegenPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_energyRegenPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_shieldArmorMultiplyPoints = BankValueGetAsInt(BankLastCreated(), "TP", "YOUR KILLS WILL BE RESET IF YOU ATTEMPT TO HACK ANYTHING");
                gv_playerInfo[autoD81F8DE1_var].lv_shieldArmorMultiplyPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_lifeArmorBonusPoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifeArmorBonusPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_lifeArmorBonusPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_lifeArmorMultiplyPoints = BankValueGetAsInt(BankLastCreated(), "TP", "LifeArmorMultiplyPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_lifeArmorMultiplyPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_cooldownPoints = BankValueGetAsInt(BankLastCreated(), "TP", "CooldownPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_cooldownPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_damageReductionPoints = BankValueGetAsInt(BankLastCreated(), "TP", "DamageReductionPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_damageReductionPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_shieldArmorBonusPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ShieldArmorBonusPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_shieldArmorBonusPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_expPoints = BankValueGetAsInt(BankLastCreated(), "TP", "ExpPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_expPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_masteryPoints = BankValueGetAsInt(BankLastCreated(), "TP", "MasteryPoints");
                gv_playerInfo[autoD81F8DE1_var].lv_masteryPoints /= (999 - (16 + lv_playerID[autoD81F8DE1_var]));
                gv_playerInfo[autoD81F8DE1_var].lv_tankKills = BankValueGetAsInt(BankLastCreated(), "jjj", "tankkills");
                gv_playerInfo[autoD81F8DE1_var].lv_supportKills = BankValueGetAsInt(BankLastCreated(), "jjj", "supportkills");
                gv_playerInfo[autoD81F8DE1_var].lv_specialistKills = BankValueGetAsInt(BankLastCreated(), "jjj", "specialistkills");
                gv_playerInfo[autoD81F8DE1_var].lv_splashKills = BankValueGetAsInt(BankLastCreated(), "jjj", "splashkills");
                gv_playerInfo[autoD81F8DE1_var].lv_asassinKills = BankValueGetAsInt(BankLastCreated(), "jjj", "assassinkills");
                gv_playerInfo[autoD81F8DE1_var].lv_singleTargetKills = BankValueGetAsInt(BankLastCreated(), "jjj", "singletargetkills");
                gv_playerInfo[autoD81F8DE1_var].lv_builderKills = BankValueGetAsInt(BankLastCreated(), "jjj", "builderkills");
                gv_playerInfo[autoD81F8DE1_var].lv_unlockaHerotruefalse = BankValueGetAsFlag(BankLastCreated(), "j", "unlockhero");
                gv_playerInfo[autoD81F8DE1_var].lv_killReducerApplied = BankValueGetAsFlag(BankLastCreated(), "j", "KillReducerForBounty");
                gv_playerInfo[autoD81F8DE1_var].lv_hydraliskYours = BankValueGetAsFlag(BankLastCreated(), "j", "UnlockHydralisk2");
                gv_playerInfo[autoD81F8DE1_var].lv_highestWave = BankValueGetAsInt(BankLastCreated(), "number", "wave");
                gv_playerInfo[autoD81F8DE1_var].lv_marineLevel = BankValueGetAsInt(BankLastCreated(), "j", "m");
                gv_playerInfo[autoD81F8DE1_var].lv_johnsonLevel = BankValueGetAsInt(BankLastCreated(), "j", "johny");
                gv_playerInfo[autoD81F8DE1_var].lv_marineStage = BankValueGetAsInt(BankLastCreated(), "j", "marinestage");
                gv_playerInfo[autoD81F8DE1_var].lv_medicStage = BankValueGetAsInt(BankLastCreated(), "j", "medicstage");
                gv_playerInfo[autoD81F8DE1_var].lv_reaperStage = BankValueGetAsInt(BankLastCreated(), "j", "reaperstage");
                gv_playerInfo[autoD81F8DE1_var].lv_sentryStage = BankValueGetAsInt(BankLastCreated(), "j", "elecstage");
                gv_playerInfo[autoD81F8DE1_var].lv_sniperLevel = BankValueGetAsInt(BankLastCreated(), "j", "n");
                gv_playerInfo[autoD81F8DE1_var].lv_sniperStage = BankValueGetAsInt(BankLastCreated(), "j", "sniperstage");
                gv_playerInfo[autoD81F8DE1_var].lv_spectreLevel = BankValueGetAsInt(BankLastCreated(), "j", "spec");
                gv_playerInfo[autoD81F8DE1_var].lv_firebatLevel = BankValueGetAsInt(BankLastCreated(), "j", "b");
                gv_playerInfo[autoD81F8DE1_var].lv_fSniperLevel = BankValueGetAsInt(BankLastCreated(), "j", "fs");
                gv_playerInfo[autoD81F8DE1_var].lv_reaperLevel = BankValueGetAsInt(BankLastCreated(), "j", "q");
                gv_playerInfo[autoD81F8DE1_var].lv_reaverLevel = BankValueGetAsInt(BankLastCreated(), "j", "e");
                gv_playerInfo[autoD81F8DE1_var].lv_darkArchonLevel = BankValueGetAsInt(BankLastCreated(), "j", "z");
                gv_playerInfo[autoD81F8DE1_var].lv_artanisLevel = BankValueGetAsInt(BankLastCreated(), "j", "artanis");
                gv_playerInfo[autoD81F8DE1_var].lv_stalkerLevel = BankValueGetAsInt(BankLastCreated(), "j", "l");
                gv_playerInfo[autoD81F8DE1_var].lv_stalkerStage = BankValueGetAsInt(BankLastCreated(), "j", "stalkerstage");
                gv_playerInfo[autoD81F8DE1_var].lv_spectreStage = BankValueGetAsInt(BankLastCreated(), "j", "specstage");
                gv_playerInfo[autoD81F8DE1_var].lv_metalManStage = BankValueGetAsInt(BankLastCreated(), "j", "metalmans");
                gv_playerInfo[autoD81F8DE1_var].lv_vultureStage = BankValueGetAsInt(BankLastCreated(), "j", "vultures");
                gv_playerInfo[autoD81F8DE1_var].lv_zealotLevel = BankValueGetAsInt(BankLastCreated(), "j", "k");
                gv_playerInfo[autoD81F8DE1_var].lv_hellionLevel = BankValueGetAsInt(BankLastCreated(), "j", "p");
                gv_playerInfo[autoD81F8DE1_var].lv_paragonExperience = BankValueGetAsInt(BankLastCreated(), "j", "paragon");
                gv_playerInfo[autoD81F8DE1_var].lv_paragonLevel = BankValueGetAsInt(BankLastCreated(), "j", "paragond");
                gv_playerInfo[autoD81F8DE1_var].lv_highTemplarLevel = BankValueGetAsInt(BankLastCreated(), "j", "high");
                gv_playerInfo[autoD81F8DE1_var].lv_warpPrismLevel = BankValueGetAsInt(BankLastCreated(), "j", "warprism");
                gv_playerInfo[autoD81F8DE1_var].lv_highTemplarStage = BankValueGetAsInt(BankLastCreated(), "j", "highstage");
                gv_playerInfo[autoD81F8DE1_var].lv_cLInfantry = BankValueGetAsFlag(BankLastCreated(), "Hack_This_I_Dare_You", "ChangeAnythingAndYourStatsReset");
                gv_playerInfo[autoD81F8DE1_var].lv_cLTeamGame = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLTeamGame");
                gv_playerInfo[autoD81F8DE1_var].lv_cLConstructor = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLConstructor");
                gv_playerInfo[autoD81F8DE1_var].lv_cLEvasive = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLEvasive");
                gv_playerInfo[autoD81F8DE1_var].lv_cLTorture = BankValueGetAsFlag(BankLastCreated(), "Challenges", "CLTorture1");
                gv_playerInfo[autoD81F8DE1_var].lv_medicLevel = BankValueGetAsInt(BankLastCreated(), "j", "med");
                gv_playerInfo[autoD81F8DE1_var].lv_thorLevel = BankValueGetAsInt(BankLastCreated(), "j", "j");
                gv_playerInfo[autoD81F8DE1_var].lv_hybridStage = BankValueGetAsInt(BankLastCreated(), "j", "hybridstage");
                gv_playerInfo[autoD81F8DE1_var].lv_motorCycleLevel = BankValueGetAsInt(BankLastCreated(), "j", "moto");
                gv_playerInfo[autoD81F8DE1_var].lv_thorStage = BankValueGetAsInt(BankLastCreated(), "j", "thorstage");
                gv_playerInfo[autoD81F8DE1_var].lv_colossusLevel = BankValueGetAsInt(BankLastCreated(), "j", "o");
                gv_playerInfo[autoD81F8DE1_var].lv_colossusStage = BankValueGetAsInt(BankLastCreated(), "j", "hotshotstage");
                gv_playerInfo[autoD81F8DE1_var].lv_tempestStage = BankValueGetAsInt(BankLastCreated(), "j", "tempstage");
                gv_playerInfo[autoD81F8DE1_var].lv_cycloneLevel = BankValueGetAsInt(BankLastCreated(), "j", "clone");
                gv_playerInfo[autoD81F8DE1_var].lv_tempestLevel = BankValueGetAsInt(BankLastCreated(), "j", "tempest");
                gv_playerInfo[autoD81F8DE1_var].lv_carrierLevel = BankValueGetAsInt(BankLastCreated(), "j", "carrierlvl");
                gv_playerInfo[autoD81F8DE1_var].lv_carrierLevelHelper = BankValueGetAsInt(BankLastCreated(), "j", "carrierlvl");
                gv_playerInfo[autoD81F8DE1_var].lv_immortalLevel = BankValueGetAsInt(BankLastCreated(), "j", "i");
                gv_playerInfo[autoD81F8DE1_var].lv_necromancerLevel = BankValueGetAsInt(BankLastCreated(), "j", "necro");
                gv_playerInfo[autoD81F8DE1_var].lv_immortalStage = BankValueGetAsInt(BankLastCreated(), "j", "immostage");
                gv_playerInfo[autoD81F8DE1_var].lv_voidRayStage = BankValueGetAsInt(BankLastCreated(), "j", "dynomito");
                gv_playerInfo[autoD81F8DE1_var].lv_dTLevel = BankValueGetAsInt(BankLastCreated(), "j", "u");
                gv_playerInfo[autoD81F8DE1_var].lv_dTStage = BankValueGetAsInt(BankLastCreated(), "j", "dtstage");
                gv_playerInfo[autoD81F8DE1_var].lv_tankLevel = BankValueGetAsInt(BankLastCreated(), "j", "y");
                gv_playerInfo[autoD81F8DE1_var].lv_dragoonLevel = BankValueGetAsInt(BankLastCreated(), "j", "t");
                gv_playerInfo[autoD81F8DE1_var].lv_goliathLevel = BankValueGetAsInt(BankLastCreated(), "j", "r");
                gv_playerInfo[autoD81F8DE1_var].lv_warMachineStage = BankValueGetAsInt(BankLastCreated(), "j", "WMST");
                gv_playerInfo[autoD81F8DE1_var].lv_adeptLevel = BankValueGetAsInt(BankLastCreated(), "j", "f");
                gv_playerInfo[autoD81F8DE1_var].lv_joeLevel = BankValueGetAsInt(BankLastCreated(), "j", "d");
                gv_playerInfo[autoD81F8DE1_var].lv_sentryLevel = BankValueGetAsInt(BankLastCreated(), "j", "w");
                gv_playerInfo[autoD81F8DE1_var].lv_siegeTankStage = BankValueGetAsInt(BankLastCreated(), "j", "siegestage");
            }
            else {
                BankSectionRemove(BankLastCreated(), "j");
                BankSectionRemove(BankLastCreated(), "jj");
                BankSectionRemove(BankLastCreated(), "jjj");
                BankSectionRemove(BankLastCreated(), "number");
            }
        }
        else {
            gv_playerInfo[autoD81F8DE1_var].lv_tankKills = BankValueGetAsInt(BankLastCreated(), "jj", "kill");
            gv_playerInfo[autoD81F8DE1_var].lv_highestWave = BankValueGetAsInt(BankLastCreated(), "number", "wave");
            gv_playerInfo[autoD81F8DE1_var].lv_marineLevel = BankValueGetAsInt(BankLastCreated(), "j", "m");
            gv_playerInfo[autoD81F8DE1_var].lv_sniperLevel = BankValueGetAsInt(BankLastCreated(), "j", "n");
            gv_playerInfo[autoD81F8DE1_var].lv_firebatLevel = BankValueGetAsInt(BankLastCreated(), "j", "b");
            gv_playerInfo[autoD81F8DE1_var].lv_reaperLevel = BankValueGetAsInt(BankLastCreated(), "j", "q");
            gv_playerInfo[autoD81F8DE1_var].lv_reaverLevel = BankValueGetAsInt(BankLastCreated(), "j", "e");
            gv_playerInfo[autoD81F8DE1_var].lv_darkArchonLevel = BankValueGetAsInt(BankLastCreated(), "j", "z");
            gv_playerInfo[autoD81F8DE1_var].lv_stalkerLevel = BankValueGetAsInt(BankLastCreated(), "j", "l");
            gv_playerInfo[autoD81F8DE1_var].lv_zealotLevel = BankValueGetAsInt(BankLastCreated(), "j", "k");
            gv_playerInfo[autoD81F8DE1_var].lv_hellionLevel = BankValueGetAsInt(BankLastCreated(), "j", "p");
            gv_playerInfo[autoD81F8DE1_var].lv_highTemplarLevel = BankValueGetAsInt(BankLastCreated(), "j", "high");
            gv_playerInfo[autoD81F8DE1_var].lv_medicLevel = BankValueGetAsInt(BankLastCreated(), "j", "med");
            gv_playerInfo[autoD81F8DE1_var].lv_thorLevel = BankValueGetAsInt(BankLastCreated(), "j", "j");
            gv_playerInfo[autoD81F8DE1_var].lv_colossusLevel = BankValueGetAsInt(BankLastCreated(), "j", "o");
            gv_playerInfo[autoD81F8DE1_var].lv_cycloneLevel = BankValueGetAsInt(BankLastCreated(), "j", "clone");
            gv_playerInfo[autoD81F8DE1_var].lv_immortalLevel = BankValueGetAsInt(BankLastCreated(), "j", "i");
            gv_playerInfo[autoD81F8DE1_var].lv_dTLevel = BankValueGetAsInt(BankLastCreated(), "j", "u");
            gv_playerInfo[autoD81F8DE1_var].lv_tankLevel = BankValueGetAsInt(BankLastCreated(), "j", "y");
            gv_playerInfo[autoD81F8DE1_var].lv_dragoonLevel = BankValueGetAsInt(BankLastCreated(), "j", "t");
            gv_playerInfo[autoD81F8DE1_var].lv_goliathLevel = BankValueGetAsInt(BankLastCreated(), "j", "r");
            gv_playerInfo[autoD81F8DE1_var].lv_adeptLevel = BankValueGetAsInt(BankLastCreated(), "j", "f");
            gv_playerInfo[autoD81F8DE1_var].lv_joeLevel = BankValueGetAsInt(BankLastCreated(), "j", "d");
            gv_playerInfo[autoD81F8DE1_var].lv_sentryLevel = BankValueGetAsInt(BankLastCreated(), "j", "w");
        }
        BoardItemSetText(gv_leaderboard, 2, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_highestWave));
        BoardItemSetText(gv_leaderboard, 3, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_tankKills));
        BoardItemSetText(gv_leaderboard, 4, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_supportKills));
        BoardItemSetText(gv_leaderboard, 5, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_specialistKills));
        BoardItemSetText(gv_leaderboard, 6, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_splashKills));
        BoardItemSetText(gv_leaderboard, 7, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_asassinKills));
        BoardItemSetText(gv_leaderboard, 8, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_singleTargetKills));
        BoardItemSetText(gv_leaderboard, 9, autoD81F8DE1_var, IntToText(gv_playerInfo[autoD81F8DE1_var].lv_builderKills));
        BoardItemSetFontSize(gv_leaderboard, 2, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 3, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 4, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 5, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 6, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 7, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 8, autoD81F8DE1_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 9, autoD81F8DE1_var, 16);
        PlayerModifyPropertyInt(autoD81F8DE1_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerInfo[autoD81F8DE1_var].lv_tankKills);
    }
    autoFBB8A4AA_var = 1;
    for ( ; autoFBB8A4AA_var <= autoFBB8A4AA_ae; autoFBB8A4AA_var += 1 ) {
        if ((gv_playerInfo[autoFBB8A4AA_var].lv_mineralStartPoints > 5000)) {
            gv_playerInfo[autoFBB8A4AA_var].lv_mineralStartPoints = 5000;
        }

        if ((gv_playerInfo[autoFBB8A4AA_var].lv_vespeneStartPoints > 500)) {
            gv_playerInfo[autoFBB8A4AA_var].lv_vespeneStartPoints = 500;
        }

        if ((gv_playerInfo[autoFBB8A4AA_var].lv_respawnTimerPoints > 20)) {
            gv_playerInfo[autoFBB8A4AA_var].lv_respawnTimerPoints = 20;
        }

        PlayerModifyPropertyFixed(autoFBB8A4AA_var, c_playerPropMinerals, c_playerPropOperSetTo, 25.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingStatsNoTalents_Init () {
    gt_StartingStatsNoTalents = TriggerCreate("gt_StartingStatsNoTalents_Func");
    TriggerEnable(gt_StartingStatsNoTalents, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Tracker
//--------------------------------------------------------------------------------------------------
bool gt_KillTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 9)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Zealot") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateZealot") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalZealot") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantZealot") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorZealot") || (UnitGetType(libNtve_gf_KillingUnit()) == "ZealotShakuras") || (UnitGetType(libNtve_gf_KillingUnit()) == "LeutinetCenturion") || (UnitGetType(libNtve_gf_KillingUnit()) == "CaptainCenturion") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerCenturion") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerSentinel") || (UnitGetType(libNtve_gf_KillingUnit()) == "GeneralSentinel") || (UnitGetType(libNtve_gf_KillingUnit()) == "Predator") || (UnitGetType(libNtve_gf_KillingUnit()) == "Immortal") || (UnitGetType(libNtve_gf_KillingUnit()) == "Firebat") || (UnitGetType(libNtve_gf_KillingUnit()) == "ThorAP") || (UnitGetType(libNtve_gf_KillingUnit()) == "Thor") || (UnitGetType(libNtve_gf_KillingUnit()) == "HybridDestroyer") || (UnitGetType(libNtve_gf_KillingUnit()) == "HybridDestroyer") || (UnitGetType(libNtve_gf_KillingUnit()) == "RagingHybrid") || (UnitGetType(libNtve_gf_KillingUnit()) == "OutragingHybrid"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 3, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Medic") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateMedic") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalMedic") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMedic") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorMedic") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorSurgeon") || (UnitGetType(libNtve_gf_KillingUnit()) == "LeutinetSurgeon2") || (UnitGetType(libNtve_gf_KillingUnit()) == "CaptainSurgeon") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerSurgeon") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerDoctor") || (UnitGetType(libNtve_gf_KillingUnit()) == "GeneralDoctor") || (UnitGetType(libNtve_gf_KillingUnit()) == "Sentry") || (UnitGetType(libNtve_gf_KillingUnit()) == "HighTemplar") || (UnitGetType(libNtve_gf_KillingUnit()) == "Adept") || (UnitGetType(libNtve_gf_KillingUnit()) == "Skeletalmage") || (UnitGetType(libNtve_gf_KillingUnit()) == "Skeletalarcher") || (UnitGetType(libNtve_gf_KillingUnit()) == "Skeleton") || (UnitGetType(libNtve_gf_KillingUnit()) == "Raven"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 4, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Reaper") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateReaper") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalReaper") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantReaper") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorReaper"))) {
        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 6)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 3, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 7;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 5)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 6, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 6;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 4)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 8, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 5;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 3)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 6, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 4;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 2)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 8, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 3;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 1)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 6, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 2;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 7)) {
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 1;
        }

        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "ArtanisVoid") || (UnitGetType(libNtve_gf_KillingUnit()) == "KerriganVoid") || (UnitGetType(libNtve_gf_KillingUnit()) == "AlarakChampion") || (UnitGetType(libNtve_gf_KillingUnit()) == "Yeti") || (UnitGetType(libNtve_gf_KillingUnit()) == "HydraliskLurker") || (UnitGetType(libNtve_gf_KillingUnit()) == "HotSRaptor") || (UnitGetType(libNtve_gf_KillingUnit()) == "RoachCorpser") || (UnitGetType(libNtve_gf_KillingUnit()) == "RoachVile") || (UnitGetType(libNtve_gf_KillingUnit()) == "Roachling"))) {
        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 7)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 4, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 8;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 6)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 3, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_tankKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 7;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 5)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_asassinKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_asassinKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 7, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_asassinKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 6;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 4)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 8, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 5;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 3)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 5, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 4;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 2)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_builderKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_builderKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 9, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_builderKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 3;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 1)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 6, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills));
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 2;
        }

        if ((gv_reaperKeeper[libNtve_gf_KillingPlayer()] == 8)) {
            gv_reaperKeeper[libNtve_gf_KillingPlayer()] = 1;
        }

        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Oracle") || (UnitGetType(libNtve_gf_KillingUnit()) == "FireWard") || (UnitGetType(libNtve_gf_KillingUnit()) == "OracleStasisTrap") || (UnitGetType(libNtve_gf_KillingUnit()) == "PoisonWard"))) {
        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 6)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 6, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills));
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 7;
        }

        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 5)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 5, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills));
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 6;
        }

        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 4)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 4, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills));
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 5;
        }

        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 3)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 5, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills));
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 4;
        }

        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 2)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 4, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_supportKills));
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 3;
        }

        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 1)) {
            gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
            BoardItemSetText(gv_leaderboard, 5, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills));
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 2;
        }

        if ((gv_oracleKeeper[libNtve_gf_KillingPlayer()] == 7)) {
            gv_oracleKeeper[libNtve_gf_KillingPlayer()] = 1;
        }

        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Stalker") || (UnitGetType(libNtve_gf_KillingUnit()) == "AutoTurret") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateStalker") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalStalker") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantStalker") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorStalker") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorInstigator") || (UnitGetType(libNtve_gf_KillingUnit()) == "LeutinetInstigator") || (UnitGetType(libNtve_gf_KillingUnit()) == "CaptainInstigator") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerInstigator") || (UnitGetType(libNtve_gf_KillingUnit()) == "Dragoon") || (UnitGetType(libNtve_gf_KillingUnit()) == "GeneralDragoon") || (UnitGetType(libNtve_gf_KillingUnit()) == "Diamondback") || (UnitGetType(libNtve_gf_KillingUnit()) == "ScoutBaby") || (UnitGetType(libNtve_gf_KillingUnit()) == "Scout") || (UnitGetType(libNtve_gf_KillingUnit()) == "Cyclone") || (UnitGetType(libNtve_gf_KillingUnit()) == "PhotonCannon") || (UnitGetType(libNtve_gf_KillingUnit()) == "PhaseCannon") || (UnitGetType(libNtve_gf_KillingUnit()) == "PurifierCannon") || (UnitGetType(libNtve_gf_KillingUnit()) == "PowerCannon") || (UnitGetType(libNtve_gf_KillingUnit()) == "Mothership") || (UnitGetType(libNtve_gf_KillingUnit()) == "SOAPurifierBeamUnit"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 5, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_specialistKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Vulture") || (UnitGetType(libNtve_gf_KillingUnit()) == "SpiderMine") || (UnitGetType(libNtve_gf_KillingUnit()) == "Vulture2") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalVulture") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantVulture") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorVulture") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorBiker") || (UnitGetType(libNtve_gf_KillingUnit()) == "LeutinetBiker") || (UnitGetType(libNtve_gf_KillingUnit()) == "CaptainBiker") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerBiker") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerScooter") || (UnitGetType(libNtve_gf_KillingUnit()) == "GeneralScooter") || (UnitGetType(libNtve_gf_KillingUnit()) == "Archon") || (UnitGetType(libNtve_gf_KillingUnit()) == "Hellion") || (UnitGetType(libNtve_gf_KillingUnit()) == "SiegeTank") || (UnitGetType(libNtve_gf_KillingUnit()) == "SiegeTankSieged") || (UnitGetType(libNtve_gf_KillingUnit()) == "BreachingCharge") || (UnitGetType(libNtve_gf_KillingUnit()) == "Colossus") || (UnitGetType(libNtve_gf_KillingUnit()) == "Reaver") || (UnitGetType(libNtve_gf_KillingUnit()) == "ScarabWeapon") || (UnitGetType(libNtve_gf_KillingUnit()) == "Scarab"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 6, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_splashKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Ghost") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateGhost") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalGhost") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantGhost") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorGhost") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorNova") || (UnitGetType(libNtve_gf_KillingUnit()) == "LieutenentNova") || (UnitGetType(libNtve_gf_KillingUnit()) == "CaptainNova") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerNova") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerMarksman") || (UnitGetType(libNtve_gf_KillingUnit()) == "GeneralMarksman") || (UnitGetType(libNtve_gf_KillingUnit()) == "Spectre") || (UnitGetType(libNtve_gf_KillingUnit()) == "DarkTemplar") || (UnitGetType(libNtve_gf_KillingUnit()) == "Wraith") || (UnitGetType(libNtve_gf_KillingUnit()) == "Tempest"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_asassinKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_asassinKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 7, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_asassinKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Marine") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateMarine") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalMarine") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMarine") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorMarine") || (UnitGetType(libNtve_gf_KillingUnit()) == "TychusCommando") || (UnitGetType(libNtve_gf_KillingUnit()) == "LeutinetTychus") || (UnitGetType(libNtve_gf_KillingUnit()) == "CaptainTychus") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommissionerTychus") || (UnitGetType(libNtve_gf_KillingUnit()) == "RaynorCommando") || (UnitGetType(libNtve_gf_KillingUnit()) == "GeneralRaynor") || (UnitGetType(libNtve_gf_KillingUnit()) == "VoidRay") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrivateVoidRay") || (UnitGetType(libNtve_gf_KillingUnit()) == "CorporalVoidRay") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantVoidRay") || (UnitGetType(libNtve_gf_KillingUnit()) == "SergeantMajorVoidRay") || (UnitGetType(libNtve_gf_KillingUnit()) == "Mohandar") || (UnitGetType(libNtve_gf_KillingUnit()) == "VikingAssault") || (UnitGetType(libNtve_gf_KillingUnit()) == "Carrier") || (UnitGetType(libNtve_gf_KillingUnit()) == "Interceptor") || (UnitGetType(libNtve_gf_KillingUnit()) == "Battlecruiser"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 8, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_singleTargetKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "SCV") || (UnitGetType(libNtve_gf_KillingUnit()) == "MissileTurret") || (UnitGetType(libNtve_gf_KillingUnit()) == "MinerMale") || (UnitGetType(libNtve_gf_KillingUnit()) == "LabTurretUp") || (UnitGetType(libNtve_gf_KillingUnit()) == "SentryGun") || (UnitGetType(libNtve_gf_KillingUnit()) == "NukeSiloNova") || (UnitGetType(libNtve_gf_KillingUnit()) == "UmojanLabMicrobot") || (UnitGetType(libNtve_gf_KillingUnit()) == "HERC") || (UnitGetType(libNtve_gf_KillingUnit()) == "CommandCenter") || (UnitGetType(libNtve_gf_KillingUnit()) == "Marauder") || (UnitGetType(libNtve_gf_KillingUnit()) == "MercReaper") || (UnitGetType(libNtve_gf_KillingUnit()) == "WarPig") || (UnitGetType(libNtve_gf_KillingUnit()) == "Ghost2") || (UnitGetType(libNtve_gf_KillingUnit()) == "Bunker") || (UnitGetType(libNtve_gf_KillingUnit()) == "Pylon") || (UnitGetType(libNtve_gf_KillingUnit()) == "RoboticsBay"))) {
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        gv_playerInfo[libNtve_gf_KillingPlayer()].lv_builderKills = (gv_playerInfo[libNtve_gf_KillingPlayer()].lv_builderKills + gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue);
        BoardItemSetText(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_kills));
        BoardItemSetText(gv_leaderboard, 9, libNtve_gf_KillingPlayer(), IntToText(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_builderKills));
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetTextColor(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), Color(0.00, 65.10, 0.00));
        BoardItemSetFontSize(gv_thisgmaeleader, 2, libNtve_gf_KillingPlayer(), 16);
    }

    PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 1.0);
    PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperAdd, IntToFixed(gv_playerInfo[libNtve_gf_KillingPlayer()].lv_killValue));
    if (((libNtve_gf_UnitInRegion(libNtve_gf_KillingUnit(), RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(libNtve_gf_KillingUnit(), RegionFromId(33)) == true))) {
        PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 3.0);
    }

    if (((libNtve_gf_UnitInRegion(libNtve_gf_KillingUnit(), RegionFromId(23)) == true) || (libNtve_gf_UnitInRegion(libNtve_gf_KillingUnit(), RegionFromId(24)) == true) || (libNtve_gf_UnitInRegion(libNtve_gf_KillingUnit(), RegionFromId(27)) == true))) {
        PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 3.0);
        PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropVespene, c_playerPropOperAdd, 2.0);
    }

    if ((libNtve_gf_UnitInRegion(libNtve_gf_KillingUnit(), RegionFromId(20)) == true)) {
        PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropVespene, c_playerPropOperAdd, 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillTracker_Init () {
    gt_KillTracker = TriggerCreate("gt_KillTracker_Func");
    TriggerAddEventUnitDied(gt_KillTracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: showjungle
//--------------------------------------------------------------------------------------------------
bool gt_showjungle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto769FE191_ae = 6;
    int auto769FE191_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto769FE191_var = 1;
    for ( ; auto769FE191_var <= auto769FE191_ae; auto769FE191_var += 1 ) {
        if (((libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(33)) == true))) {
            UIClearMessages(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug);
            UIDisplayMessage(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug, StringExternal("Param/Value/16619BB7"));
        }

        if (((libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(23)) == true) || (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(24)) == true) || (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(27)) == true))) {
            UIClearMessages(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug);
            UIDisplayMessage(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug, StringExternal("Param/Value/DA5C2D32"));
        }

        if ((libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(20)) == true)) {
            UIClearMessages(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug);
            UIDisplayMessage(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug, StringExternal("Param/Value/FADD795F"));
        }

        if ((libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(17)) == false) && (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(33)) == false) && (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(20)) == false) && (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(23)) == false) && (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(24)) == false) && (libNtve_gf_UnitInRegion(gv_playerInfo[auto769FE191_var].lv_hero, RegionFromId(27)) == false)) {
            UIClearMessages(PlayerGroupSingle(auto769FE191_var), c_messageAreaDebug);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showjungle_Init () {
    gt_showjungle = TriggerCreate("gt_showjungle_Func");
    TriggerAddEventTimePeriodic(gt_showjungle, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setthestupidfontsizeofleaderbaord
//--------------------------------------------------------------------------------------------------
bool gt_setthestupidfontsizeofleaderbaord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto61123EFC_ae = 8;
    int auto61123EFC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto61123EFC_var = 1;
    for ( ; auto61123EFC_var <= auto61123EFC_ae; auto61123EFC_var += 1 ) {
        BoardItemSetFontSize(gv_thisgmaeleader, 1, auto61123EFC_var, 16);
        BoardItemSetFontSize(gv_leaderboard, 1, auto61123EFC_var, 16);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setthestupidfontsizeofleaderbaord_Init () {
    gt_setthestupidfontsizeofleaderbaord = TriggerCreate("gt_setthestupidfontsizeofleaderbaord_Func");
    TriggerAddEventTimeElapsed(gt_setthestupidfontsizeofleaderbaord, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1minperkill
//--------------------------------------------------------------------------------------------------
bool gt__1minperkill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE24DB087_ae = 8;
    int autoE24DB087_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE24DB087_var = 1;
    for ( ; autoE24DB087_var <= autoE24DB087_ae; autoE24DB087_var += 1 ) {
        if ((PlayerStatus(autoE24DB087_var) == c_playerStatusActive) && (PlayerGroupHasPlayer(gf_HumanPlayers(), autoE24DB087_var) == true)) {
            PlayerModifyPropertyFixed(autoE24DB087_var, c_playerPropMinerals, c_playerPropOperAdd, 1.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1minperkill_Init () {
    gt__1minperkill = TriggerCreate("gt__1minperkill_Func");
    TriggerAddEventUnitDied(gt__1minperkill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: leavingp
//--------------------------------------------------------------------------------------------------
bool gt_leavingp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[7] lv_talentPoints;
    int[7] lv_damagePoints;
    int[7] lv_movespeedPoints;
    int[7] lv_energyPoints;
    int[7] lv_energyRegenPoints;
    int[7] lv_lifePoints;
    int[7] lv_mineralStart;
    int[7] lv_vespeneStart;
    int[7] lv_lifeRegenPoints;
    int[7] lv_respawnSpeedPoints;
    int[7] lv_shieldPoints;
    int[7] lv_shieldRegenerationPoints;
    int[7] lv_cooldownPoints;
    int[7] lv_lifeArmorBonusPoints;
    int[7] lv_shieldArmorBonusPoints;
    int[7] lv_lifeArmorMultiplyPoints;
    int[7] lv_shieldArmorMultiplyPoints;
    int[7] lv_damageReductionPoints;
    int[7] lv_expPoints;
    int[7] lv_masteryPoints;

    // Automatic Variable Declarations
    playergroup auto5C816BFD_g;
    int auto5C816BFD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C816BFD_g = PlayerGroupAll();
    auto5C816BFD_var = -1;
    while (true) {
        auto5C816BFD_var = PlayerGroupNextPlayer(auto5C816BFD_g, auto5C816BFD_var);
        if (auto5C816BFD_var < 0) { break; }
        BankLoad("zombieworldu", auto5C816BFD_var);
        BankValueSetFromInt(BankLastCreated(), "jj", "tankkills", gv_playerInfo[auto5C816BFD_var].lv_tankKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "tankkills", gv_playerInfo[auto5C816BFD_var].lv_tankKills);
        BankValueSetFromInt(BankLastCreated(), "jj", "supportkills", gv_playerInfo[auto5C816BFD_var].lv_supportKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "supportkills", gv_playerInfo[auto5C816BFD_var].lv_supportKills);
        BankValueSetFromInt(BankLastCreated(), "jj", "specialistkills", gv_playerInfo[auto5C816BFD_var].lv_specialistKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "specialistkills", gv_playerInfo[auto5C816BFD_var].lv_specialistKills);
        BankValueSetFromInt(BankLastCreated(), "jj", "splashkills", gv_playerInfo[auto5C816BFD_var].lv_splashKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "splashkills", gv_playerInfo[auto5C816BFD_var].lv_splashKills);
        BankValueSetFromInt(BankLastCreated(), "jj", "assassinkills", gv_playerInfo[auto5C816BFD_var].lv_asassinKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "assassinkills", gv_playerInfo[auto5C816BFD_var].lv_asassinKills);
        BankValueSetFromInt(BankLastCreated(), "jj", "singletargetkills", gv_playerInfo[auto5C816BFD_var].lv_singleTargetKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "singletargetkills", gv_playerInfo[auto5C816BFD_var].lv_singleTargetKills);
        BankValueSetFromInt(BankLastCreated(), "jj", "builderkills", gv_playerInfo[auto5C816BFD_var].lv_builderKills);
        BankValueSetFromInt(BankLastCreated(), "jjj", "builderkills", gv_playerInfo[auto5C816BFD_var].lv_builderKills);
        lv_talentPoints[auto5C816BFD_var] = PlayerGetPropertyInt(auto5C816BFD_var, c_playerPropCustom);
        lv_talentPoints[auto5C816BFD_var] *= 5;
        BankValueSetFromInt(BankLastCreated(), "PlayerIDNumber", "PlayerID", lv_talentPoints[auto5C816BFD_var]);
        lv_talentPoints[auto5C816BFD_var] /= 5;
        lv_damagePoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_damagePoints;
        lv_damagePoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "DamagePoints", lv_damagePoints[auto5C816BFD_var]);
        lv_movespeedPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_moveSpeedPoints;
        lv_movespeedPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "MoveSpeedPoints", lv_movespeedPoints[auto5C816BFD_var]);
        lv_energyPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_energyPoints;
        lv_energyPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "EnergyPoints", lv_energyPoints[auto5C816BFD_var]);
        lv_shieldArmorMultiplyPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_shieldArmorMultiplyPoints;
        lv_shieldArmorMultiplyPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "YOUR KILLS WILL BE RESET IF YOU ATTEMPT TO HACK ANYTHING", lv_shieldArmorMultiplyPoints[auto5C816BFD_var]);
        lv_energyRegenPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_energyRegenPoints;
        lv_energyRegenPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "EnergyRegenPoints", lv_energyRegenPoints[auto5C816BFD_var]);
        lv_lifePoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_lifePoints;
        lv_lifePoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "LifePoints", lv_lifePoints[auto5C816BFD_var]);
        lv_shieldArmorBonusPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_shieldArmorBonusPoints;
        lv_shieldArmorBonusPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "ShieldArmorBonusPoints", lv_shieldArmorBonusPoints[auto5C816BFD_var]);
        lv_damageReductionPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_damageReductionPoints;
        lv_damageReductionPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "DamageReductionPoints", lv_damageReductionPoints[auto5C816BFD_var]);
        lv_lifeArmorBonusPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_lifeArmorBonusPoints;
        lv_lifeArmorBonusPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "LifeArmorBonusPoints", lv_lifeArmorBonusPoints[auto5C816BFD_var]);
        lv_lifeArmorMultiplyPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_lifeArmorMultiplyPoints;
        lv_lifeArmorMultiplyPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "LifeArmorMultiplyPoints", lv_lifeArmorMultiplyPoints[auto5C816BFD_var]);
        lv_cooldownPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_cooldownPoints;
        lv_cooldownPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "CooldownPoints", lv_cooldownPoints[auto5C816BFD_var]);
        lv_shieldPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_shieldPoints;
        lv_shieldPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "ShieldPoints", lv_shieldPoints[auto5C816BFD_var]);
        lv_shieldRegenerationPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_shieldRegenPoints;
        lv_shieldRegenerationPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "ShieldRegenerationPoints", lv_shieldRegenerationPoints[auto5C816BFD_var]);
        lv_mineralStart[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_mineralStartPoints;
        lv_mineralStart[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "MineralStartPoints", lv_mineralStart[auto5C816BFD_var]);
        lv_vespeneStart[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_vespeneStartPoints;
        lv_vespeneStart[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "VespeneStartPoints", lv_vespeneStart[auto5C816BFD_var]);
        lv_respawnSpeedPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_respawnTimerPoints;
        lv_respawnSpeedPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "RespawnSpeedPoints", lv_respawnSpeedPoints[auto5C816BFD_var]);
        lv_expPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_expPoints;
        lv_expPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "ExpPoints", lv_expPoints[auto5C816BFD_var]);
        lv_masteryPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_masteryPoints;
        lv_masteryPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "MasteryPoints", lv_masteryPoints[auto5C816BFD_var]);
        lv_lifeRegenPoints[auto5C816BFD_var] = gv_playerInfo[auto5C816BFD_var].lv_lifeRegenPoints;
        lv_lifeRegenPoints[auto5C816BFD_var] *= (999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "TP", "LifeRegenPoints", lv_lifeRegenPoints[auto5C816BFD_var]);
        lv_talentPoints[auto5C816BFD_var] *= (9999 - (16 + lv_talentPoints[auto5C816BFD_var]));
        BankValueSetFromInt(BankLastCreated(), "PlayerIDNumber", "InfoNumber", lv_talentPoints[auto5C816BFD_var]);
        if ((gv_playerInfo[auto5C816BFD_var].lv_highestWave < gv_wave)) {
            gv_playerInfo[auto5C816BFD_var].lv_highestWave = gv_wave;
            BoardItemSetText(gv_leaderboard, 2, auto5C816BFD_var, IntToText(gv_playerInfo[auto5C816BFD_var].lv_highestWave));
            BoardItemSetFontSize(gv_leaderboard, 2, auto5C816BFD_var, 16);
        }

        BankValueSetFromInt(BankLastCreated(), "number", "wave", gv_playerInfo[auto5C816BFD_var].lv_highestWave);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_leavingp_Init () {
    gt_leavingp = TriggerCreate("gt_leavingp_Func");
    TriggerEnable(gt_leavingp, false);
    TriggerAddEventTimePeriodic(gt_leavingp, 13.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead
//--------------------------------------------------------------------------------------------------
bool gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(gv_leaderboard, 2, 1, IntToText(gv_playerInfo[1].lv_highestWave));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead_Init () {
    gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead = TriggerCreate("gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead_Func");
    TriggerAddEventTimePeriodic(gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NonoZone
//--------------------------------------------------------------------------------------------------
bool gt_NonoZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    UnitSetPosition(EventUnit(), PointFromId(204056418), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NonoZone_Init () {
    gt_NonoZone = TriggerCreate("gt_NonoZone_Func");
    TriggerEnable(gt_NonoZone, false);
    TriggerAddEventUnitRegion(gt_NonoZone, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NonoZone 2
//--------------------------------------------------------------------------------------------------
bool gt_NonoZone2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    UnitSetPosition(EventUnit(), PointFromId(1313584221), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NonoZone2_Init () {
    gt_NonoZone2 = TriggerCreate("gt_NonoZone2_Func");
    TriggerEnable(gt_NonoZone2, false);
    TriggerAddEventUnitRegion(gt_NonoZone2, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: by
//--------------------------------------------------------------------------------------------------
bool gt_by_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Probe"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "TempestWeapon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "TempestWeaponGround"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    UnitSetPosition(EventUnit(), PointFromId(2061199121), false);
    if ((UnitGetType(EventUnit()) == "NaturalMinerals") && (UnitGetType(EventUnit()) == "NaturalGas25")) {
    }
    else {
        CameraPan(EventPlayer(), PointFromId(2061199121), 0.0, -1, 100.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_by_Init () {
    gt_by = TriggerCreate("gt_by_Func");
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(59), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_by, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn1
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn1_Init () {
    gt_getoutofspawn1 = TriggerCreate("gt_getoutofspawn1_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn1, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn2
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn2_Init () {
    gt_getoutofspawn2 = TriggerCreate("gt_getoutofspawn2_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn2, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn3
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, -3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn3_Init () {
    gt_getoutofspawn3 = TriggerCreate("gt_getoutofspawn3_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn3, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn4
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, -3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn4_Init () {
    gt_getoutofspawn4 = TriggerCreate("gt_getoutofspawn4_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn4, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn5
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 3.0, -3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn5_Init () {
    gt_getoutofspawn5 = TriggerCreate("gt_getoutofspawn5_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn5, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn6
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -3.0, -3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn6_Init () {
    gt_getoutofspawn6 = TriggerCreate("gt_getoutofspawn6_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn6, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn7
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -3.0, 0.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn7_Init () {
    gt_getoutofspawn7 = TriggerCreate("gt_getoutofspawn7_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn7, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn8
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -3.0, 0.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn8_Init () {
    gt_getoutofspawn8 = TriggerCreate("gt_getoutofspawn8_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn8, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getoutofspawn8(2)
//--------------------------------------------------------------------------------------------------
bool gt_getoutofspawn82_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 12))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 3.0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getoutofspawn82_Init () {
    gt_getoutofspawn82 = TriggerCreate("gt_getoutofspawn82_Func");
    TriggerAddEventUnitRegion(gt_getoutofspawn82, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack1
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 1.5, 0.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack1_Init () {
    gt_MoveBack1 = TriggerCreate("gt_MoveBack1_Func");
    TriggerEnable(gt_MoveBack1, false);
    TriggerAddEventUnitRegion(gt_MoveBack1, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack2
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 1.5, 0.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack2_Init () {
    gt_MoveBack2 = TriggerCreate("gt_MoveBack2_Func");
    TriggerEnable(gt_MoveBack2, false);
    TriggerAddEventUnitRegion(gt_MoveBack2, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack3
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 1.5, 0.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack3_Init () {
    gt_MoveBack3 = TriggerCreate("gt_MoveBack3_Func");
    TriggerEnable(gt_MoveBack3, false);
    TriggerAddEventUnitRegion(gt_MoveBack3, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack4
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -1.5, 0.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack4_Init () {
    gt_MoveBack4 = TriggerCreate("gt_MoveBack4_Func");
    TriggerEnable(gt_MoveBack4, false);
    TriggerAddEventUnitRegion(gt_MoveBack4, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack5
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -1.5, 0.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack5_Init () {
    gt_MoveBack5 = TriggerCreate("gt_MoveBack5_Func");
    TriggerEnable(gt_MoveBack5, false);
    TriggerAddEventUnitRegion(gt_MoveBack5, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack6
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -1.5, 0.0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack6_Init () {
    gt_MoveBack6 = TriggerCreate("gt_MoveBack6_Func");
    TriggerEnable(gt_MoveBack6, false);
    TriggerAddEventUnitRegion(gt_MoveBack6, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack7
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, -3.0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack7_Init () {
    gt_MoveBack7 = TriggerCreate("gt_MoveBack7_Func");
    TriggerEnable(gt_MoveBack7, false);
    TriggerAddEventUnitRegion(gt_MoveBack7, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack8
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, -1.5)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack8_Init () {
    gt_MoveBack8 = TriggerCreate("gt_MoveBack8_Func");
    TriggerEnable(gt_MoveBack8, false);
    TriggerAddEventUnitRegion(gt_MoveBack8, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveBack9
//--------------------------------------------------------------------------------------------------
bool gt_MoveBack9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 1.5)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveBack9_Init () {
    gt_MoveBack9 = TriggerCreate("gt_MoveBack9_Func");
    TriggerEnable(gt_MoveBack9, false);
    TriggerAddEventUnitRegion(gt_MoveBack9, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveToCenter
//--------------------------------------------------------------------------------------------------
bool gt_MoveToCenter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ScoutBaby"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalMinerals"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NaturalGas25"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "YourCarrierFriend"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(UnitGetOwner(EventUnit()), PointFromId(7209161), 0.0, -1, 100.0, false);
    UnitSetPosition(EventUnit(), PointFromId(7209161), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    Wait(1.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveToCenter_Init () {
    gt_MoveToCenter = TriggerCreate("gt_MoveToCenter_Func");
    TriggerEnable(gt_MoveToCenter, false);
    TriggerAddEventUnitRegion(gt_MoveToCenter, null, RegionFromId(1), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GrantToOffspring
//--------------------------------------------------------------------------------------------------
bool gt_GrantToOffspring_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "GasUpgradesBuff", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantToOffspring_Init () {
    gt_GrantToOffspring = TriggerCreate("gt_GrantToOffspring_Func");
    TriggerAddEventUnitRegion(gt_GrantToOffspring, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GrantKil
//--------------------------------------------------------------------------------------------------
bool gt_GrantKil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(1) == "1-S2-1-854691"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_tankKills = 13000;
    gv_playerInfo[EventPlayer()].lv_supportKills = 3500;
    gv_playerInfo[EventPlayer()].lv_specialistKills = 30000;
    gv_playerInfo[EventPlayer()].lv_asassinKills = 68000;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills = 65000;
    gv_playerInfo[EventPlayer()].lv_splashKills = 28000;
    gv_playerInfo[EventPlayer()].lv_builderKills = 17000;
    gv_playerInfo[EventPlayer()].lv_highestWave = 101;
    BoardItemSetText(gv_leaderboard, 2, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantKil_Init () {
    gt_GrantKil = TriggerCreate("gt_GrantKil_Func");
    TriggerAddEventChatMessage(gt_GrantKil, c_playerAny, "gimmeitback", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -stats
//--------------------------------------------------------------------------------------------------
bool gt_stats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_costtobuy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F5561712"));
    if ((TechTreeUpgradeCount(EventPlayer(), "SpeedGlove1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/114D8512"));
    }
    else {
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(84160766), 5.0, Color(0.00, 100.00, 0.00));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/95A4BA11"));
        lv_costtobuy += 500;
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "SpeedBootsBehavior1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2433CF2D"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/91BA7673"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(1721100061), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 500;
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "VisionandRange1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AB0C9FBC"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/63A4EB4E"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(404101260), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 500;
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "DamageBonus1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EED25F14"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CFBB2D60"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(1628028025), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 500;
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "SpeedCooldowns1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BF17E64D"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B5EA3054"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(1626240058), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 500;
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "BonusVitals1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0BB49D20"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C2367433"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(609218182), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 500;
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountQueuedOrBetter) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CB3F0EDA"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/59CFD362"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(1499566526), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 1000;
    }
    if (((TechTreeUpgradeCount(EventPlayer(), "SpecialArchon1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialDarkTemplar1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialDiamondBack1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialGhost1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialGoliath1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialHERC1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialImmortal1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialMarine1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialMedic1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialMiner1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialPredator1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialReaper1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialScout1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialSCV1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialSentry1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialStalker1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialSpectre1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialVoidRay1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialVulture1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialZealot1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialHighTemplar1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialHellion1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialWraith1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialOracle1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialSiegeTank1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialMarauder1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialHydralisk1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialViking1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialFirebat1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialAdept1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialCyclone1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialColossus1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialThor1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialTempest1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialCarrier1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialCorsair1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialDarkMage1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialReaver1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialMothership1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialBattlecruiser1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialHybrid1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialArtanis1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialAlarak1", c_techCountQueuedOrBetter) == 1) || (TechTreeUpgradeCount(EventPlayer(), "SpecialRaven1", c_techCountQueuedOrBetter) == 1))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/8DD411B9"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DC3F3B35"));
        MinimapPing(PlayerGroupSingle(EventPlayer()), PointFromId(909413652), 5.0, Color(0.00, 100.00, 0.00));
        lv_costtobuy += 1000;
    }
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < lv_costtobuy)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/23FEFD31") + (TextWithColor(IntToText((lv_costtobuy - PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), Color(100.00, 100.00, 0.00)) + StringExternal("Param/Value/BDF3F14A"))));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/651B80D9"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_stats_Init () {
    gt_stats = TriggerCreate("gt_stats_Func");
    TriggerAddEventChatMessage(gt_stats, c_playerAny, "-status", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpeedGlove Dialog Creations
//--------------------------------------------------------------------------------------------------
bool gt_SpeedGloveDialogCreations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_speedGloveDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B7BB7B53"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/0E428AEA"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_speedGloveDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_speedGloveDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_speedGloveDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_speedGloveDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedGloveDialogCreations_Init () {
    gt_SpeedGloveDialogCreations = TriggerCreate("gt_SpeedGloveDialogCreations_Func");
    TriggerAddEventMapInit(gt_SpeedGloveDialogCreations);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/HIde SpeedGlove
//--------------------------------------------------------------------------------------------------
bool gt_ShowHIdeSpeedGlove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(18)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpeedGlove1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_speedGloveDialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_speedGloveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHIdeSpeedGlove_Init () {
    gt_ShowHIdeSpeedGlove = TriggerCreate("gt_ShowHIdeSpeedGlove_Func");
    TriggerAddEventUnitRegion(gt_ShowHIdeSpeedGlove, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_ShowHIdeSpeedGlove, null, RegionFromId(18), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Speed Glove
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpeedGlove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 499))) {
            return false;
        }

        if (!((gv_speedGloveDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpeedGlove1", 1);
        TextTagShow(gv_speedGloves, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedGlovesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_speedGloveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpeedGlove_Init () {
    gt_ActivateSpeedGlove = TriggerCreate("gt_ActivateSpeedGlove_Func");
    TriggerAddEventDialogControl(gt_ActivateSpeedGlove, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpeedSpecialties Creations
//--------------------------------------------------------------------------------------------------
bool gt_SpeedSpecialtiesCreations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_speedSpecialtiesDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/08CF4A49"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 200);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/76D87A6F"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_speedSpecialtiesDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 323, 198);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_speedSpecialtiesDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_speedSpecialtiesDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedSpecialtiesCreations_Init () {
    gt_SpeedSpecialtiesCreations = TriggerCreate("gt_SpeedSpecialtiesCreations_Func");
    TriggerAddEventMapInit(gt_SpeedSpecialtiesCreations);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/HIde SpeedSpecialties
//--------------------------------------------------------------------------------------------------
bool gt_ShowHIdeSpeedSpecialties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) != true)) {
        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }

    if (((UnitGetType(EventUnit()) == "Stalker") || (UnitGetType(EventUnit()) == "PrivateStalker") || (UnitGetType(EventUnit()) == "CorporalStalker") || (UnitGetType(EventUnit()) == "SergeantStalker") || (UnitGetType(EventUnit()) == "SergeantMajorStalker") || (UnitGetType(EventUnit()) == "SergeantMajorInstigator") || (UnitGetType(EventUnit()) == "LeutinetInstigator") || (UnitGetType(EventUnit()) == "CaptainInstigator") || (UnitGetType(EventUnit()) == "CommissionerInstigator") || (UnitGetType(EventUnit()) == "Dragoon") || (UnitGetType(EventUnit()) == "GeneralDragoon")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStalker1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/4E8DE147"), PlayerGroupAll());
    }
    else {
        if (((UnitGetType(EventUnit()) == "Medic") || (UnitGetType(EventUnit()) == "PrivateMedic") || (UnitGetType(EventUnit()) == "CorporalMedic") || (UnitGetType(EventUnit()) == "SergeantMedic") || (UnitGetType(EventUnit()) == "SergeantMajorMedic") || (UnitGetType(EventUnit()) == "SergeantMajorSurgeon") || (UnitGetType(EventUnit()) == "LeutinetSurgeon2") || (UnitGetType(EventUnit()) == "CaptainSurgeon") || (UnitGetType(EventUnit()) == "CommissionerSurgeon") || (UnitGetType(EventUnit()) == "CommissionerDoctor") || (UnitGetType(EventUnit()) == "GeneralDoctor")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialMedic1", c_techCountCompleteOnly) == 0)) {
            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/18E2B9CC"), PlayerGroupAll());
        }
        else {
            if (((UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "PrivateZealot") || (UnitGetType(EventUnit()) == "CorporalZealot") || (UnitGetType(EventUnit()) == "SergeantZealot") || (UnitGetType(EventUnit()) == "SergeantMajorZealot") || (UnitGetType(EventUnit()) == "ZealotShakuras") || (UnitGetType(EventUnit()) == "LeutinetCenturion") || (UnitGetType(EventUnit()) == "CaptainCenturion") || (UnitGetType(EventUnit()) == "CommissionerCenturion") || (UnitGetType(EventUnit()) == "CommissionerSentinel") || (UnitGetType(EventUnit()) == "GeneralSentinel")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialZealot1", c_techCountCompleteOnly) == 0)) {
                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/776D2611"), PlayerGroupAll());
            }
            else {
                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "SCV") && (TechTreeUpgradeCount(EventPlayer(), "SpecialSCV1", c_techCountCompleteOnly) == 0)) {
                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/8136C480"), PlayerGroupAll());
                }
                else {
                    if (((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "PrivateMarine") || (UnitGetType(EventUnit()) == "CorporalMarine") || (UnitGetType(EventUnit()) == "SergeantMarine") || (UnitGetType(EventUnit()) == "SergeantMajorMarine") || (UnitGetType(EventUnit()) == "TychusCommando") || (UnitGetType(EventUnit()) == "LeutinetTychus") || (UnitGetType(EventUnit()) == "CaptainTychus") || (UnitGetType(EventUnit()) == "CommissionerTychus") || (UnitGetType(EventUnit()) == "RaynorCommando") || (UnitGetType(EventUnit()) == "GeneralRaynor")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialMarine1", c_techCountCompleteOnly) == 0)) {
                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/F0CE6E05"), PlayerGroupAll());
                    }
                    else {
                        if (((UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "PrivateGhost") || (UnitGetType(EventUnit()) == "CorporalGhost") || (UnitGetType(EventUnit()) == "SergeantGhost") || (UnitGetType(EventUnit()) == "SergeantMajorGhost") || (UnitGetType(EventUnit()) == "SergeantMajorNova") || (UnitGetType(EventUnit()) == "LieutenentNova") || (UnitGetType(EventUnit()) == "CaptainNova") || (UnitGetType(EventUnit()) == "CommissionerNova") || (UnitGetType(EventUnit()) == "CommissionerMarksman") || (UnitGetType(EventUnit()) == "GeneralMarksman")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialGhost1", c_techCountCompleteOnly) == 0)) {
                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/2E44F80A"), PlayerGroupAll());
                        }
                        else {
                            if (((UnitGetType(EventUnit()) == "Vulture") || (UnitGetType(EventUnit()) == "Vulture2") || (UnitGetType(EventUnit()) == "CorporalVulture") || (UnitGetType(EventUnit()) == "SergeantVulture") || (UnitGetType(EventUnit()) == "SergeantMajorVulture") || (UnitGetType(EventUnit()) == "SergeantMajorBiker") || (UnitGetType(EventUnit()) == "LeutinetBiker") || (UnitGetType(EventUnit()) == "CaptainBiker") || (UnitGetType(EventUnit()) == "CommissionerBiker") || (UnitGetType(EventUnit()) == "CommissionerScooter") || (UnitGetType(EventUnit()) == "GeneralScooter")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialVulture1", c_techCountCompleteOnly) == 0)) {
                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/AF73FE56"), PlayerGroupAll());
                            }
                            else {
                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Diamondback") && (TechTreeUpgradeCount(EventPlayer(), "SpecialDiamondBack1", c_techCountCompleteOnly) == 0)) {
                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/171E3D5F"), PlayerGroupAll());
                                }
                                else {
                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Sentry") && (TechTreeUpgradeCount(EventPlayer(), "SpecialSentry1", c_techCountCompleteOnly) == 0)) {
                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/6DD872E7"), PlayerGroupAll());
                                    }
                                    else {
                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Predator") && (TechTreeUpgradeCount(EventPlayer(), "SpecialPredator1", c_techCountCompleteOnly) == 0)) {
                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/F3FACAA5"), PlayerGroupAll());
                                        }
                                        else {
                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "MinerMale") && (TechTreeUpgradeCount(EventPlayer(), "SpecialMiner1", c_techCountCompleteOnly) == 0)) {
                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/FC84CF08"), PlayerGroupAll());
                                            }
                                            else {
                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "VoidRay") && (TechTreeUpgradeCount(EventPlayer(), "SpecialVoidRay1", c_techCountCompleteOnly) == 0)) {
                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/3D9EEE85"), PlayerGroupAll());
                                                }
                                                else {
                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Spectre") && (TechTreeUpgradeCount(EventPlayer(), "SpecialSpectre1", c_techCountCompleteOnly) == 0)) {
                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/C17161EF"), PlayerGroupAll());
                                                    }
                                                    else {
                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Archon") && (TechTreeUpgradeCount(EventPlayer(), "SpecialArchon1", c_techCountCompleteOnly) == 0)) {
                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/56CE6180"), PlayerGroupAll());
                                                        }
                                                        else {
                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Reaper") && (TechTreeUpgradeCount(EventPlayer(), "SpecialArchon1", c_techCountCompleteOnly) == 0)) {
                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/8EAF3FBD"), PlayerGroupAll());
                                                            }
                                                            else {
                                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Scout") && (TechTreeUpgradeCount(EventPlayer(), "SpecialScout1", c_techCountCompleteOnly) == 0)) {
                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/BBECFA7C"), PlayerGroupAll());
                                                                }
                                                                else {
                                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "DarkTemplar") && (TechTreeUpgradeCount(EventPlayer(), "SpecialDarkTemplar1", c_techCountCompleteOnly) == 0)) {
                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/31C298F9"), PlayerGroupAll());
                                                                    }
                                                                    else {
                                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "HERC") && (TechTreeUpgradeCount(EventPlayer(), "SpecialHERC1", c_techCountCompleteOnly) == 0)) {
                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/B58F2B14"), PlayerGroupAll());
                                                                        }
                                                                        else {
                                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Immortal") && (TechTreeUpgradeCount(EventPlayer(), "SpecialImmortal1", c_techCountCompleteOnly) == 0)) {
                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/53B77EAE"), PlayerGroupAll());
                                                                            }
                                                                            else {
                                                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Goliath") && (TechTreeUpgradeCount(EventPlayer(), "SpecialGoliath1", c_techCountCompleteOnly) == 0)) {
                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/5FC0BF7E"), PlayerGroupAll());
                                                                                }
                                                                                else {
                                                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "HighTemplar") && (TechTreeUpgradeCount(EventPlayer(), "SpecialHighTemplar1", c_techCountCompleteOnly) == 0)) {
                                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/DBD3BBDC"), PlayerGroupAll());
                                                                                    }
                                                                                    else {
                                                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Hellion") && (TechTreeUpgradeCount(EventPlayer(), "SpecialHellion1", c_techCountCompleteOnly) == 0)) {
                                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/97D6F5F5"), PlayerGroupAll());
                                                                                        }
                                                                                        else {
                                                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Wraith") && (TechTreeUpgradeCount(EventPlayer(), "SpecialWraith1", c_techCountCompleteOnly) == 0)) {
                                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/8F61C86F"), PlayerGroupAll());
                                                                                            }
                                                                                            else {
                                                                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Oracle") && (TechTreeUpgradeCount(EventPlayer(), "SpecialOracle1", c_techCountCompleteOnly) == 0)) {
                                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/E3A98322"), PlayerGroupAll());
                                                                                                }
                                                                                                else {
                                                                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "SiegeTank") && (TechTreeUpgradeCount(EventPlayer(), "SpecialSiegeTank1", c_techCountCompleteOnly) == 0)) {
                                                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/4E4C6085"), PlayerGroupAll());
                                                                                                    }
                                                                                                    else {
                                                                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "Marauder") && (TechTreeUpgradeCount(EventPlayer(), "SpecialMarauder1", c_techCountCompleteOnly) == 0)) {
                                                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/549687A0"), PlayerGroupAll());
                                                                                                        }
                                                                                                        else {
                                                                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (UnitGetType(EventUnit()) == "HydraliskLurker") && (TechTreeUpgradeCount(EventPlayer(), "SpecialHydralisk1", c_techCountCompleteOnly) == 0)) {
                                                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/6C99D898"), PlayerGroupAll());
                                                                                                            }
                                                                                                            else {
                                                                                                                if (((UnitGetType(EventUnit()) == "VikingAssault") || (UnitGetType(EventUnit()) == "VikingFighter")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialViking1", c_techCountCompleteOnly) == 0)) {
                                                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/DD8FF74C"), PlayerGroupAll());
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ((UnitGetType(EventUnit()) == "Firebat") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialFirebat1", c_techCountCompleteOnly) == 0)) {
                                                                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/3AD8190A"), PlayerGroupAll());
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ((UnitGetType(EventUnit()) == "Adept") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialAdept1", c_techCountCompleteOnly) == 0)) {
                                                                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/5BDCFDB2"), PlayerGroupAll());
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ((UnitGetType(EventUnit()) == "Cyclone") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialCyclone1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/0D2F917C"), PlayerGroupAll());
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ((UnitGetType(EventUnit()) == "Colossus") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialColossus1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/9F8667F8"), PlayerGroupAll());
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ((UnitGetType(EventUnit()) == "Thor") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialThor1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/7816DE68"), PlayerGroupAll());
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ((UnitGetType(EventUnit()) == "Tempest") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialTempest1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/D4FFAFA5"), PlayerGroupAll());
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ((UnitGetType(EventUnit()) == "Carrier") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialCarrier1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/A48F055E"), PlayerGroupAll());
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ((UnitGetType(EventUnit()) == "CorsairMP") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialCorsair1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/00CA715E"), PlayerGroupAll());
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ((UnitGetType(EventUnit()) == "Skeletalmage") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialDarkMage1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/BC9F712C"), PlayerGroupAll());
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ((UnitGetType(EventUnit()) == "Reaver") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialReaver1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/C01A1359"), PlayerGroupAll());
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ((UnitGetType(EventUnit()) == "Mothership") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialMothership1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/2D3A3A30"), PlayerGroupAll());
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ((UnitGetType(EventUnit()) == "Battlecruiser") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialBattlecruiser1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/301DE5BC"), PlayerGroupAll());
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if (((UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "RagingHybrid") || (UnitGetType(EventUnit()) == "OutragingHybrid")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialHybrid1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                        DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                        libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/B79B80C5"), PlayerGroupAll());
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ((UnitGetType(EventUnit()) == "AlarakChampion") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialAlarak1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                            DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                            libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/F7D3D9A9"), PlayerGroupAll());
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if ((UnitGetType(EventUnit()) == "ArtanisVoid") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialArtanis1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                                DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                                libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/414BCD41"), PlayerGroupAll());
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                if ((UnitGetType(EventUnit()) == "Raven") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialRaven1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                                    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                                    libNtve_gf_SetDialogItemText(gv_speedSpecialtiesDialog[1], StringExternal("Param/Value/994A1074"), PlayerGroupAll());
                                                                                                                                                                                }

                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHIdeSpeedSpecialties_Init () {
    gt_ShowHIdeSpeedSpecialties = TriggerCreate("gt_ShowHIdeSpeedSpecialties_Func");
    TriggerAddEventUnitRegion(gt_ShowHIdeSpeedSpecialties, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_ShowHIdeSpeedSpecialties, null, RegionFromId(39), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SpeedSpecialties
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpeedSpecialties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 999))) {
            return false;
        }

        if (!((gv_speedSpecialtiesDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Stalker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateStalker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalStalker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantStalker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorStalker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorInstigator") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetInstigator") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainInstigator") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerInstigator") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Dragoon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralDragoon"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialStalker1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Medic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorSurgeon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetSurgeon2") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainSurgeon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerSurgeon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerDoctor") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralDoctor"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialMedic1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Zealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "ZealotShakuras") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetCenturion") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainCenturion") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerCenturion") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerSentinel") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralSentinel"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialZealot1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SCV")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade) + 3));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialSCV1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Marine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "TychusCommando") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetTychus") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainTychus") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerTychus") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "RaynorCommando") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralRaynor"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialMarine1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Ghost") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateGhost") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalGhost") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantGhost") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorGhost") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorNova") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LieutenentNova") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainNova") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerNova") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerMarksman") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralMarksman"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialGhost1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Vulture") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Vulture2") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalVulture") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantVulture") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorVulture") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorBiker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetBiker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainBiker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerBiker") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerScooter") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralScooter"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialVulture1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Diamondback")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialDiamondBack1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Sentry")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialSentry1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Predator")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialPredator1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "MinerMale")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade) + 4));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialMiner1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VoidRay")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialVoidRay1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Spectre")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialSpectre1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Archon")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialArchon1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Reaper")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialReaper1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Scout")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialScout1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "DarkTemplar")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialDarkTemplar1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "HERC")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade) + 4));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialHERC1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Immortal")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialImmortal1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Goliath")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialGoliath1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "HighTemplar")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialHighTemplar1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Hellion")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialHellion1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Wraith")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialWraith1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Oracle")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialOracle1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SiegeTank") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SiegeTank"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialSiegeTank1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Marauder")) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade) + 4));
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialMarauder1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "HydraliskLurker")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialHydralisk1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingFighter") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "VikingAssault"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialViking1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Firebat")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialFirebat1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Adept")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialAdept1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Cyclone")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialCyclone1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Colossus")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialColossus1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Thor")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialThor1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Tempest")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialTempest1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Carrier")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialCarrier1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SpecialCorsair1", c_techCountCompleteOnly) == 0) && (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorsairMP")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialCorsair1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesMade) + 3));
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Skeletalmage")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialDarkMage1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Reaver")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialReaver1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Mothership")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialMothership1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Battlecruiser")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialBattlecruiser1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "HybridDestroyer") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "RagingHybrid") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "OutragingHybrid"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialHybrid1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "AlarakChampion")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialAlarak1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "ArtanisVoid")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialArtanis1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Raven")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialRaven1", 1);
        TextTagShow(gv_speedSpecialties, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedSpecialtiesPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_speedSpecialtiesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 1000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpeedSpecialties_Init () {
    gt_ActivateSpeedSpecialties = TriggerCreate("gt_ActivateSpeedSpecialties_Func");
    TriggerAddEventDialogControl(gt_ActivateSpeedSpecialties, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageBonus Dialog Creations
//--------------------------------------------------------------------------------------------------
bool gt_DamageBonusDialogCreations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_damageBonusDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D77C8F5F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/CCCD8249"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_damageBonusDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_damageBonusDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_damageBonusDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_damageBonusDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageBonusDialogCreations_Init () {
    gt_DamageBonusDialogCreations = TriggerCreate("gt_DamageBonusDialogCreations_Func");
    TriggerAddEventMapInit(gt_DamageBonusDialogCreations);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/HIde DamageBonus
//--------------------------------------------------------------------------------------------------
bool gt_ShowHIdeDamageBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(19)) == true) && (TechTreeUpgradeCount(EventPlayer(), "DamageBonus1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_damageBonusDialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_damageBonusDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHIdeDamageBonus_Init () {
    gt_ShowHIdeDamageBonus = TriggerCreate("gt_ShowHIdeDamageBonus_Func");
    TriggerAddEventUnitRegion(gt_ShowHIdeDamageBonus, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_ShowHIdeDamageBonus, null, RegionFromId(19), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate DamageBonus
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDamageBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 499))) {
            return false;
        }

        if (!((gv_damageBonusDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DamageBonus1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DamageBonus21", 1);
        TextTagShow(gv_biggerBulets, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_biggerBuletsPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_damageBonusDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDamageBonus_Init () {
    gt_ActivateDamageBonus = TriggerCreate("gt_ActivateDamageBonus_Func");
    TriggerAddEventDialogControl(gt_ActivateDamageBonus, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VisionandRange Dialog Creations
//--------------------------------------------------------------------------------------------------
bool gt_VisionandRangeDialogCreations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_visionandRangeDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7D30F748"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/918DD1C6"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_visionandRangeDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_visionandRangeDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_visionandRangeDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_visionandRangeDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VisionandRangeDialogCreations_Init () {
    gt_VisionandRangeDialogCreations = TriggerCreate("gt_VisionandRangeDialogCreations_Func");
    TriggerAddEventMapInit(gt_VisionandRangeDialogCreations);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide VisionandRange
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideVisionandRange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(30)) == true) && (TechTreeUpgradeCount(EventPlayer(), "VisionandRange1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_visionandRangeDialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_visionandRangeDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideVisionandRange_Init () {
    gt_ShowHideVisionandRange = TriggerCreate("gt_ShowHideVisionandRange_Func");
    TriggerAddEventUnitRegion(gt_ShowHideVisionandRange, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_ShowHideVisionandRange, null, RegionFromId(30), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate VisionandRange
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVisionandRange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 499))) {
            return false;
        }

        if (!((gv_visionandRangeDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VisionandRange1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VisionandRange21", 1);
        TextTagShow(gv_sightRange, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_sightRangePurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_visionandRangeDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVisionandRange_Init () {
    gt_ActivateVisionandRange = TriggerCreate("gt_ActivateVisionandRange_Func");
    TriggerAddEventDialogControl(gt_ActivateVisionandRange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed Boots Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_SpeedBootsDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_speedBootsDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C3706BC0"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9647A024"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_speedBootsDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_speedBootsDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_speedBootsDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_speedBootsDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedBootsDialogCreation_Init () {
    gt_SpeedBootsDialogCreation = TriggerCreate("gt_SpeedBootsDialogCreation_Func");
    TriggerAddEventMapInit(gt_SpeedBootsDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Speed Boots
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideSpeedBoots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Carrier")) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2E1E3811"), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    else {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/A1D60752"), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(29)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpeedBootsBehavior1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_speedBootsDialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_speedBootsDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideSpeedBoots_Init () {
    gt_ShowHideSpeedBoots = TriggerCreate("gt_ShowHideSpeedBoots_Func");
    TriggerAddEventUnitRegion(gt_ShowHideSpeedBoots, null, RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_ShowHideSpeedBoots, null, RegionFromId(29), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Speed Boots
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpeedBoots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 499))) {
            return false;
        }

        if (!((gv_speedBootsDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpeedBootsBehavior1", 1);
        TextTagShow(gv_speedBoots, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedBootsPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_speedBootsDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpeedBoots_Init () {
    gt_ActivateSpeedBoots = TriggerCreate("gt_ActivateSpeedBoots_Func");
    TriggerAddEventDialogControl(gt_ActivateSpeedBoots, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed Cooldown Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_SpeedCooldownDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_speedCooldownDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/60FBD5E3"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A64EFE02"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_speedCooldownDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_speedCooldownDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_speedCooldownDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_speedCooldownDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedCooldownDialogCreation_Init () {
    gt_SpeedCooldownDialogCreation = TriggerCreate("gt_SpeedCooldownDialogCreation_Func");
    TriggerAddEventMapInit(gt_SpeedCooldownDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Speed Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideSpeedCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(31)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpeedCooldowns1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_speedCooldownDialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_speedCooldownDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideSpeedCooldown_Init () {
    gt_ShowHideSpeedCooldown = TriggerCreate("gt_ShowHideSpeedCooldown_Func");
    TriggerAddEventUnitRegion(gt_ShowHideSpeedCooldown, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_ShowHideSpeedCooldown, null, RegionFromId(31), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Speed Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpeedCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 499))) {
            return false;
        }

        if (!((gv_speedCooldownDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpeedCooldowns1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpeedCooldowns21", 1);
        TextTagShow(gv_speedCooldown, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_speedCooldownPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    DialogControlSetVisible(gv_speedCooldownDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpeedCooldown_Init () {
    gt_ActivateSpeedCooldown = TriggerCreate("gt_ActivateSpeedCooldown_Func");
    TriggerAddEventDialogControl(gt_ActivateSpeedCooldown, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Vitals Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_BonusVitalsDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_bonusVitalsDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8A38C3DB"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D0A777B7"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_bonusVitalsDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_bonusVitalsDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_bonusVitalsDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_bonusVitalsDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusVitalsDialogCreation_Init () {
    gt_BonusVitalsDialogCreation = TriggerCreate("gt_BonusVitalsDialogCreation_Func");
    TriggerAddEventMapInit(gt_BonusVitalsDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Bonus Vitals
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideBonusVitals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(32)) == true) && (TechTreeUpgradeCount(EventPlayer(), "BonusVitals1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_bonusVitalsDialog[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_bonusVitalsDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideBonusVitals_Init () {
    gt_ShowHideBonusVitals = TriggerCreate("gt_ShowHideBonusVitals_Func");
    TriggerAddEventUnitRegion(gt_ShowHideBonusVitals, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_ShowHideBonusVitals, null, RegionFromId(32), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bonus Vitals
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBonusVitals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reaperLifeLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 499))) {
            return false;
        }

        if (!((gv_bonusVitalsDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Reaper")) {
        lv_reaperLifeLevel = TechTreeUpgradeCount(EventPlayer(), "ReaperLife10", c_techCountQueuedOrBetter);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperLife10", 0);
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BonusVitals1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BonusVitals21", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BonusVitalsBehavior1", 1);
        TextTagShow(gv_bonusVitals, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_bonusVitalsPurchased, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperLife10", lv_reaperLifeLevel);
    }

    DialogControlSetVisible(gv_bonusVitalsDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 500);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBonusVitals_Init () {
    gt_ActivateBonusVitals = TriggerCreate("gt_ActivateBonusVitals_Func");
    TriggerAddEventDialogControl(gt_ActivateBonusVitals, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Stats creation
//--------------------------------------------------------------------------------------------------
bool gt_SpecialStatscreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_specialStatsDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/FEDE65CE"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 200);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7E0F9782"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_specialStatsDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 323, 198);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_specialStatsDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_specialStatsDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialStatscreation_Init () {
    gt_SpecialStatscreation = TriggerCreate("gt_SpecialStatscreation_Func");
    TriggerAddEventMapInit(gt_SpecialStatscreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/HIde Special Stats
//--------------------------------------------------------------------------------------------------
bool gt_ShowHIdeSpecialStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CarrierRepairDrone"))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((!((UnitGetOwner(EventUnit()) == 9))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) != true)) {
        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), false);
    }

    if (((UnitGetType(EventUnit()) == "Stalker") || (UnitGetType(EventUnit()) == "PrivateStalker") || (UnitGetType(EventUnit()) == "CorporalStalker") || (UnitGetType(EventUnit()) == "SergeantStalker") || (UnitGetType(EventUnit()) == "SergeantMajorStalker") || (UnitGetType(EventUnit()) == "SergeantMajorInstigator") || (UnitGetType(EventUnit()) == "LeutinetInstigator") || (UnitGetType(EventUnit()) == "CaptainInstigator") || (UnitGetType(EventUnit()) == "CommissionerInstigator") || (UnitGetType(EventUnit()) == "Dragoon") || (UnitGetType(EventUnit()) == "GeneralDragoon")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/30869E7F"), PlayerGroupAll());
    }
    else {
        if (((UnitGetType(EventUnit()) == "Medic") || (UnitGetType(EventUnit()) == "PrivateMedic") || (UnitGetType(EventUnit()) == "CorporalMedic") || (UnitGetType(EventUnit()) == "SergeantMedic") || (UnitGetType(EventUnit()) == "SergeantMajorMedic") || (UnitGetType(EventUnit()) == "SergeantMajorSurgeon") || (UnitGetType(EventUnit()) == "LeutinetSurgeon2") || (UnitGetType(EventUnit()) == "CaptainSurgeon") || (UnitGetType(EventUnit()) == "CommissionerSurgeon") || (UnitGetType(EventUnit()) == "CommissionerDoctor") || (UnitGetType(EventUnit()) == "GeneralDoctor")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/9AD6575E"), PlayerGroupAll());
        }
        else {
            if (((UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "PrivateZealot") || (UnitGetType(EventUnit()) == "CorporalZealot") || (UnitGetType(EventUnit()) == "SergeantZealot") || (UnitGetType(EventUnit()) == "SergeantMajorZealot") || (UnitGetType(EventUnit()) == "ZealotShakuras") || (UnitGetType(EventUnit()) == "LeutinetCenturion") || (UnitGetType(EventUnit()) == "CaptainCenturion") || (UnitGetType(EventUnit()) == "CommissionerCenturion") || (UnitGetType(EventUnit()) == "CommissionerSentinel") || (UnitGetType(EventUnit()) == "GeneralSentinel")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/963C3680"), PlayerGroupAll());
            }
            else {
                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "SCV") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/CD0F9A05"), PlayerGroupAll());
                }
                else {
                    if (((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "PrivateMarine") || (UnitGetType(EventUnit()) == "CorporalMarine") || (UnitGetType(EventUnit()) == "SergeantMarine") || (UnitGetType(EventUnit()) == "SergeantMajorMarine") || (UnitGetType(EventUnit()) == "TychusCommando") || (UnitGetType(EventUnit()) == "LeutinetTychus") || (UnitGetType(EventUnit()) == "CaptainTychus") || (UnitGetType(EventUnit()) == "CommissionerTychus") || (UnitGetType(EventUnit()) == "RaynorCommando") || (UnitGetType(EventUnit()) == "GeneralRaynor")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/C92600E4"), PlayerGroupAll());
                    }
                    else {
                        if (((UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "PrivateGhost") || (UnitGetType(EventUnit()) == "CorporalGhost") || (UnitGetType(EventUnit()) == "SergeantGhost") || (UnitGetType(EventUnit()) == "SergeantMajorGhost") || (UnitGetType(EventUnit()) == "SergeantMajorNova") || (UnitGetType(EventUnit()) == "LieutenentNova") || (UnitGetType(EventUnit()) == "CaptainNova") || (UnitGetType(EventUnit()) == "CommissionerNova") || (UnitGetType(EventUnit()) == "CommissionerMarksman") || (UnitGetType(EventUnit()) == "GeneralMarksman")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/CB55C6D0"), PlayerGroupAll());
                        }
                        else {
                            if (((UnitGetType(EventUnit()) == "Vulture") || (UnitGetType(EventUnit()) == "Vulture2") || (UnitGetType(EventUnit()) == "CorporalVulture") || (UnitGetType(EventUnit()) == "SergeantVulture") || (UnitGetType(EventUnit()) == "SergeantMajorVulture") || (UnitGetType(EventUnit()) == "SergeantMajorBiker") || (UnitGetType(EventUnit()) == "LeutinetBiker") || (UnitGetType(EventUnit()) == "CaptainBiker") || (UnitGetType(EventUnit()) == "CommissionerBiker") || (UnitGetType(EventUnit()) == "CommissionerScooter") || (UnitGetType(EventUnit()) == "GeneralScooter")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/38AB4A4B"), PlayerGroupAll());
                            }
                            else {
                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Archon") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/AEFB1CCA"), PlayerGroupAll());
                                }
                                else {
                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Diamondback") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/5991DE5B"), PlayerGroupAll());
                                    }
                                    else {
                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Sentry") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/B3B7E583"), PlayerGroupAll());
                                        }
                                        else {
                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Predator") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/963ECA7F"), PlayerGroupAll());
                                            }
                                            else {
                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "VoidRay") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/734D2D0A"), PlayerGroupAll());
                                                }
                                                else {
                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Spectre") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/FD2061B3"), PlayerGroupAll());
                                                    }
                                                    else {
                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "MinerMale") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/FB2488C7"), PlayerGroupAll());
                                                        }
                                                        else {
                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "DarkTemplar") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/2DC584D4"), PlayerGroupAll());
                                                            }
                                                            else {
                                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "HighTemplar") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/031AF08E"), PlayerGroupAll());
                                                                }
                                                                else {
                                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Scout") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/07CC88BB"), PlayerGroupAll());
                                                                    }
                                                                    else {
                                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Hellion") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/428DA631"), PlayerGroupAll());
                                                                        }
                                                                        else {
                                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Immortal") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/23BC17CE"), PlayerGroupAll());
                                                                            }
                                                                            else {
                                                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "HERC") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/7463D213"), PlayerGroupAll());
                                                                                }
                                                                                else {
                                                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Goliath") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/26CAF31E"), PlayerGroupAll());
                                                                                    }
                                                                                    else {
                                                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Reaper") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/65C08B76"), PlayerGroupAll());
                                                                                        }
                                                                                        else {
                                                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Wraith") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/F219ADCC"), PlayerGroupAll());
                                                                                            }
                                                                                            else {
                                                                                                if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Oracle") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/8D382843"), PlayerGroupAll());
                                                                                                }
                                                                                                else {
                                                                                                    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "SiegeTank") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/01D2075B"), PlayerGroupAll());
                                                                                                    }
                                                                                                    else {
                                                                                                        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "Marauder") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/2D3C8FD7"), PlayerGroupAll());
                                                                                                        }
                                                                                                        else {
                                                                                                            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (UnitGetType(EventUnit()) == "HydraliskLurker") && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/F56BE5B9"), PlayerGroupAll());
                                                                                                            }
                                                                                                            else {
                                                                                                                if (((UnitGetType(EventUnit()) == "VikingAssault") || (UnitGetType(EventUnit()) == "VikingFighter")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/9140B139"), PlayerGroupAll());
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ((UnitGetType(EventUnit()) == "Firebat") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/A9EA6DE6"), PlayerGroupAll());
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ((UnitGetType(EventUnit()) == "Adept") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/FBE31E91"), PlayerGroupAll());
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ((UnitGetType(EventUnit()) == "Cyclone") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/B7B5FAE5"), PlayerGroupAll());
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ((UnitGetType(EventUnit()) == "Colossus") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/7F0B4E60"), PlayerGroupAll());
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ((UnitGetType(EventUnit()) == "Thor") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/192CCAF6"), PlayerGroupAll());
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ((UnitGetType(EventUnit()) == "Tempest") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/EB5A8179"), PlayerGroupAll());
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ((UnitGetType(EventUnit()) == "Carrier") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/90B492D1"), PlayerGroupAll());
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ((UnitGetType(EventUnit()) == "CorsairMP") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/E624B078"), PlayerGroupAll());
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ((UnitGetType(EventUnit()) == "Skeletalmage") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/5A489E1A"), PlayerGroupAll());
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ((UnitGetType(EventUnit()) == "Reaver") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/0151AB21"), PlayerGroupAll());
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ((UnitGetType(EventUnit()) == "Mothership") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/E6306FAE"), PlayerGroupAll());
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ((UnitGetType(EventUnit()) == "Battlecruiser") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/EBB6E5E8"), PlayerGroupAll());
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if (((UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "RagingHybrid") || (UnitGetType(EventUnit()) == "OutragingHybrid")) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                        DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                        libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/123A6968"), PlayerGroupAll());
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ((UnitGetType(EventUnit()) == "ArtanisVoid") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                            DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                            libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/CF5894F4"), PlayerGroupAll());
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if ((UnitGetType(EventUnit()) == "AlarakChampion") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                                DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                                libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/086AC775"), PlayerGroupAll());
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                if ((UnitGetType(EventUnit()) == "Raven") && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true) && (TechTreeUpgradeCount(EventPlayer(), "SpecialStats1", c_techCountCompleteOnly) == 0)) {
                                                                                                                                                                                    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), true);
                                                                                                                                                                                    libNtve_gf_SetDialogItemText(gv_specialStatsDialog[1], StringExternal("Param/Value/88DBFDC9"), PlayerGroupAll());
                                                                                                                                                                                }

                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHIdeSpecialStats_Init () {
    gt_ShowHIdeSpecialStats = TriggerCreate("gt_ShowHIdeSpecialStats_Func");
    TriggerAddEventUnitRegion(gt_ShowHIdeSpecialStats, null, RegionFromId(40), true);
    TriggerAddEventUnitRegion(gt_ShowHIdeSpecialStats, null, RegionFromId(40), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Special Stats
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpecialStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_heroXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > 999))) {
            return false;
        }

        if (!((gv_specialStatsDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialStats1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zzz2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zzz3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zzz4", 1);
        TextTagShow(gv_specialStats, PlayerGroupSingle(EventPlayer()), false);
        TextTagShow(gv_specialStatsPurchased, PlayerGroupSingle(EventPlayer()), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Marine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorMarine") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "TychusCommando") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetTychus") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainTychus") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerTychus") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "RaynorCommando") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralRaynor"))) {
        lv_heroXP = UnitXPGetCurrentXP(gv_playerInfo[EventPlayer()].lv_hero, "CheckMyLevel");
        UnitKill(gv_playerInfo[EventPlayer()].lv_hero);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(gv_playerInfo[EventPlayer()].lv_hero), 0, EventPlayer(), RegionGetCenter(RegionFromId(40)));
        gv_playerInfo[EventPlayer()].lv_hero = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "CheckMyLevel", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MoveSpeedPoints", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GasUpgradesBuff", UnitLastCreated(), 1);
        UnitXPAddXP(UnitLastCreated(), "CheckMyLevel", lv_heroXP);
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Zealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorZealot") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "ZealotShakuras") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetCenturion") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainCenturion") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerCenturion") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerSentinel") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralSentinel"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zzzZealot", 1);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "Medic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorMedic") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorSurgeon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "LeutinetSurgeon2") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CaptainSurgeon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerSurgeon") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CommissionerDoctor") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "GeneralDoctor"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zzzMedic", 1);
    }

    if (((UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "PrivateReaper") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "CorporalReaper") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantReaper") || (UnitGetType(gv_playerInfo[EventPlayer()].lv_hero) == "SergeantMajorReaper"))) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zzzReaper", 1);
    }

    DialogControlSetVisible(gv_specialStatsDialog[1], PlayerGroupSingle(EventPlayer()), false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 1000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpecialStats_Init () {
    gt_ActivateSpecialStats = TriggerCreate("gt_ActivateSpecialStats_Func");
    TriggerAddEventDialogControl(gt_ActivateSpecialStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power-Ups
//--------------------------------------------------------------------------------------------------
bool gt_PowerUps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;
    int lv_dropChance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 9) || (UnitGetOwner(EventUnit()) == 10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropChance = RandomInt(1, 1000);
    if ((lv_dropChance == 2)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "XelNagaDevice", 0, 9, UnitGetPosition(EventUnit()));
    }

    if ((lv_dropChance == 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupChronoRiftDevice", 0, 9, UnitGetPosition(EventUnit()));
    }

    if ((lv_dropChance == 4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupEnergyFull", 0, 9, UnitGetPosition(EventUnit()));
    }

    if ((lv_dropChance == 5)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupHealthFull", 0, 9, UnitGetPosition(EventUnit()));
    }

    if ((lv_dropChance == 6)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatriarchDNAPickup", 0, 9, UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerUps_Init () {
    gt_PowerUps = TriggerCreate("gt_PowerUps_Func");
    TriggerAddEventUnitDied(gt_PowerUps, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleDamageNumbers
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDamageNumbers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[EventPlayer()].lv_damageNumbersToggler == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DB14D99A"));
        gv_playerInfo[EventPlayer()].lv_damageNumbersToggler = false;
    }
    else {
        if ((gv_playerInfo[EventPlayer()].lv_damageNumbersToggler == false)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/741FE795"));
            gv_playerInfo[EventPlayer()].lv_damageNumbersToggler = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDamageNumbers_Init () {
    gt_ToggleDamageNumbers = TriggerCreate("gt_ToggleDamageNumbers_Func");
    TriggerAddEventKeyPressed(gt_ToggleDamageNumbers, c_playerAny, c_keyN, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer1
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[1].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(1));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer1_Init () {
    gt_ShowDamageNumbersPlayer1 = TriggerCreate("gt_ShowDamageNumbersPlayer1_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer1, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer2
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[2].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(2));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer2_Init () {
    gt_ShowDamageNumbersPlayer2 = TriggerCreate("gt_ShowDamageNumbersPlayer2_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer2, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer3
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[3].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(3));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer3_Init () {
    gt_ShowDamageNumbersPlayer3 = TriggerCreate("gt_ShowDamageNumbersPlayer3_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer3, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer4
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[4].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(4));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer4_Init () {
    gt_ShowDamageNumbersPlayer4 = TriggerCreate("gt_ShowDamageNumbersPlayer4_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer4, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer5
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[5].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(5));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer5_Init () {
    gt_ShowDamageNumbersPlayer5 = TriggerCreate("gt_ShowDamageNumbersPlayer5_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer5, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer6
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[6].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(6));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer6_Init () {
    gt_ShowDamageNumbersPlayer6 = TriggerCreate("gt_ShowDamageNumbersPlayer6_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer6, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer7
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[7].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(7));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer7_Init () {
    gt_ShowDamageNumbersPlayer7 = TriggerCreate("gt_ShowDamageNumbersPlayer7_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer7, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowDamageNumbersPlayer8
//--------------------------------------------------------------------------------------------------
bool gt_ShowDamageNumbersPlayer8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeLost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerInfo[8].lv_damageNumbersToggler == true)) {
        lv_lifeLost = FixedToInt(EventUnitDamageAbsorbed());
        TextTagCreate(TextWithColor(IntToText(lv_lifeLost), Color(100.00, 0.00, 0.00)), 14, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(8));
        Wait(1.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDamageNumbersPlayer8_Init () {
    gt_ShowDamageNumbersPlayer8 = TriggerCreate("gt_ShowDamageNumbersPlayer8_Func");
    TriggerAddEventUnitDamaged(gt_ShowDamageNumbersPlayer8, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddplayerstoTEAM
//--------------------------------------------------------------------------------------------------
bool gt_AddplayerstoTEAM_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Probe"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7) || (UnitGetOwner(EventUnit()) == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_tEAM, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddplayerstoTEAM_Init () {
    gt_AddplayerstoTEAM = TriggerCreate("gt_AddplayerstoTEAM_Func");
    TriggerAddEventUnitRegion(gt_AddplayerstoTEAM, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveSpeedBuff
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSpeedBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "InfestorTerran")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 1.5);
    }

    if ((UnitGetType(EventUnit()) == "Zergling")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 1.75);
    }

    if ((UnitGetType(EventUnit()) == "Ultralisk")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 2.0);
    }

    if ((UnitGetType(EventUnit()) == "Roach")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 2.25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSpeedBuff_Init () {
    gt_RemoveSpeedBuff = TriggerCreate("gt_RemoveSpeedBuff_Func");
    TriggerEnable(gt_RemoveSpeedBuff, false);
    TriggerAddEventUnitRange(gt_RemoveSpeedBuff, null, UnitGroupUnit(gv_tEAM, 1), 35.0, true);
    TriggerAddEventUnitRange(gt_RemoveSpeedBuff, null, UnitGroupUnit(gv_tEAM, 2), 35.0, true);
    TriggerAddEventUnitRange(gt_RemoveSpeedBuff, null, UnitGroupUnit(gv_tEAM, (0)), 35.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReaddSpeedBuff
//--------------------------------------------------------------------------------------------------
bool gt_ReaddSpeedBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "InfestorTerran")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 5.0);
    }

    if ((UnitGetType(EventUnit()) == "Zergling")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 5.0);
    }

    if ((UnitGetType(EventUnit()) == "Ultralisk")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 5.0);
    }

    if ((UnitGetType(EventUnit()) == "Roach")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 5.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaddSpeedBuff_Init () {
    gt_ReaddSpeedBuff = TriggerCreate("gt_ReaddSpeedBuff_Func");
    TriggerEnable(gt_ReaddSpeedBuff, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[1].lv_hero), 35.0, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[2].lv_hero), 35.0, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[3].lv_hero), 35.0, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[4].lv_hero), 35.0, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[6].lv_hero), 35.0, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[7].lv_hero), 35.0, false);
    TriggerAddEventUnitRangePoint(gt_ReaddSpeedBuff, null, UnitGetPosition(gv_playerInfo[8].lv_hero), 35.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tozergling
//--------------------------------------------------------------------------------------------------
bool gt_tozergling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 29))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/F42CF235"));
    TriggerEnable(gt_ZombieTKSWavesZombie, false);
    TriggerEnable(gt_ZombieTKSWavesZombieSpeedMode, false);
    TriggerEnable(gt_ZombieMax, false);
    TriggerEnable(gt_ZerglingMax, true);
    TriggerEnable(gt_ZombieTKSWavesZergling, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tozergling_Init () {
    gt_tozergling = TriggerCreate("gt_tozergling_Func");
    TriggerAddEventTimePeriodic(gt_tozergling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: toultra
//--------------------------------------------------------------------------------------------------
bool gt_toultra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 59))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/4B882558"));
    TriggerEnable(gt_ZombieTKSWavesZergling, false);
    TriggerEnable(gt_ZerglingMax, false);
    TriggerEnable(gt_UltraMax, true);
    TriggerEnable(gt_ZombieTKSWavesUltra, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toultra_Init () {
    gt_toultra = TriggerCreate("gt_toultra_Func");
    TriggerAddEventTimePeriodic(gt_toultra, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tolocust
//--------------------------------------------------------------------------------------------------
bool gt_tolocust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 89))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/109F5EAA"));
    TriggerEnable(gt_ZombieTKSWavesUltra, false);
    TriggerEnable(gt_UltraMax, false);
    TriggerEnable(gt_LocustsMax, true);
    TriggerEnable(gt_ZombieTKSWavesLocusts, true);
    TriggerExecute(gt_Wave45Baneling, false, false);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tolocust_Init () {
    gt_tolocust = TriggerCreate("gt_tolocust_Func");
    TriggerAddEventTimePeriodic(gt_tolocust, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tospeedling
//--------------------------------------------------------------------------------------------------
bool gt_tospeedling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 119))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/C9E575EE"));
    TriggerEnable(gt_ZombieTKSWavesLocusts, false);
    TriggerEnable(gt_LocustsMax, false);
    TriggerEnable(gt_PrimalMax, true);
    TriggerEnable(gt_ZombieTKSWavesSpeedling, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tospeedling_Init () {
    gt_tospeedling = TriggerCreate("gt_tospeedling_Func");
    TriggerAddEventTimePeriodic(gt_tospeedling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: toghoul
//--------------------------------------------------------------------------------------------------
bool gt_toghoul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 149))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/FBBC7DD3"));
    TriggerEnable(gt_ZombieTKSWavesSpeedling, false);
    TriggerEnable(gt_PrimalMax, false);
    TriggerEnable(gt_GhoulMax, true);
    TriggerEnable(gt_ZombieTKSWavesGhouls, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toghoul_Init () {
    gt_toghoul = TriggerCreate("gt_toghoul_Func");
    TriggerAddEventTimePeriodic(gt_toghoul, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tomix
//--------------------------------------------------------------------------------------------------
bool gt_tomix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 179))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/59F710BE"));
    TriggerEnable(gt_ZombieTKSWavesGhouls, false);
    TriggerEnable(gt_GhoulMax, false);
    TriggerEnable(gt_HydraMax, true);
    TriggerEnable(gt_ZombieTKSWavesMix, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tomix_Init () {
    gt_tomix = TriggerCreate("gt_tomix_Func");
    TriggerAddEventTimePeriodic(gt_tomix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tobaneling
//--------------------------------------------------------------------------------------------------
bool gt_tobaneling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 209))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/2F939594"));
    TriggerEnable(gt_ZombieTKSWavesMix, false);
    TriggerEnable(gt_HydraMax, false);
    TriggerEnable(gt_BanelingMax, true);
    TriggerEnable(gt_ZombieTKSWavesLargeMix, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tobaneling_Init () {
    gt_tobaneling = TriggerCreate("gt_tobaneling_Func");
    TriggerAddEventTimePeriodic(gt_tobaneling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tozombies
//--------------------------------------------------------------------------------------------------
bool gt_tozombies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 239))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/2984D960"));
    TriggerEnable(gt_ZombieTKSWavesLargeMix, false);
    TriggerEnable(gt_BanelingMax, false);
    TriggerEnable(gt_ZombieMax, true);
    TriggerEnable(gt_ZombieTKSWavesZombie180, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tozombies_Init () {
    gt_tozombies = TriggerCreate("gt_tozombies_Func");
    TriggerAddEventTimePeriodic(gt_tozombies, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: toburrow
//--------------------------------------------------------------------------------------------------
bool gt_toburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 269))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/65831BD3"));
    TriggerEnable(gt_ZombieTKSWavesZombie180, false);
    TriggerEnable(gt_ZombieMax, false);
    TriggerEnable(gt_QueenMax, true);
    TriggerEnable(gt_ZombieTKSWavesBurrowMix, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toburrow_Init () {
    gt_toburrow = TriggerCreate("gt_toburrow_Func");
    TriggerAddEventTimePeriodic(gt_toburrow, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tosupermix
//--------------------------------------------------------------------------------------------------
bool gt_tosupermix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_wave > 299))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0B3D5874"));
    TriggerEnable(gt_ZombieTKSWavesBurrowMix, false);
    TriggerEnable(gt_QueenMax, false);
    TriggerEnable(gt_SuperBanelingMax, true);
    TriggerEnable(gt_ZombieTKSWavesMegaMix, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tosupermix_Init () {
    gt_tosupermix = TriggerCreate("gt_tosupermix_Func");
    TriggerAddEventTimePeriodic(gt_tosupermix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClassInfoLinkCreation
//--------------------------------------------------------------------------------------------------
bool gt_ClassInfoLinkCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorLeft, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_openClassInfo[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/8CE28865"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 75);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -600, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3EAEC854"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_openClassInfo[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 75);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_openClassInfo[1], c_anchorLeft, 0, 0);
    DialogControlSetVisible(gv_openClassInfo[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassInfoLinkCreation_Init () {
    gt_ClassInfoLinkCreation = TriggerCreate("gt_ClassInfoLinkCreation_Func");
    TriggerEnable(gt_ClassInfoLinkCreation, false);
    TriggerAddEventMapInit(gt_ClassInfoLinkCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ActivateClassInfo
//--------------------------------------------------------------------------------------------------
bool gt_ActivateClassInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_openClassInfo[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_classInfoonoff == 1)) {
        DialogControlSetVisible(gv_classInfo[1], PlayerGroupSingle(EventPlayer()), true);
        gv_classInfoonoff = 2;
    }
    else {
        if ((gv_classInfoonoff == 2)) {
            DialogControlSetVisible(gv_classInfo[1], PlayerGroupSingle(EventPlayer()), false);
            gv_classInfoonoff = 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateClassInfo_Init () {
    gt_ActivateClassInfo = TriggerCreate("gt_ActivateClassInfo_Func");
    TriggerAddEventDialogControl(gt_ActivateClassInfo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClassInfoCreation
//--------------------------------------------------------------------------------------------------
bool gt_ClassInfoCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1250, 1000, c_anchorCenter, 0, -200, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_classInfo[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/2B3C1E65"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1250, 1000);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_classInfo[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1250, 1000);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_classInfo[1], c_anchorCenter, 0, -200);
    DialogControlSetVisible(gv_classInfo[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_classInfo[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassInfoCreation_Init () {
    gt_ClassInfoCreation = TriggerCreate("gt_ClassInfoCreation_Func");
    TriggerAddEventMapInit(gt_ClassInfoCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: playerzm
//--------------------------------------------------------------------------------------------------
bool gt_playerzm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zZZZZZZ;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerType(1) == c_playerTypeUser) || (PlayerType(1) == c_playerTypeComputer))) {
        lv_zZZZZZZ += 1;
    }

    if (((PlayerType(2) == c_playerTypeUser) || (PlayerType(2) == c_playerTypeComputer))) {
        lv_zZZZZZZ += 1;
    }

    if (((PlayerType(3) == c_playerTypeUser) || (PlayerType(3) == c_playerTypeComputer))) {
        gv_zombielife += 1;
    }

    if (((PlayerType(4) == c_playerTypeUser) || (PlayerType(4) == c_playerTypeComputer))) {
    }
    else {
        lv_zZZZZZZ += 1;
    }
    if (((PlayerType(5) == c_playerTypeUser) || (PlayerType(5) == c_playerTypeComputer))) {
        lv_zZZZZZZ += 1;
    }

    if (((PlayerType(6) == c_playerTypeUser) || (PlayerType(6) == c_playerTypeComputer))) {
        lv_zZZZZZZ += 1;
    }

    gv_tKSZombieAmount = lv_zZZZZZZ;
    gv_tKSZombieAmountIncrease = lv_zZZZZZZ;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playerzm_Init () {
    gt_playerzm = TriggerCreate("gt_playerzm_Func");
    TriggerAddEventTimeElapsed(gt_playerzm, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -moneytime
//--------------------------------------------------------------------------------------------------
bool gt_moneytime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 99999999);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 99999999);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 45000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_moneytime_Init () {
    gt_moneytime = TriggerCreate("gt_moneytime_Func");
    TriggerAddEventChatMessage(gt_moneytime, c_playerAny, "-moneytime", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -zombiekill
//--------------------------------------------------------------------------------------------------
bool gt_zombiekill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1CA73697_g;
    int auto1CA73697_u;
    unit auto1CA73697_var;
    unitgroup autoD77EC379_g;
    int autoD77EC379_u;
    unit autoD77EC379_var;

    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CA73697_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1CA73697_u = UnitGroupCount(auto1CA73697_g, c_unitCountAll);
    for (;; auto1CA73697_u -= 1) {
        auto1CA73697_var = UnitGroupUnitFromEnd(auto1CA73697_g, auto1CA73697_u);
        if (auto1CA73697_var == null) { break; }
        UnitRemove(auto1CA73697_var);
    }
    autoD77EC379_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD77EC379_u = UnitGroupCount(autoD77EC379_g, c_unitCountAll);
    for (;; autoD77EC379_u -= 1) {
        autoD77EC379_var = UnitGroupUnitFromEnd(autoD77EC379_g, autoD77EC379_u);
        if (autoD77EC379_var == null) { break; }
        UnitRemove(autoD77EC379_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zombiekill_Init () {
    gt_zombiekill = TriggerCreate("gt_zombiekill_Func");
    TriggerAddEventChatMessage(gt_zombiekill, c_playerAny, "-zombiekill", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -skip
//--------------------------------------------------------------------------------------------------
bool gt_skip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-5150269") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZombieTKSWavesZombie, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_skip_Init () {
    gt_skip = TriggerCreate("gt_skip_Func");
    TriggerAddEventChatMessage(gt_skip, c_playerAny, "-skip", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -SetWave
//--------------------------------------------------------------------------------------------------
bool gt_SetWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_zombielife >= 500000)) {
        gv_zombielife = 500000;
    }
    else {
        gv_zombielife = 500000;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetWave_Init () {
    gt_SetWave = TriggerCreate("gt_SetWave_Func");
    TriggerAddEventChatMessage(gt_SetWave, c_playerAny, "-HMtest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -SetWave(ez)
//--------------------------------------------------------------------------------------------------
bool gt_SetWaveez_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-12070299")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_zombielife >= 150)) {
        gv_zombielife = 150;
    }
    else {
        gv_zombielife = 150;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetWaveez_Init () {
    gt_SetWaveez = TriggerCreate("gt_SetWaveez_Func");
    TriggerAddEventChatMessage(gt_SetWaveez, c_playerAny, "-EZtest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -commands
//--------------------------------------------------------------------------------------------------
bool gt_commands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D18961A2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_commands_Init () {
    gt_commands = TriggerCreate("gt_commands_Func");
    TriggerAddEventChatMessage(gt_commands, c_playerAny, "-commands", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: suicide
//--------------------------------------------------------------------------------------------------
bool gt_suicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA8268598_g;
    int autoA8268598_u;
    unit autoA8268598_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA8268598_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8268598_u = UnitGroupCount(autoA8268598_g, c_unitCountAll);
    for (;; autoA8268598_u -= 1) {
        autoA8268598_var = UnitGroupUnitFromEnd(autoA8268598_g, autoA8268598_u);
        if (autoA8268598_var == null) { break; }
        UnitKill(autoA8268598_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_suicide_Init () {
    gt_suicide = TriggerCreate("gt_suicide_Func");
    TriggerEnable(gt_suicide, false);
    TriggerAddEventChatMessage(gt_suicide, c_playerAny, "-kill", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver Suicide
//--------------------------------------------------------------------------------------------------
bool gt_LeaverSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaverSuicide_Init () {
    gt_LeaverSuicide = TriggerCreate("gt_LeaverSuicide_Func");
    TriggerAddEventChatMessage(gt_LeaverSuicide, c_playerAny, "-leaver", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SoloDifficulty Creation
//--------------------------------------------------------------------------------------------------
bool gt_SoloDifficultyCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_soloDifficulty[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7CD78EAD"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -750, -125);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/018BFCA3"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_soloDifficulty[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_soloDifficulty[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_soloDifficulty[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_soloDifficulty[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoloDifficultyCreation_Init () {
    gt_SoloDifficultyCreation = TriggerCreate("gt_SoloDifficultyCreation_Func");
    TriggerEnable(gt_SoloDifficultyCreation, false);
    TriggerAddEventMapInit(gt_SoloDifficultyCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SoloDifficulty
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSoloDifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_soloDifficulty[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
    gv_enableSpeed = true;
    gv_bossSpeed = 2;
    DialogControlSetVisible(gv_soloDifficulty[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_soloDifficulty2[1], PlayerGroupAll(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/81D52A4D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSoloDifficulty_Init () {
    gt_ActivateSoloDifficulty = TriggerCreate("gt_ActivateSoloDifficulty_Func");
    TriggerEnable(gt_ActivateSoloDifficulty, false);
    TriggerAddEventDialogControl(gt_ActivateSoloDifficulty, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SoloDifficulty Creation 2
//--------------------------------------------------------------------------------------------------
bool gt_SoloDifficultyCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_soloDifficulty2[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7FA066B1"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -750, 125);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/F9D81405"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_soloDifficulty2[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_soloDifficulty2[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_soloDifficulty2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_soloDifficulty2[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoloDifficultyCreation2_Init () {
    gt_SoloDifficultyCreation2 = TriggerCreate("gt_SoloDifficultyCreation2_Func");
    TriggerEnable(gt_SoloDifficultyCreation2, false);
    TriggerAddEventMapInit(gt_SoloDifficultyCreation2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate SoloDifficulty 2
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSoloDifficulty2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_soloDifficulty2[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_soloDifficulty2[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_soloDifficulty[1], PlayerGroupAll(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E349B133"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSoloDifficulty2_Init () {
    gt_ActivateSoloDifficulty2 = TriggerCreate("gt_ActivateSoloDifficulty2_Func");
    TriggerEnable(gt_ActivateSoloDifficulty2, false);
    TriggerAddEventDialogControl(gt_ActivateSoloDifficulty2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AdjustZombiesToPlayerSkill
//--------------------------------------------------------------------------------------------------
bool gt_AdjustZombiesToPlayerSkill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") != "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive) && (PlayerType(2) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive) && (PlayerType(3) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive) && (PlayerType(4) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive) && (PlayerType(5) == c_playerTypeUser) && (PlayerStatus(6) == c_playerStatusActive) && (PlayerType(6) == c_playerTypeUser) && ((gv_playerInfo[1].lv_asassinKills > 100000) || (gv_playerInfo[1].lv_singleTargetKills > 100000) || (gv_playerInfo[1].lv_supportKills > 100000) || (gv_playerInfo[1].lv_splashKills > 100000) || (gv_playerInfo[1].lv_tankKills > 100000) || (gv_playerInfo[1].lv_specialistKills > 100000) || (gv_playerInfo[1].lv_builderKills > 100000)) && ((gv_playerInfo[2].lv_asassinKills > 100000) || (gv_playerInfo[2].lv_singleTargetKills > 100000) || (gv_playerInfo[2].lv_supportKills > 100000) || (gv_playerInfo[2].lv_splashKills > 100000) || (gv_playerInfo[2].lv_tankKills > 100000) || (gv_playerInfo[2].lv_specialistKills > 100000) || (gv_playerInfo[2].lv_builderKills > 100000)) && ((gv_playerInfo[3].lv_asassinKills > 100000) || (gv_playerInfo[3].lv_singleTargetKills > 100000) || (gv_playerInfo[3].lv_supportKills > 100000) || (gv_playerInfo[3].lv_splashKills > 100000) || (gv_playerInfo[3].lv_tankKills > 100000) || (gv_playerInfo[3].lv_specialistKills > 100000) || (gv_playerInfo[3].lv_builderKills > 100000)) && ((gv_playerInfo[4].lv_asassinKills > 100000) || (gv_playerInfo[4].lv_singleTargetKills > 100000) || (gv_playerInfo[4].lv_supportKills > 100000) || (gv_playerInfo[4].lv_splashKills > 100000) || (gv_playerInfo[4].lv_tankKills > 100000) || (gv_playerInfo[4].lv_specialistKills > 100000) || (gv_playerInfo[4].lv_builderKills > 100000)) && ((gv_playerInfo[5].lv_asassinKills > 100000) || (gv_playerInfo[5].lv_singleTargetKills > 100000) || (gv_playerInfo[5].lv_supportKills > 100000) || (gv_playerInfo[5].lv_splashKills > 100000) || (gv_playerInfo[5].lv_tankKills > 100000) || (gv_playerInfo[5].lv_specialistKills > 100000) || (gv_playerInfo[5].lv_builderKills > 100000)) && ((gv_playerInfo[6].lv_asassinKills > 100000) || (gv_playerInfo[6].lv_singleTargetKills > 100000) || (gv_playerInfo[6].lv_supportKills > 100000) || (gv_playerInfo[6].lv_splashKills > 100000) || (gv_playerInfo[6].lv_tankKills > 100000) || (gv_playerInfo[6].lv_specialistKills > 100000) || (gv_playerInfo[6].lv_builderKills > 100000))) {
        libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
        gv_enableSpeed = true;
        gv_bossSpeed = 2;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F0FD2521"));
    }
    else {
        if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive) && (PlayerType(2) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive) && (PlayerType(3) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive) && (PlayerType(4) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive) && (PlayerType(5) == c_playerTypeUser) && ((PlayerType(6) == c_playerTypeNone) || (PlayerType(6) == c_playerTypeComputer)) && ((gv_playerInfo[1].lv_asassinKills > 100000) || (gv_playerInfo[1].lv_singleTargetKills > 100000) || (gv_playerInfo[1].lv_supportKills > 100000) || (gv_playerInfo[1].lv_splashKills > 100000) || (gv_playerInfo[1].lv_tankKills > 100000) || (gv_playerInfo[1].lv_specialistKills > 100000) || (gv_playerInfo[1].lv_builderKills > 100000)) && ((gv_playerInfo[2].lv_asassinKills > 100000) || (gv_playerInfo[2].lv_singleTargetKills > 100000) || (gv_playerInfo[2].lv_supportKills > 100000) || (gv_playerInfo[2].lv_splashKills > 100000) || (gv_playerInfo[2].lv_tankKills > 100000) || (gv_playerInfo[2].lv_specialistKills > 100000) || (gv_playerInfo[2].lv_builderKills > 100000)) && ((gv_playerInfo[3].lv_asassinKills > 100000) || (gv_playerInfo[3].lv_singleTargetKills > 100000) || (gv_playerInfo[3].lv_supportKills > 100000) || (gv_playerInfo[3].lv_splashKills > 100000) || (gv_playerInfo[3].lv_tankKills > 100000) || (gv_playerInfo[3].lv_specialistKills > 100000) || (gv_playerInfo[3].lv_builderKills > 100000)) && ((gv_playerInfo[4].lv_asassinKills > 100000) || (gv_playerInfo[4].lv_singleTargetKills > 100000) || (gv_playerInfo[4].lv_supportKills > 100000) || (gv_playerInfo[4].lv_splashKills > 100000) || (gv_playerInfo[4].lv_tankKills > 100000) || (gv_playerInfo[4].lv_specialistKills > 100000) || (gv_playerInfo[4].lv_builderKills > 100000)) && ((gv_playerInfo[5].lv_asassinKills > 100000) || (gv_playerInfo[5].lv_singleTargetKills > 100000) || (gv_playerInfo[5].lv_supportKills > 100000) || (gv_playerInfo[5].lv_splashKills > 100000) || (gv_playerInfo[5].lv_tankKills > 100000) || (gv_playerInfo[5].lv_specialistKills > 100000) || (gv_playerInfo[5].lv_builderKills > 100000))) {
            libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
            gv_enableSpeed = true;
            gv_bossSpeed = 2;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/ABAA67D2"));
        }
        else {
            if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive) && (PlayerType(2) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive) && (PlayerType(3) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive) && (PlayerType(4) == c_playerTypeUser) && ((PlayerType(5) == c_playerTypeNone) || (PlayerType(5) == c_playerTypeComputer)) && ((PlayerType(6) == c_playerTypeNone) || (PlayerType(6) == c_playerTypeComputer)) && ((gv_playerInfo[1].lv_asassinKills > 100000) || (gv_playerInfo[1].lv_singleTargetKills > 100000) || (gv_playerInfo[1].lv_supportKills > 100000) || (gv_playerInfo[1].lv_splashKills > 100000) || (gv_playerInfo[1].lv_tankKills > 100000) || (gv_playerInfo[1].lv_specialistKills > 100000) || (gv_playerInfo[1].lv_builderKills > 100000)) && ((gv_playerInfo[2].lv_asassinKills > 100000) || (gv_playerInfo[2].lv_singleTargetKills > 100000) || (gv_playerInfo[2].lv_supportKills > 100000) || (gv_playerInfo[2].lv_splashKills > 100000) || (gv_playerInfo[2].lv_tankKills > 100000) || (gv_playerInfo[2].lv_specialistKills > 100000) || (gv_playerInfo[2].lv_builderKills > 100000)) && ((gv_playerInfo[3].lv_asassinKills > 100000) || (gv_playerInfo[3].lv_singleTargetKills > 100000) || (gv_playerInfo[3].lv_supportKills > 100000) || (gv_playerInfo[3].lv_splashKills > 100000) || (gv_playerInfo[3].lv_tankKills > 100000) || (gv_playerInfo[3].lv_specialistKills > 100000) || (gv_playerInfo[3].lv_builderKills > 100000)) && ((gv_playerInfo[4].lv_asassinKills > 100000) || (gv_playerInfo[4].lv_singleTargetKills > 100000) || (gv_playerInfo[4].lv_supportKills > 100000) || (gv_playerInfo[4].lv_splashKills > 100000) || (gv_playerInfo[4].lv_tankKills > 100000) || (gv_playerInfo[4].lv_specialistKills > 100000) || (gv_playerInfo[4].lv_builderKills > 100000))) {
                libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
                gv_enableSpeed = true;
                gv_bossSpeed = 2;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3A79965A"));
            }
            else {
                if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive) && (PlayerType(2) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive) && (PlayerType(3) == c_playerTypeUser) && ((PlayerType(4) == c_playerTypeComputer) || (PlayerType(4) == c_playerTypeNone)) && ((PlayerType(5) == c_playerTypeNone) || (PlayerType(5) == c_playerTypeComputer)) && ((PlayerType(6) == c_playerTypeNone) || (PlayerType(6) == c_playerTypeComputer)) && ((gv_playerInfo[1].lv_asassinKills > 100000) || (gv_playerInfo[1].lv_singleTargetKills > 100000) || (gv_playerInfo[1].lv_supportKills > 100000) || (gv_playerInfo[1].lv_splashKills > 100000) || (gv_playerInfo[1].lv_tankKills > 100000) || (gv_playerInfo[1].lv_specialistKills > 100000) || (gv_playerInfo[1].lv_builderKills > 100000)) && ((gv_playerInfo[2].lv_asassinKills > 100000) || (gv_playerInfo[2].lv_singleTargetKills > 100000) || (gv_playerInfo[2].lv_supportKills > 100000) || (gv_playerInfo[2].lv_splashKills > 100000) || (gv_playerInfo[2].lv_tankKills > 100000) || (gv_playerInfo[2].lv_specialistKills > 100000) || (gv_playerInfo[2].lv_builderKills > 100000)) && ((gv_playerInfo[3].lv_asassinKills > 100000) || (gv_playerInfo[3].lv_singleTargetKills > 100000) || (gv_playerInfo[3].lv_supportKills > 100000) || (gv_playerInfo[3].lv_splashKills > 100000) || (gv_playerInfo[3].lv_tankKills > 100000) || (gv_playerInfo[3].lv_specialistKills > 100000) || (gv_playerInfo[3].lv_builderKills > 100000))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
                    gv_enableSpeed = true;
                    gv_bossSpeed = 2;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/783F95C4"));
                }
                else {
                    if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive) && (PlayerType(2) == c_playerTypeUser) && ((PlayerType(3) == c_playerTypeComputer) || (PlayerType(3) == c_playerTypeNone)) && ((PlayerType(4) == c_playerTypeComputer) || (PlayerType(4) == c_playerTypeNone)) && ((PlayerType(5) == c_playerTypeNone) || (PlayerType(5) == c_playerTypeComputer)) && ((PlayerType(6) == c_playerTypeNone) || (PlayerType(6) == c_playerTypeComputer)) && ((gv_playerInfo[1].lv_asassinKills > 100000) || (gv_playerInfo[1].lv_singleTargetKills > 100000) || (gv_playerInfo[1].lv_supportKills > 100000) || (gv_playerInfo[1].lv_splashKills > 100000) || (gv_playerInfo[1].lv_tankKills > 100000) || (gv_playerInfo[1].lv_specialistKills > 100000) || (gv_playerInfo[1].lv_builderKills > 100000)) && ((gv_playerInfo[2].lv_asassinKills > 100000) || (gv_playerInfo[2].lv_singleTargetKills > 100000) || (gv_playerInfo[2].lv_supportKills > 100000) || (gv_playerInfo[2].lv_splashKills > 100000) || (gv_playerInfo[2].lv_tankKills > 100000) || (gv_playerInfo[2].lv_specialistKills > 100000) || (gv_playerInfo[2].lv_builderKills > 100000))) {
                        libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
                        gv_enableSpeed = true;
                        gv_bossSpeed = 2;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/A27B46EF"));
                    }
                    else {
                        if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && ((PlayerType(2) == c_playerTypeNone) || (PlayerType(2) == c_playerTypeComputer)) && ((PlayerType(3) == c_playerTypeComputer) || (PlayerType(3) == c_playerTypeNone)) && ((PlayerType(4) == c_playerTypeComputer) || (PlayerType(4) == c_playerTypeNone)) && ((PlayerType(5) == c_playerTypeNone) || (PlayerType(5) == c_playerTypeComputer)) && ((PlayerType(6) == c_playerTypeNone) || (PlayerType(6) == c_playerTypeComputer)) && ((gv_playerInfo[1].lv_asassinKills > 100000) || (gv_playerInfo[1].lv_singleTargetKills > 100000) || (gv_playerInfo[1].lv_supportKills > 100000) || (gv_playerInfo[1].lv_splashKills > 100000) || (gv_playerInfo[1].lv_tankKills > 100000) || (gv_playerInfo[1].lv_specialistKills > 100000) || (gv_playerInfo[1].lv_builderKills > 100000))) {
                            libNtve_gf_SetUpgradeLevelForPlayer(9, "HardMode", 1);
                            gv_enableSpeed = true;
                            gv_bossSpeed = 2;
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CD5D38A3"));
                            TriggerEnable(gt_SoloFun, false);
                        }

                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdjustZombiesToPlayerSkill_Init () {
    gt_AdjustZombiesToPlayerSkill = TriggerCreate("gt_AdjustZombiesToPlayerSkill_Func");
    TriggerEnable(gt_AdjustZombiesToPlayerSkill, false);
    TriggerAddEventTimeElapsed(gt_AdjustZombiesToPlayerSkill, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SoloFun
//--------------------------------------------------------------------------------------------------
bool gt_SoloFun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerType(1) == c_playerTypeUser) && ((PlayerType(2) == c_playerTypeNone) || (PlayerType(2) == c_playerTypeComputer)) && ((PlayerType(3) == c_playerTypeComputer) || (PlayerType(3) == c_playerTypeNone)) && ((PlayerType(4) == c_playerTypeComputer) || (PlayerType(4) == c_playerTypeNone)) && ((PlayerType(5) == c_playerTypeNone) || (PlayerType(5) == c_playerTypeComputer)) && ((PlayerType(6) == c_playerTypeNone) || (PlayerType(6) == c_playerTypeComputer))) {
        DialogControlSetVisible(gv_soloDifficulty[1], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_soloDifficulty2[1], PlayerGroupAll(), true);
        TriggerEnable(gt_AdjustZombiesToPlayerSkill, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoloFun_Init () {
    gt_SoloFun = TriggerCreate("gt_SoloFun_Func");
    TriggerEnable(gt_SoloFun, false);
    TriggerAddEventMapInit(gt_SoloFun);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZombieChristmasGifts
//--------------------------------------------------------------------------------------------------
bool gt_ZombieChristmasGifts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_giftChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 9) || (UnitGetOwner(EventUnit()) == 10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_giftChance = RandomInt(1, 20);
    if ((lv_giftChance == 11)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GiftBox", 0, libNtve_gf_KillingPlayer(), UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieChristmasGifts_Init () {
    gt_ZombieChristmasGifts = TriggerCreate("gt_ZombieChristmasGifts_Func");
    TriggerEnable(gt_ZombieChristmasGifts, false);
    TriggerAddEventUnitDied(gt_ZombieChristmasGifts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZombieChristmasGiftReward
//--------------------------------------------------------------------------------------------------
bool gt_ZombieChristmasGiftReward_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 9))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GiftBox"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[UnitGetOwner(EventUnit())].lv_asassinKills += 1;
    gv_playerInfo[UnitGetOwner(EventUnit())].lv_singleTargetKills += 1;
    gv_playerInfo[UnitGetOwner(EventUnit())].lv_builderKills += 1;
    gv_playerInfo[UnitGetOwner(EventUnit())].lv_tankKills += 1;
    gv_playerInfo[UnitGetOwner(EventUnit())].lv_supportKills += 1;
    gv_playerInfo[UnitGetOwner(EventUnit())].lv_specialistKills += 1;
    gv_playerInfo[UnitGetOwner(EventUnit())].lv_splashKills += 1;
    BoardItemSetText(gv_leaderboard, 3, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, UnitGetOwner(EventUnit()), IntToText(gv_playerInfo[UnitGetOwner(EventUnit())].lv_builderKills));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieChristmasGiftReward_Init () {
    gt_ZombieChristmasGiftReward = TriggerCreate("gt_ZombieChristmasGiftReward_Func");
    TriggerEnable(gt_ZombieChristmasGiftReward, false);
    TriggerAddEventUnitDied(gt_ZombieChristmasGiftReward, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: textcheck
//--------------------------------------------------------------------------------------------------
bool gt_textcheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C772DE36"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_textcheck_Init () {
    gt_textcheck = TriggerCreate("gt_textcheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Zombie (SpeedMode)
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesZombieSpeedMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto60D68B5A_ae = 6;
    int auto60D68B5A_var;
    int auto56E791B2_ae;
    int auto56E791B2_var;
    int autoF7207964_ae;
    int autoF7207964_var;
    int auto9993D234_ae;
    int auto9993D234_var;
    int auto4827C93F_ae;
    int auto4827C93F_var;
    int auto4AB0DF41_ae;
    int auto4AB0DF41_var;
    int auto8897B7E5_ae;
    int auto8897B7E5_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 250))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto60D68B5A_var = 1;
    for ( ; auto60D68B5A_var <= auto60D68B5A_ae; auto60D68B5A_var += 1 ) {
        if ((PlayerStatus(auto60D68B5A_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(auto60D68B5A_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/EC9F1C2E"));
        auto56E791B2_ae = gv_tKSZombieAmount;
        auto56E791B2_var = 1;
        for ( ; auto56E791B2_var <= auto56E791B2_ae; auto56E791B2_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoF7207964_ae = gv_tKSZombieAmount;
        autoF7207964_var = 1;
        for ( ; autoF7207964_var <= autoF7207964_ae; autoF7207964_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto9993D234_ae = gv_tKSZombieAmount;
        auto9993D234_var = 1;
        for ( ; auto9993D234_var <= auto9993D234_ae; auto9993D234_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto4827C93F_ae = gv_tKSZombieAmount;
        auto4827C93F_var = 1;
        for ( ; auto4827C93F_var <= auto4827C93F_ae; auto4827C93F_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto4AB0DF41_ae = gv_tKSZombieAmount;
        auto4AB0DF41_var = 1;
        for ( ; auto4AB0DF41_var <= auto4AB0DF41_ae; auto4AB0DF41_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto8897B7E5_ae = gv_tKSZombieAmount;
        auto8897B7E5_var = 1;
        for ( ; auto8897B7E5_var <= auto8897B7E5_ae; auto8897B7E5_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = 500000;
        }
        else {
            gv_zombielife = (gv_zombielife * 21);
            gv_zombielife = (gv_zombielife / 20);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/B9AD3BB8")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/F5DC2DD5"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesZombieSpeedMode_Init () {
    gt_ZombieTKSWavesZombieSpeedMode = TriggerCreate("gt_ZombieTKSWavesZombieSpeedMode_Func");
    TriggerEnable(gt_ZombieTKSWavesZombieSpeedMode, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesZombieSpeedMode, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Zombie
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesZombie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDFA1130A_ae = 6;
    int autoDFA1130A_var;
    int autoFF95FDFE_ae;
    int autoFF95FDFE_var;
    int auto53C7C3B0_ae;
    int auto53C7C3B0_var;
    int autoC59A872E_ae;
    int autoC59A872E_var;
    int autoB9E791B3_ae;
    int autoB9E791B3_var;
    int autoF3525697_ae;
    int autoF3525697_var;
    int auto70D2B256_ae;
    int auto70D2B256_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 250))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDFA1130A_var = 1;
    for ( ; autoDFA1130A_var <= autoDFA1130A_ae; autoDFA1130A_var += 1 ) {
        if ((PlayerStatus(autoDFA1130A_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(autoDFA1130A_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/8B0B3235"));
        autoFF95FDFE_ae = gv_tKSZombieAmount;
        autoFF95FDFE_var = 1;
        for ( ; autoFF95FDFE_var <= autoFF95FDFE_ae; autoFF95FDFE_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto53C7C3B0_ae = gv_tKSZombieAmount;
        auto53C7C3B0_var = 1;
        for ( ; auto53C7C3B0_var <= auto53C7C3B0_ae; auto53C7C3B0_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoC59A872E_ae = gv_tKSZombieAmount;
        autoC59A872E_var = 1;
        for ( ; autoC59A872E_var <= autoC59A872E_ae; autoC59A872E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoB9E791B3_ae = gv_tKSZombieAmount;
        autoB9E791B3_var = 1;
        for ( ; autoB9E791B3_var <= autoB9E791B3_ae; autoB9E791B3_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoF3525697_ae = gv_tKSZombieAmount;
        autoF3525697_var = 1;
        for ( ; autoF3525697_var <= autoF3525697_ae; autoF3525697_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto70D2B256_ae = gv_tKSZombieAmount;
        auto70D2B256_var = 1;
        for ( ; auto70D2B256_var <= auto70D2B256_ae; auto70D2B256_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 21);
            gv_zombielife = (gv_zombielife / 20);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/709C9CC0")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B28980E1"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesZombie_Init () {
    gt_ZombieTKSWavesZombie = TriggerCreate("gt_ZombieTKSWavesZombie_Func");
    TriggerEnable(gt_ZombieTKSWavesZombie, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesZombie, (40 - gv_zombieSpawnRate), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Zergling
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesZergling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto03C47DB3_ae = 8;
    int auto03C47DB3_var;
    const int autoCAD0399C_ae = 8;
    int autoCAD0399C_var;
    int autoB402FC5E_ae;
    int autoB402FC5E_var;
    int auto10A59F41_ae;
    int auto10A59F41_var;
    int auto38C50C59_ae;
    int auto38C50C59_var;
    int autoD6EAF094_ae;
    int autoD6EAF094_var;
    int autoF625CE64_ae;
    int autoF625CE64_var;
    int autoB688BFEA_ae;
    int autoB688BFEA_var;
    unitgroup auto9EB00C3D_g;
    int auto9EB00C3D_u;
    unit auto9EB00C3D_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 225))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto03C47DB3_var = 1;
    for ( ; auto03C47DB3_var <= auto03C47DB3_ae; auto03C47DB3_var += 1 ) {
        if ((PlayerStatus(auto03C47DB3_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(auto03C47DB3_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/1B94D55F"));
        autoCAD0399C_var = 1;
        for ( ; autoCAD0399C_var <= autoCAD0399C_ae; autoCAD0399C_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[autoCAD0399C_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[autoCAD0399C_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        autoB402FC5E_ae = gv_tKSZombieAmount;
        autoB402FC5E_var = 1;
        for ( ; autoB402FC5E_var <= autoB402FC5E_ae; autoB402FC5E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto10A59F41_ae = gv_tKSZombieAmount;
        auto10A59F41_var = 1;
        for ( ; auto10A59F41_var <= auto10A59F41_ae; auto10A59F41_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto38C50C59_ae = gv_tKSZombieAmount;
        auto38C50C59_var = 1;
        for ( ; auto38C50C59_var <= auto38C50C59_ae; auto38C50C59_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoD6EAF094_ae = gv_tKSZombieAmount;
        autoD6EAF094_var = 1;
        for ( ; autoD6EAF094_var <= autoD6EAF094_ae; autoD6EAF094_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoF625CE64_ae = gv_tKSZombieAmount;
        autoF625CE64_var = 1;
        for ( ; autoF625CE64_var <= autoF625CE64_ae; autoF625CE64_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoB688BFEA_ae = gv_tKSZombieAmount;
        autoB688BFEA_var = 1;
        for ( ; autoB688BFEA_var <= autoB688BFEA_ae; autoB688BFEA_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 103);
            gv_zombielife = (gv_zombielife / 100);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        auto9EB00C3D_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto9EB00C3D_u = UnitGroupCount(auto9EB00C3D_g, c_unitCountAll);
        for (;; auto9EB00C3D_u -= 1) {
            auto9EB00C3D_var = UnitGroupUnitFromEnd(auto9EB00C3D_g, auto9EB00C3D_u);
            if (auto9EB00C3D_var == null) { break; }
            UnitRemove(auto9EB00C3D_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/6CB67693")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/5ADAE0C3"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesZergling_Init () {
    gt_ZombieTKSWavesZergling = TriggerCreate("gt_ZombieTKSWavesZergling_Func");
    TriggerEnable(gt_ZombieTKSWavesZergling, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesZergling, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Ultra
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesUltra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA3592586_ae = 8;
    int autoA3592586_var;
    const int auto6B4EEF05_ae = 8;
    int auto6B4EEF05_var;
    int auto5ED64CBD_ae;
    int auto5ED64CBD_var;
    int auto3F381F55_ae;
    int auto3F381F55_var;
    int autoDEE373E6_ae;
    int autoDEE373E6_var;
    int auto74667F96_ae;
    int auto74667F96_var;
    int auto1EAD92F8_ae;
    int auto1EAD92F8_var;
    int auto619DE29E_ae;
    int auto619DE29E_var;
    unitgroup autoBD1A5ADB_g;
    int autoBD1A5ADB_u;
    unit autoBD1A5ADB_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3592586_var = 1;
    for ( ; autoA3592586_var <= autoA3592586_ae; autoA3592586_var += 1 ) {
        if ((PlayerStatus(autoA3592586_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(autoA3592586_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/4373AFE0"));
        auto6B4EEF05_var = 1;
        for ( ; auto6B4EEF05_var <= auto6B4EEF05_ae; auto6B4EEF05_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[auto6B4EEF05_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[auto6B4EEF05_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        auto5ED64CBD_ae = gv_tKSZombieAmount;
        auto5ED64CBD_var = 1;
        for ( ; auto5ED64CBD_var <= auto5ED64CBD_ae; auto5ED64CBD_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto3F381F55_ae = gv_tKSZombieAmount;
        auto3F381F55_var = 1;
        for ( ; auto3F381F55_var <= auto3F381F55_ae; auto3F381F55_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoDEE373E6_ae = gv_tKSZombieAmount;
        autoDEE373E6_var = 1;
        for ( ; autoDEE373E6_var <= autoDEE373E6_ae; autoDEE373E6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto74667F96_ae = gv_tKSZombieAmount;
        auto74667F96_var = 1;
        for ( ; auto74667F96_var <= auto74667F96_ae; auto74667F96_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto1EAD92F8_ae = gv_tKSZombieAmount;
        auto1EAD92F8_var = 1;
        for ( ; auto1EAD92F8_var <= auto1EAD92F8_ae; auto1EAD92F8_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto619DE29E_ae = gv_tKSZombieAmount;
        auto619DE29E_var = 1;
        for ( ; auto619DE29E_var <= auto619DE29E_ae; auto619DE29E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 102);
            gv_zombielife = (gv_zombielife / 100);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        autoBD1A5ADB_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
        autoBD1A5ADB_u = UnitGroupCount(autoBD1A5ADB_g, c_unitCountAll);
        for (;; autoBD1A5ADB_u -= 1) {
            autoBD1A5ADB_var = UnitGroupUnitFromEnd(autoBD1A5ADB_g, autoBD1A5ADB_u);
            if (autoBD1A5ADB_var == null) { break; }
            UnitRemove(autoBD1A5ADB_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/430E35ED")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/21466BFD"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesUltra_Init () {
    gt_ZombieTKSWavesUltra = TriggerCreate("gt_ZombieTKSWavesUltra_Func");
    TriggerEnable(gt_ZombieTKSWavesUltra, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesUltra, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Locusts
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesLocusts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD37F5DB9_ae = 8;
    int autoD37F5DB9_var;
    const int auto8C5B888D_ae = 8;
    int auto8C5B888D_var;
    int autoDFEDC0DF_ae;
    int autoDFEDC0DF_var;
    int autoB93C22B0_ae;
    int autoB93C22B0_var;
    int auto171B1FF3_ae;
    int auto171B1FF3_var;
    int autoFF31CDD9_ae;
    int autoFF31CDD9_var;
    int auto04505120_ae;
    int auto04505120_var;
    int auto6B50B6EB_ae;
    int auto6B50B6EB_var;
    unitgroup auto9C8E8F1F_g;
    int auto9C8E8F1F_u;
    unit auto9C8E8F1F_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD37F5DB9_var = 1;
    for ( ; autoD37F5DB9_var <= autoD37F5DB9_ae; autoD37F5DB9_var += 1 ) {
        if ((PlayerStatus(autoD37F5DB9_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(autoD37F5DB9_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/54B12555"));
        auto8C5B888D_var = 1;
        for ( ; auto8C5B888D_var <= auto8C5B888D_ae; auto8C5B888D_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[auto8C5B888D_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[auto8C5B888D_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        autoDFEDC0DF_ae = gv_tKSZombieAmount;
        autoDFEDC0DF_var = 1;
        for ( ; autoDFEDC0DF_var <= autoDFEDC0DF_ae; autoDFEDC0DF_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoB93C22B0_ae = gv_tKSZombieAmount;
        autoB93C22B0_var = 1;
        for ( ; autoB93C22B0_var <= autoB93C22B0_ae; autoB93C22B0_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto171B1FF3_ae = gv_tKSZombieAmount;
        auto171B1FF3_var = 1;
        for ( ; auto171B1FF3_var <= auto171B1FF3_ae; auto171B1FF3_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoFF31CDD9_ae = gv_tKSZombieAmount;
        autoFF31CDD9_var = 1;
        for ( ; autoFF31CDD9_var <= autoFF31CDD9_ae; autoFF31CDD9_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto04505120_ae = gv_tKSZombieAmount;
        auto04505120_var = 1;
        for ( ; auto04505120_var <= auto04505120_ae; auto04505120_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto6B50B6EB_ae = gv_tKSZombieAmount;
        auto6B50B6EB_var = 1;
        for ( ; auto6B50B6EB_var <= auto6B50B6EB_ae; auto6B50B6EB_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 51);
            gv_zombielife = (gv_zombielife / 50);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        auto9C8E8F1F_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto9C8E8F1F_u = UnitGroupCount(auto9C8E8F1F_g, c_unitCountAll);
        for (;; auto9C8E8F1F_u -= 1) {
            auto9C8E8F1F_var = UnitGroupUnitFromEnd(auto9C8E8F1F_g, auto9C8E8F1F_u);
            if (auto9C8E8F1F_var == null) { break; }
            UnitRemove(auto9C8E8F1F_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/9798CBBB")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/39E3BC81"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesLocusts_Init () {
    gt_ZombieTKSWavesLocusts = TriggerCreate("gt_ZombieTKSWavesLocusts_Func");
    TriggerEnable(gt_ZombieTKSWavesLocusts, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesLocusts, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Mix
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesMix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto5EB27916_ae = 8;
    int auto5EB27916_var;
    const int autoB7CDEA9B_ae = 8;
    int autoB7CDEA9B_var;
    const int autoD225AFFF_ae = 3;
    int autoD225AFFF_var;
    const int auto10A78466_ae = 5;
    int auto10A78466_var;
    const int auto628B4C56_ae = 5;
    int auto628B4C56_var;
    const int auto3A2833CE_ae = 1;
    int auto3A2833CE_var;
    const int auto45E1CDC5_ae = 3;
    int auto45E1CDC5_var;
    const int auto59E0166D_ae = 5;
    int auto59E0166D_var;
    const int autoF623B3A3_ae = 5;
    int autoF623B3A3_var;
    const int auto366FB612_ae = 1;
    int auto366FB612_var;
    const int auto61051276_ae = 3;
    int auto61051276_var;
    const int auto751AD2CC_ae = 5;
    int auto751AD2CC_var;
    const int auto2473BBD2_ae = 5;
    int auto2473BBD2_var;
    const int auto039E1563_ae = 1;
    int auto039E1563_var;
    const int autoD125F618_ae = 3;
    int autoD125F618_var;
    const int auto28A96A99_ae = 5;
    int auto28A96A99_var;
    const int auto87B9BC16_ae = 5;
    int auto87B9BC16_var;
    const int auto5678D076_ae = 1;
    int auto5678D076_var;
    const int auto95395E0E_ae = 3;
    int auto95395E0E_var;
    const int auto75CCCF00_ae = 5;
    int auto75CCCF00_var;
    const int auto5620A343_ae = 5;
    int auto5620A343_var;
    const int auto7CDED9F3_ae = 1;
    int auto7CDED9F3_var;
    const int autoA30487FD_ae = 3;
    int autoA30487FD_var;
    const int auto15A221A0_ae = 5;
    int auto15A221A0_var;
    const int autoBCE0EFD6_ae = 5;
    int autoBCE0EFD6_var;
    const int auto53C304BD_ae = 1;
    int auto53C304BD_var;
    unitgroup auto6F2B11A5_g;
    int auto6F2B11A5_u;
    unit auto6F2B11A5_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EB27916_var = 1;
    for ( ; auto5EB27916_var <= auto5EB27916_ae; auto5EB27916_var += 1 ) {
        if ((PlayerStatus(auto5EB27916_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(auto5EB27916_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/62A57949"));
        autoB7CDEA9B_var = 1;
        for ( ; autoB7CDEA9B_var <= autoB7CDEA9B_ae; autoB7CDEA9B_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[autoB7CDEA9B_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[autoB7CDEA9B_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1330477819));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        autoD225AFFF_var = 1;
        for ( ; autoD225AFFF_var <= autoD225AFFF_ae; autoD225AFFF_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto10A78466_var = 1;
        for ( ; auto10A78466_var <= auto10A78466_ae; auto10A78466_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto628B4C56_var = 1;
        for ( ; auto628B4C56_var <= auto628B4C56_ae; auto628B4C56_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto3A2833CE_var = 1;
        for ( ; auto3A2833CE_var <= auto3A2833CE_ae; auto3A2833CE_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1727458775));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        auto45E1CDC5_var = 1;
        for ( ; auto45E1CDC5_var <= auto45E1CDC5_ae; auto45E1CDC5_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto59E0166D_var = 1;
        for ( ; auto59E0166D_var <= auto59E0166D_ae; auto59E0166D_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoF623B3A3_var = 1;
        for ( ; autoF623B3A3_var <= autoF623B3A3_ae; autoF623B3A3_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto366FB612_var = 1;
        for ( ; auto366FB612_var <= auto366FB612_ae; auto366FB612_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(252796511));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        auto61051276_var = 1;
        for ( ; auto61051276_var <= auto61051276_ae; auto61051276_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto751AD2CC_var = 1;
        for ( ; auto751AD2CC_var <= auto751AD2CC_ae; auto751AD2CC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto2473BBD2_var = 1;
        for ( ; auto2473BBD2_var <= auto2473BBD2_ae; auto2473BBD2_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto039E1563_var = 1;
        for ( ; auto039E1563_var <= auto039E1563_ae; auto039E1563_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(195972330));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        autoD125F618_var = 1;
        for ( ; autoD125F618_var <= autoD125F618_ae; autoD125F618_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto28A96A99_var = 1;
        for ( ; auto28A96A99_var <= auto28A96A99_ae; auto28A96A99_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto87B9BC16_var = 1;
        for ( ; auto87B9BC16_var <= auto87B9BC16_ae; auto87B9BC16_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto5678D076_var = 1;
        for ( ; auto5678D076_var <= auto5678D076_ae; auto5678D076_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1443602122));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        auto95395E0E_var = 1;
        for ( ; auto95395E0E_var <= auto95395E0E_ae; auto95395E0E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto75CCCF00_var = 1;
        for ( ; auto75CCCF00_var <= auto75CCCF00_ae; auto75CCCF00_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto5620A343_var = 1;
        for ( ; auto5620A343_var <= auto5620A343_ae; auto5620A343_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto7CDED9F3_var = 1;
        for ( ; auto7CDED9F3_var <= auto7CDED9F3_ae; auto7CDED9F3_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1886480028));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        autoA30487FD_var = 1;
        for ( ; autoA30487FD_var <= autoA30487FD_ae; autoA30487FD_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto15A221A0_var = 1;
        for ( ; auto15A221A0_var <= auto15A221A0_ae; auto15A221A0_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoBCE0EFD6_var = 1;
        for ( ; autoBCE0EFD6_var <= autoBCE0EFD6_ae; autoBCE0EFD6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto53C304BD_var = 1;
        for ( ; auto53C304BD_var <= auto53C304BD_ae; auto53C304BD_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }

        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 51);
            gv_zombielife = (gv_zombielife / 50);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        auto6F2B11A5_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
        auto6F2B11A5_u = UnitGroupCount(auto6F2B11A5_g, c_unitCountAll);
        for (;; auto6F2B11A5_u -= 1) {
            auto6F2B11A5_var = UnitGroupUnitFromEnd(auto6F2B11A5_g, auto6F2B11A5_u);
            if (auto6F2B11A5_var == null) { break; }
            UnitRemove(auto6F2B11A5_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/84D3D6D4")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B5438F56"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesMix_Init () {
    gt_ZombieTKSWavesMix = TriggerCreate("gt_ZombieTKSWavesMix_Func");
    TriggerEnable(gt_ZombieTKSWavesMix, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesMix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Large Mix
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesLargeMix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE2CD6AC3_ae = 8;
    int autoE2CD6AC3_var;
    const int autoBF0286C1_ae = 8;
    int autoBF0286C1_var;
    const int auto06CCC29A_ae = 3;
    int auto06CCC29A_var;
    const int auto67916EB7_ae = 2;
    int auto67916EB7_var;
    const int auto677E3CD4_ae = 2;
    int auto677E3CD4_var;
    const int autoE5F5EFD8_ae = 5;
    int autoE5F5EFD8_var;
    const int auto73FF9D56_ae = 5;
    int auto73FF9D56_var;
    const int autoA8C59EA5_ae = 1;
    int autoA8C59EA5_var;
    const int auto4C0157F5_ae = 1;
    int auto4C0157F5_var;
    const int autoDA7E8FFC_ae = 3;
    int autoDA7E8FFC_var;
    const int auto219ED43C_ae = 2;
    int auto219ED43C_var;
    const int autoD463841A_ae = 2;
    int autoD463841A_var;
    const int autoB377509C_ae = 5;
    int autoB377509C_var;
    const int auto1536059C_ae = 5;
    int auto1536059C_var;
    const int auto0728C01D_ae = 1;
    int auto0728C01D_var;
    const int auto8FFA4E30_ae = 1;
    int auto8FFA4E30_var;
    const int auto29E942E3_ae = 3;
    int auto29E942E3_var;
    const int auto14A29D58_ae = 2;
    int auto14A29D58_var;
    const int autoE566DB71_ae = 2;
    int autoE566DB71_var;
    const int auto8A2EC1C6_ae = 5;
    int auto8A2EC1C6_var;
    const int auto44FC9472_ae = 5;
    int auto44FC9472_var;
    const int auto35B5B714_ae = 1;
    int auto35B5B714_var;
    const int auto19E42531_ae = 1;
    int auto19E42531_var;
    const int auto47A4CD66_ae = 3;
    int auto47A4CD66_var;
    const int auto11E7B0D4_ae = 2;
    int auto11E7B0D4_var;
    const int auto9D1C9487_ae = 2;
    int auto9D1C9487_var;
    const int auto5066184E_ae = 5;
    int auto5066184E_var;
    const int auto5F743091_ae = 5;
    int auto5F743091_var;
    const int autoEF3439AF_ae = 1;
    int autoEF3439AF_var;
    const int auto22CA6AD4_ae = 1;
    int auto22CA6AD4_var;
    const int autoE32AF59E_ae = 3;
    int autoE32AF59E_var;
    const int auto3FB63AA4_ae = 2;
    int auto3FB63AA4_var;
    const int auto8A30492C_ae = 2;
    int auto8A30492C_var;
    const int autoC0D4FD0F_ae = 5;
    int autoC0D4FD0F_var;
    const int autoE0A34E5C_ae = 5;
    int autoE0A34E5C_var;
    const int autoA6FFBB2E_ae = 1;
    int autoA6FFBB2E_var;
    const int autoDF6C3FD6_ae = 1;
    int autoDF6C3FD6_var;
    const int autoFCE495CA_ae = 3;
    int autoFCE495CA_var;
    const int autoB3BAE9F4_ae = 2;
    int autoB3BAE9F4_var;
    const int autoD139C522_ae = 2;
    int autoD139C522_var;
    const int autoC2115744_ae = 5;
    int autoC2115744_var;
    const int auto1749A295_ae = 5;
    int auto1749A295_var;
    const int auto1A34E084_ae = 1;
    int auto1A34E084_var;
    const int auto926AD867_ae = 1;
    int auto926AD867_var;
    unitgroup auto38891C20_g;
    int auto38891C20_u;
    unit auto38891C20_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2CD6AC3_var = 1;
    for ( ; autoE2CD6AC3_var <= autoE2CD6AC3_ae; autoE2CD6AC3_var += 1 ) {
        if ((PlayerStatus(autoE2CD6AC3_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(autoE2CD6AC3_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/106FB279"));
        autoBF0286C1_var = 1;
        for ( ; autoBF0286C1_var <= autoBF0286C1_ae; autoBF0286C1_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[autoBF0286C1_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[autoBF0286C1_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        auto06CCC29A_var = 1;
        for ( ; auto06CCC29A_var <= auto06CCC29A_ae; auto06CCC29A_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto67916EB7_var = 1;
        for ( ; auto67916EB7_var <= auto67916EB7_ae; auto67916EB7_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto677E3CD4_var = 1;
        for ( ; auto677E3CD4_var <= auto677E3CD4_ae; auto677E3CD4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoE5F5EFD8_var = 1;
        for ( ; autoE5F5EFD8_var <= autoE5F5EFD8_ae; autoE5F5EFD8_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto73FF9D56_var = 1;
        for ( ; auto73FF9D56_var <= auto73FF9D56_ae; auto73FF9D56_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoA8C59EA5_var = 1;
        for ( ; autoA8C59EA5_var <= autoA8C59EA5_ae; autoA8C59EA5_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        }
        auto4C0157F5_var = 1;
        for ( ; auto4C0157F5_var <= auto4C0157F5_ae; auto4C0157F5_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        autoDA7E8FFC_var = 1;
        for ( ; autoDA7E8FFC_var <= autoDA7E8FFC_ae; autoDA7E8FFC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto219ED43C_var = 1;
        for ( ; auto219ED43C_var <= auto219ED43C_ae; auto219ED43C_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoD463841A_var = 1;
        for ( ; autoD463841A_var <= autoD463841A_ae; autoD463841A_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoB377509C_var = 1;
        for ( ; autoB377509C_var <= autoB377509C_ae; autoB377509C_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto1536059C_var = 1;
        for ( ; auto1536059C_var <= auto1536059C_ae; auto1536059C_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto0728C01D_var = 1;
        for ( ; auto0728C01D_var <= auto0728C01D_ae; auto0728C01D_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        }
        auto8FFA4E30_var = 1;
        for ( ; auto8FFA4E30_var <= auto8FFA4E30_ae; auto8FFA4E30_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        auto29E942E3_var = 1;
        for ( ; auto29E942E3_var <= auto29E942E3_ae; auto29E942E3_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto14A29D58_var = 1;
        for ( ; auto14A29D58_var <= auto14A29D58_ae; auto14A29D58_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoE566DB71_var = 1;
        for ( ; autoE566DB71_var <= autoE566DB71_ae; autoE566DB71_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto8A2EC1C6_var = 1;
        for ( ; auto8A2EC1C6_var <= auto8A2EC1C6_ae; auto8A2EC1C6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto44FC9472_var = 1;
        for ( ; auto44FC9472_var <= auto44FC9472_ae; auto44FC9472_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto35B5B714_var = 1;
        for ( ; auto35B5B714_var <= auto35B5B714_ae; auto35B5B714_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        }
        auto19E42531_var = 1;
        for ( ; auto19E42531_var <= auto19E42531_ae; auto19E42531_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(195972330));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        auto47A4CD66_var = 1;
        for ( ; auto47A4CD66_var <= auto47A4CD66_ae; auto47A4CD66_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto11E7B0D4_var = 1;
        for ( ; auto11E7B0D4_var <= auto11E7B0D4_ae; auto11E7B0D4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto9D1C9487_var = 1;
        for ( ; auto9D1C9487_var <= auto9D1C9487_ae; auto9D1C9487_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto5066184E_var = 1;
        for ( ; auto5066184E_var <= auto5066184E_ae; auto5066184E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto5F743091_var = 1;
        for ( ; auto5F743091_var <= auto5F743091_ae; auto5F743091_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoEF3439AF_var = 1;
        for ( ; autoEF3439AF_var <= autoEF3439AF_ae; autoEF3439AF_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        }
        auto22CA6AD4_var = 1;
        for ( ; auto22CA6AD4_var <= auto22CA6AD4_ae; auto22CA6AD4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        autoE32AF59E_var = 1;
        for ( ; autoE32AF59E_var <= autoE32AF59E_ae; autoE32AF59E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto3FB63AA4_var = 1;
        for ( ; auto3FB63AA4_var <= auto3FB63AA4_ae; auto3FB63AA4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto8A30492C_var = 1;
        for ( ; auto8A30492C_var <= auto8A30492C_ae; auto8A30492C_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoC0D4FD0F_var = 1;
        for ( ; autoC0D4FD0F_var <= autoC0D4FD0F_ae; autoC0D4FD0F_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoE0A34E5C_var = 1;
        for ( ; autoE0A34E5C_var <= autoE0A34E5C_ae; autoE0A34E5C_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoA6FFBB2E_var = 1;
        for ( ; autoA6FFBB2E_var <= autoA6FFBB2E_ae; autoA6FFBB2E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        }
        autoDF6C3FD6_var = 1;
        for ( ; autoDF6C3FD6_var <= autoDF6C3FD6_ae; autoDF6C3FD6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1886480028));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        autoFCE495CA_var = 1;
        for ( ; autoFCE495CA_var <= autoFCE495CA_ae; autoFCE495CA_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoB3BAE9F4_var = 1;
        for ( ; autoB3BAE9F4_var <= autoB3BAE9F4_ae; autoB3BAE9F4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoD139C522_var = 1;
        for ( ; autoD139C522_var <= autoD139C522_ae; autoD139C522_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoC2115744_var = 1;
        for ( ; autoC2115744_var <= autoC2115744_ae; autoC2115744_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto1749A295_var = 1;
        for ( ; auto1749A295_var <= auto1749A295_ae; auto1749A295_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto1A34E084_var = 1;
        for ( ; auto1A34E084_var <= auto1A34E084_ae; auto1A34E084_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 3));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 3));
        }
        auto926AD867_var = 1;
        for ( ; auto926AD867_var <= auto926AD867_ae; auto926AD867_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }

        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 51);
            gv_zombielife = (gv_zombielife / 50);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        auto38891C20_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
        auto38891C20_u = UnitGroupCount(auto38891C20_g, c_unitCountAll);
        for (;; auto38891C20_u -= 1) {
            auto38891C20_var = UnitGroupUnitFromEnd(auto38891C20_g, auto38891C20_u);
            if (auto38891C20_var == null) { break; }
            UnitRemove(auto38891C20_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/BE69F779")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/49EDE589"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesLargeMix_Init () {
    gt_ZombieTKSWavesLargeMix = TriggerCreate("gt_ZombieTKSWavesLargeMix_Func");
    TriggerEnable(gt_ZombieTKSWavesLargeMix, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesLargeMix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Zombie (180)
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesZombie180_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto88ED71B7_ae = 8;
    int auto88ED71B7_var;
    int autoD98276CC_ae;
    int autoD98276CC_var;
    int autoC03D13D0_ae;
    int autoC03D13D0_var;
    int autoF5C4B3C4_ae;
    int autoF5C4B3C4_var;
    int autoC77A871B_ae;
    int autoC77A871B_var;
    int auto3901038E_ae;
    int auto3901038E_var;
    int autoF1589987_ae;
    int autoF1589987_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 250))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto88ED71B7_var = 1;
    for ( ; auto88ED71B7_var <= auto88ED71B7_ae; auto88ED71B7_var += 1 ) {
        if ((PlayerStatus(auto88ED71B7_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(auto88ED71B7_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/8DA2A285"));
        autoD98276CC_ae = gv_tKSZombieAmount;
        autoD98276CC_var = 1;
        for ( ; autoD98276CC_var <= autoD98276CC_ae; autoD98276CC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoC03D13D0_ae = gv_tKSZombieAmount;
        autoC03D13D0_var = 1;
        for ( ; autoC03D13D0_var <= autoC03D13D0_ae; autoC03D13D0_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoF5C4B3C4_ae = gv_tKSZombieAmount;
        autoF5C4B3C4_var = 1;
        for ( ; autoF5C4B3C4_var <= autoF5C4B3C4_ae; autoF5C4B3C4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoC77A871B_ae = gv_tKSZombieAmount;
        autoC77A871B_var = 1;
        for ( ; autoC77A871B_var <= autoC77A871B_ae; autoC77A871B_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        auto3901038E_ae = gv_tKSZombieAmount;
        auto3901038E_var = 1;
        for ( ; auto3901038E_var <= auto3901038E_ae; auto3901038E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoF1589987_ae = gv_tKSZombieAmount;
        autoF1589987_var = 1;
        for ( ; autoF1589987_var <= autoF1589987_ae; autoF1589987_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerran", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 102);
            gv_zombielife = (gv_zombielife / 100);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/A31F5425")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/E76E58E8"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesZombie180_Init () {
    gt_ZombieTKSWavesZombie180 = TriggerCreate("gt_ZombieTKSWavesZombie180_Func");
    TriggerEnable(gt_ZombieTKSWavesZombie180, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesZombie180, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves BurrowMix
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesBurrowMix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto540200AF_ae = 8;
    int auto540200AF_var;
    const int auto522D5C55_ae = 25;
    int auto522D5C55_var;
    const int autoF5BFF226_ae = 95;
    int autoF5BFF226_var;
    const int autoA9EF99C0_ae = 195;
    int autoA9EF99C0_var;
    const int auto3BEBBEE9_ae = 297;
    int auto3BEBBEE9_var;
    const int auto833157FF_ae = 395;
    int auto833157FF_var;
    const int auto7D71BB88_ae = 495;
    int auto7D71BB88_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto540200AF_var = 1;
    for ( ; auto540200AF_var <= auto540200AF_ae; auto540200AF_var += 1 ) {
        if ((PlayerStatus(auto540200AF_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(auto540200AF_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/D6BA0EF5"));
        auto522D5C55_var = 1;
        for ( ; auto522D5C55_var <= auto522D5C55_ae; auto522D5C55_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto522D5C55_var))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
        autoF5BFF226_var = 86;
        for ( ; autoF5BFF226_var <= autoF5BFF226_ae; autoF5BFF226_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoF5BFF226_var))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
        autoA9EF99C0_var = 161;
        for ( ; autoA9EF99C0_var <= autoA9EF99C0_ae; autoA9EF99C0_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoA9EF99C0_var))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
        auto3BEBBEE9_var = 286;
        for ( ; auto3BEBBEE9_var <= auto3BEBBEE9_ae; auto3BEBBEE9_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto3BEBBEE9_var))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
        auto833157FF_var = 381;
        for ( ; auto833157FF_var <= auto833157FF_ae; auto833157FF_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, 9, PointFromName(("Point " + IntToString(auto833157FF_var))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
        auto7D71BB88_var = 481;
        for ( ; auto7D71BB88_var <= auto7D71BB88_ae; auto7D71BB88_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromName(("Point " + IntToString(auto7D71BB88_var))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 102);
            gv_zombielife = (gv_zombielife / 100);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/5C5D30C8")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/C4B886F9"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesBurrowMix_Init () {
    gt_ZombieTKSWavesBurrowMix = TriggerCreate("gt_ZombieTKSWavesBurrowMix_Func");
    TriggerEnable(gt_ZombieTKSWavesBurrowMix, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesBurrowMix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves MegaMix
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesMegaMix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBC6F339F_ae = 8;
    int autoBC6F339F_var;
    const int auto151E629A_ae = 8;
    int auto151E629A_var;
    const int autoF17317AE_ae = 3;
    int autoF17317AE_var;
    const int auto588CB338_ae = 2;
    int auto588CB338_var;
    const int autoC52E451F_ae = 2;
    int autoC52E451F_var;
    const int auto514A3F71_ae = 5;
    int auto514A3F71_var;
    const int autoC600548B_ae = 5;
    int autoC600548B_var;
    const int autoFA5C0378_ae = 2;
    int autoFA5C0378_var;
    const int autoF53E4B9C_ae = 1;
    int autoF53E4B9C_var;
    const int auto9E6DD6D1_ae = 1;
    int auto9E6DD6D1_var;
    const int autoBEB7E9DC_ae = 3;
    int autoBEB7E9DC_var;
    const int auto558A6DCC_ae = 2;
    int auto558A6DCC_var;
    const int auto2D3E1E25_ae = 2;
    int auto2D3E1E25_var;
    const int auto592F9AB4_ae = 5;
    int auto592F9AB4_var;
    const int autoACC81155_ae = 5;
    int autoACC81155_var;
    const int auto12310B6A_ae = 1;
    int auto12310B6A_var;
    const int auto5A3F65B6_ae = 1;
    int auto5A3F65B6_var;
    const int auto9059FA4E_ae = 1;
    int auto9059FA4E_var;
    const int auto7DE587A2_ae = 3;
    int auto7DE587A2_var;
    const int auto2538D5DD_ae = 2;
    int auto2538D5DD_var;
    const int autoF5A7EF28_ae = 2;
    int autoF5A7EF28_var;
    const int auto708E913E_ae = 5;
    int auto708E913E_var;
    const int auto17DEA109_ae = 5;
    int auto17DEA109_var;
    const int auto156DB1F7_ae = 1;
    int auto156DB1F7_var;
    const int autoEDF5A282_ae = 1;
    int autoEDF5A282_var;
    const int autoD4F6241B_ae = 1;
    int autoD4F6241B_var;
    const int auto1B1F96A6_ae = 3;
    int auto1B1F96A6_var;
    const int autoB6617646_ae = 2;
    int autoB6617646_var;
    const int auto75904D19_ae = 2;
    int auto75904D19_var;
    const int auto7754260A_ae = 5;
    int auto7754260A_var;
    const int auto6D6582CC_ae = 5;
    int auto6D6582CC_var;
    const int auto465DFFEA_ae = 1;
    int auto465DFFEA_var;
    const int auto512E0197_ae = 1;
    int auto512E0197_var;
    const int auto0DD8F9C6_ae = 1;
    int auto0DD8F9C6_var;
    const int autoB4BC8FE5_ae = 3;
    int autoB4BC8FE5_var;
    const int autoBFBB771E_ae = 2;
    int autoBFBB771E_var;
    const int auto74B39A67_ae = 2;
    int auto74B39A67_var;
    const int auto2693A0AC_ae = 5;
    int auto2693A0AC_var;
    const int auto8C30522E_ae = 5;
    int auto8C30522E_var;
    const int auto529E6FB2_ae = 1;
    int auto529E6FB2_var;
    const int autoDACFD680_ae = 1;
    int autoDACFD680_var;
    const int auto3B1C4475_ae = 1;
    int auto3B1C4475_var;
    const int auto5D57C3A8_ae = 3;
    int auto5D57C3A8_var;
    const int autoE11959E2_ae = 2;
    int autoE11959E2_var;
    const int auto46C36533_ae = 2;
    int auto46C36533_var;
    const int auto65B9C896_ae = 5;
    int auto65B9C896_var;
    const int autoD457AD91_ae = 5;
    int autoD457AD91_var;
    const int auto225FC769_ae = 1;
    int auto225FC769_var;
    const int auto08ED51AB_ae = 1;
    int auto08ED51AB_var;
    const int autoC177A568_ae = 1;
    int autoC177A568_var;
    unitgroup autoE60FE720_g;
    int autoE60FE720_u;
    unit autoE60FE720_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC6F339F_var = 1;
    for ( ; autoBC6F339F_var <= autoBC6F339F_ae; autoBC6F339F_var += 1 ) {
        if ((PlayerStatus(autoBC6F339F_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(autoBC6F339F_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/EB59FF7B"));
        auto151E629A_var = 1;
        for ( ; auto151E629A_var <= auto151E629A_ae; auto151E629A_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[auto151E629A_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[auto151E629A_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        autoF17317AE_var = 1;
        for ( ; autoF17317AE_var <= autoF17317AE_ae; autoF17317AE_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto588CB338_var = 1;
        for ( ; auto588CB338_var <= auto588CB338_ae; auto588CB338_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoC52E451F_var = 1;
        for ( ; autoC52E451F_var <= autoC52E451F_ae; autoC52E451F_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto514A3F71_var = 1;
        for ( ; auto514A3F71_var <= auto514A3F71_ae; auto514A3F71_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoC600548B_var = 1;
        for ( ; autoC600548B_var <= autoC600548B_ae; autoC600548B_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoFA5C0378_var = 1;
        for ( ; autoFA5C0378_var <= autoFA5C0378_ae; autoFA5C0378_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoF53E4B9C_var = 1;
        for ( ; autoF53E4B9C_var <= autoF53E4B9C_ae; autoF53E4B9C_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }
        auto9E6DD6D1_var = 1;
        for ( ; auto9E6DD6D1_var <= auto9E6DD6D1_ae; auto9E6DD6D1_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        autoBEB7E9DC_var = 1;
        for ( ; autoBEB7E9DC_var <= autoBEB7E9DC_ae; autoBEB7E9DC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto558A6DCC_var = 1;
        for ( ; auto558A6DCC_var <= auto558A6DCC_ae; auto558A6DCC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto2D3E1E25_var = 1;
        for ( ; auto2D3E1E25_var <= auto2D3E1E25_ae; auto2D3E1E25_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto592F9AB4_var = 1;
        for ( ; auto592F9AB4_var <= auto592F9AB4_ae; auto592F9AB4_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoACC81155_var = 1;
        for ( ; autoACC81155_var <= autoACC81155_ae; autoACC81155_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto12310B6A_var = 1;
        for ( ; auto12310B6A_var <= auto12310B6A_ae; auto12310B6A_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto5A3F65B6_var = 1;
        for ( ; auto5A3F65B6_var <= auto5A3F65B6_ae; auto5A3F65B6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }
        auto9059FA4E_var = 1;
        for ( ; auto9059FA4E_var <= auto9059FA4E_ae; auto9059FA4E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        auto7DE587A2_var = 1;
        for ( ; auto7DE587A2_var <= auto7DE587A2_ae; auto7DE587A2_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto2538D5DD_var = 1;
        for ( ; auto2538D5DD_var <= auto2538D5DD_ae; auto2538D5DD_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        autoF5A7EF28_var = 1;
        for ( ; autoF5A7EF28_var <= autoF5A7EF28_ae; autoF5A7EF28_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto708E913E_var = 1;
        for ( ; auto708E913E_var <= auto708E913E_ae; auto708E913E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto17DEA109_var = 1;
        for ( ; auto17DEA109_var <= auto17DEA109_ae; auto17DEA109_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto156DB1F7_var = 1;
        for ( ; auto156DB1F7_var <= auto156DB1F7_ae; auto156DB1F7_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoEDF5A282_var = 1;
        for ( ; autoEDF5A282_var <= autoEDF5A282_ae; autoEDF5A282_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }
        autoD4F6241B_var = 1;
        for ( ; autoD4F6241B_var <= autoD4F6241B_ae; autoD4F6241B_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(195972330));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        auto1B1F96A6_var = 1;
        for ( ; auto1B1F96A6_var <= auto1B1F96A6_ae; auto1B1F96A6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoB6617646_var = 1;
        for ( ; autoB6617646_var <= autoB6617646_ae; autoB6617646_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto75904D19_var = 1;
        for ( ; auto75904D19_var <= auto75904D19_ae; auto75904D19_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto7754260A_var = 1;
        for ( ; auto7754260A_var <= auto7754260A_ae; auto7754260A_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto6D6582CC_var = 1;
        for ( ; auto6D6582CC_var <= auto6D6582CC_ae; auto6D6582CC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto465DFFEA_var = 1;
        for ( ; auto465DFFEA_var <= auto465DFFEA_ae; auto465DFFEA_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto512E0197_var = 1;
        for ( ; auto512E0197_var <= auto512E0197_ae; auto512E0197_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }
        auto0DD8F9C6_var = 1;
        for ( ; auto0DD8F9C6_var <= auto0DD8F9C6_ae; auto0DD8F9C6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        autoB4BC8FE5_var = 1;
        for ( ; autoB4BC8FE5_var <= autoB4BC8FE5_ae; autoB4BC8FE5_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoBFBB771E_var = 1;
        for ( ; autoBFBB771E_var <= autoBFBB771E_ae; autoBFBB771E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto74B39A67_var = 1;
        for ( ; auto74B39A67_var <= auto74B39A67_ae; auto74B39A67_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto2693A0AC_var = 1;
        for ( ; auto2693A0AC_var <= auto2693A0AC_ae; auto2693A0AC_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        auto8C30522E_var = 1;
        for ( ; auto8C30522E_var <= auto8C30522E_ae; auto8C30522E_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto529E6FB2_var = 1;
        for ( ; auto529E6FB2_var <= auto529E6FB2_ae; auto529E6FB2_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        autoDACFD680_var = 1;
        for ( ; autoDACFD680_var <= autoDACFD680_ae; autoDACFD680_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }
        auto3B1C4475_var = 1;
        for ( ; auto3B1C4475_var <= auto3B1C4475_ae; auto3B1C4475_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1886480028));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 10));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 10));
        auto5D57C3A8_var = 1;
        for ( ; auto5D57C3A8_var <= auto5D57C3A8_ae; auto5D57C3A8_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoE11959E2_var = 1;
        for ( ; autoE11959E2_var <= autoE11959E2_ae; autoE11959E2_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto46C36533_var = 1;
        for ( ; auto46C36533_var <= auto46C36533_ae; auto46C36533_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        auto65B9C896_var = 1;
        for ( ; auto65B9C896_var <= auto65B9C896_ae; auto65B9C896_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        autoD457AD91_var = 1;
        for ( ; autoD457AD91_var <= autoD457AD91_ae; autoD457AD91_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto225FC769_var = 1;
        for ( ; auto225FC769_var <= auto225FC769_ae; auto225FC769_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 2));
        }
        auto08ED51AB_var = 1;
        for ( ; auto08ED51AB_var <= auto08ED51AB_ae; auto08ED51AB_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 5));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 5));
        }
        autoC177A568_var = 1;
        for ( ; autoC177A568_var <= autoC177A568_ae; autoC177A568_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife * 8));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife * 8));
        }

        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 51);
            gv_zombielife = (gv_zombielife / 50);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        autoE60FE720_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
        autoE60FE720_u = UnitGroupCount(autoE60FE720_g, c_unitCountAll);
        for (;; autoE60FE720_u -= 1) {
            autoE60FE720_var = UnitGroupUnitFromEnd(autoE60FE720_g, autoE60FE720_u);
            if (autoE60FE720_var == null) { break; }
            UnitRemove(autoE60FE720_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/EE25FF64")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/A772A147"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesMegaMix_Init () {
    gt_ZombieTKSWavesMegaMix = TriggerCreate("gt_ZombieTKSWavesMegaMix_Func");
    TriggerEnable(gt_ZombieTKSWavesMegaMix, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesMegaMix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Speedling
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesSpeedling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4C2AC183_ae = 8;
    int auto4C2AC183_var;
    const int auto8AF0D22F_ae = 8;
    int auto8AF0D22F_var;
    int auto4800CCFA_ae;
    int auto4800CCFA_var;
    int autoFC3179FE_ae;
    int autoFC3179FE_var;
    int auto8B1200E6_ae;
    int auto8B1200E6_var;
    int auto7114A9F7_ae;
    int auto7114A9F7_var;
    int auto3AEB719D_ae;
    int auto3AEB719D_var;
    int auto9D443E18_ae;
    int auto9D443E18_var;
    unitgroup autoBB45731B_g;
    int autoBB45731B_u;
    unit autoBB45731B_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 175))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C2AC183_var = 1;
    for ( ; auto4C2AC183_var <= auto4C2AC183_ae; auto4C2AC183_var += 1 ) {
        if ((PlayerStatus(auto4C2AC183_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(auto4C2AC183_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/CCFA0825"));
        auto8AF0D22F_var = 1;
        for ( ; auto8AF0D22F_var <= auto8AF0D22F_ae; auto8AF0D22F_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[auto8AF0D22F_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[auto8AF0D22F_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        auto4800CCFA_ae = gv_tKSZombieAmount;
        auto4800CCFA_var = 1;
        for ( ; auto4800CCFA_var <= auto4800CCFA_ae; auto4800CCFA_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoFC3179FE_ae = gv_tKSZombieAmount;
        autoFC3179FE_var = 1;
        for ( ; autoFC3179FE_var <= autoFC3179FE_ae; autoFC3179FE_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto8B1200E6_ae = gv_tKSZombieAmount;
        auto8B1200E6_var = 1;
        for ( ; auto8B1200E6_var <= auto8B1200E6_ae; auto8B1200E6_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        Wait(0.1, c_timeGame);
        auto7114A9F7_ae = gv_tKSZombieAmount;
        auto7114A9F7_var = 1;
        for ( ; auto7114A9F7_var <= auto7114A9F7_ae; auto7114A9F7_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        Wait(0.1, c_timeGame);
        auto3AEB719D_ae = gv_tKSZombieAmount;
        auto3AEB719D_var = 1;
        for ( ; auto3AEB719D_var <= auto3AEB719D_ae; auto3AEB719D_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        Wait(0.1, c_timeGame);
        auto9D443E18_ae = gv_tKSZombieAmount;
        auto9D443E18_var = 1;
        for ( ; auto9D443E18_var <= auto9D443E18_ae; auto9D443E18_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZergling", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zombielife / 2));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (gv_zombielife / 2));
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 103);
            gv_zombielife = (gv_zombielife / 100);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        autoBB45731B_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        autoBB45731B_u = UnitGroupCount(autoBB45731B_g, c_unitCountAll);
        for (;; autoBB45731B_u -= 1) {
            autoBB45731B_var = UnitGroupUnitFromEnd(autoBB45731B_g, autoBB45731B_u);
            if (autoBB45731B_var == null) { break; }
            UnitRemove(autoBB45731B_var);
        }
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/8F88F21F")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0E1C475D"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesSpeedling_Init () {
    gt_ZombieTKSWavesSpeedling = TriggerCreate("gt_ZombieTKSWavesSpeedling_Func");
    TriggerEnable(gt_ZombieTKSWavesSpeedling, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesSpeedling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Ghouls
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesGhouls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE7433886_ae = 6;
    int autoE7433886_var;
    int auto2255F21D_ae;
    int auto2255F21D_var;
    int auto7D99D62F_ae;
    int auto7D99D62F_var;
    int auto918EE97D_ae;
    int auto918EE97D_var;
    int autoD192DCDF_ae;
    int autoD192DCDF_var;
    int autoA25D7B71_ae;
    int autoA25D7B71_var;
    int autoAD452569_ae;
    int autoAD452569_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) < 200))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7433886_var = 1;
    for ( ; autoE7433886_var <= autoE7433886_ae; autoE7433886_var += 1 ) {
        if ((PlayerStatus(autoE7433886_var) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(autoE7433886_var, c_playerPropMinerals, c_playerPropOperAdd, (gv_wave * 10));
        }

    }
    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 100) && (gv_wave != 110) && (gv_wave != 120) && (gv_wave != 130) && (gv_wave != 140) && (gv_wave != 150) && (gv_wave != 160)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/97D50A13"));
        auto2255F21D_ae = gv_tKSZombieAmount;
        auto2255F21D_var = 1;
        for ( ; auto2255F21D_var <= auto2255F21D_ae; auto2255F21D_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghoul", 0, 9, PointFromId(1330477819));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto7D99D62F_ae = gv_tKSZombieAmount;
        auto7D99D62F_var = 1;
        for ( ; auto7D99D62F_var <= auto7D99D62F_ae; auto7D99D62F_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghoul", 0, 9, PointFromId(1727458775));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        auto918EE97D_ae = gv_tKSZombieAmount;
        auto918EE97D_var = 1;
        for ( ; auto918EE97D_var <= auto918EE97D_ae; auto918EE97D_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghoul", 0, 9, PointFromId(252796511));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoD192DCDF_ae = gv_tKSZombieAmount;
        autoD192DCDF_var = 1;
        for ( ; autoD192DCDF_var <= autoD192DCDF_ae; autoD192DCDF_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghoul", 0, 9, PointFromId(195972330));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoA25D7B71_ae = gv_tKSZombieAmount;
        autoA25D7B71_var = 1;
        for ( ; autoA25D7B71_var <= autoA25D7B71_ae; autoA25D7B71_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghoul", 0, 9, PointFromId(1443602122));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        autoAD452569_ae = gv_tKSZombieAmount;
        autoAD452569_var = 1;
        for ( ; autoAD452569_var <= autoAD452569_ae; autoAD452569_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghoul", 0, 9, PointFromId(1886480028));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, gv_zombielife);
        }
        Wait(0.1, c_timeGame);
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = (500000.0 / gv_zombieCapVariable);
        }
        else {
            gv_zombielife = (gv_zombielife * 103);
            gv_zombielife = (gv_zombielife / 100);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/396E75FA")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/D67E6825"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesGhouls_Init () {
    gt_ZombieTKSWavesGhouls = TriggerCreate("gt_ZombieTKSWavesGhouls_Func");
    TriggerEnable(gt_ZombieTKSWavesGhouls, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesGhouls, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie TKSWaves Brutalisk
//--------------------------------------------------------------------------------------------------
bool gt_ZombieTKSWavesBrutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto63570C6C_ae = 8;
    int auto63570C6C_var;
    unitgroup autoFC815D97_g;
    int autoFC815D97_u;
    unit autoFC815D97_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_zombies, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = (gv_wave + 1);
    gv_eXPValue = (gv_eXPValue + 1);
    BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, IntToText(gv_wave));
    BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
    if ((gv_wave != 5) && (gv_wave != 10) && (gv_wave != 15) && (gv_wave != 20) && (gv_wave != 25) && (gv_wave != 30) && (gv_wave != 35) && (gv_wave != 40) && (gv_wave != 45) && (gv_wave != 50) && (gv_wave != 55) && (gv_wave != 60) && (gv_wave != 65) && (gv_wave != 70) && (gv_wave != 75) && (gv_wave != 80) && (gv_wave != 85) && (gv_wave != 90) && (gv_wave != 95) && (gv_wave != 115) && (gv_wave != 160) && (gv_wave != 249) && (gv_wave != 349) && (gv_wave != 998)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0798D070"));
        auto63570C6C_var = 1;
        for ( ; auto63570C6C_var <= auto63570C6C_ae; auto63570C6C_var += 1 ) {
            if ((UnitIsAlive(gv_playerInfo[auto63570C6C_var].lv_hero) == true)) {
                UnitXPAddXP(gv_playerInfo[auto63570C6C_var].lv_hero, null, (gv_eXPValue / 5));
            }

        }
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        Wait(0.1, c_timeGame);
        autoFC815D97_g = gv_zombies;
        autoFC815D97_u = UnitGroupCount(autoFC815D97_g, c_unitCountAll);
        for (;; autoFC815D97_u -= 1) {
            autoFC815D97_var = UnitGroupUnitFromEnd(autoFC815D97_g, autoFC815D97_u);
            if (autoFC815D97_var == null) { break; }
            UnitSetPropertyFixed(autoFC815D97_var, c_unitPropLifeMax, gv_zombielife);
            UnitSetPropertyFixed(autoFC815D97_var, c_unitPropLife, gv_zombielife);
            UnitSetPropertyFixed(autoFC815D97_var, c_unitPropBaseMovementSpeed, (UnitGetPropertyFixed(autoFC815D97_var, c_unitPropBaseMovementSpeed, c_unitPropNormal) + gv_zombiespeed));
        }
        if ((gv_zombielife >= 500000)) {
            gv_zombielife = 500000;
        }
        else {
            gv_zombielife = (gv_zombielife * 11);
            gv_zombielife = (gv_zombielife / 10);
        }
        gv_tKSZombieAmount = (gv_tKSZombieAmount + gv_tKSZombieAmountIncrease);
        BoardItemSetText(gv_waveboard, 2, 2, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 2, 16);
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        BoardItemSetText(gv_waveboard, 2, c_boardRowHeader, (IntToText(gv_wave) + StringExternal("Param/Value/A268363C")));
        BoardItemSetFontSize(gv_waveboard, 2, c_boardRowHeader, 16);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/711366FA"));
        Wait(5.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieTKSWavesBrutalisk_Init () {
    gt_ZombieTKSWavesBrutalisk = TriggerCreate("gt_ZombieTKSWavesBrutalisk_Func");
    TriggerEnable(gt_ZombieTKSWavesBrutalisk, false);
    TriggerAddEventTimePeriodic(gt_ZombieTKSWavesBrutalisk, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZombieMax
//--------------------------------------------------------------------------------------------------
bool gt_ZombieMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 30;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieMax_Init () {
    gt_ZombieMax = TriggerCreate("gt_ZombieMax_Func");
    TriggerAddEventTimePeriodic(gt_ZombieMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingMax
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 29))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 29;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingMax_Init () {
    gt_ZerglingMax = TriggerCreate("gt_ZerglingMax_Func");
    TriggerEnable(gt_ZerglingMax, false);
    TriggerAddEventTimePeriodic(gt_ZerglingMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UltraMax
//--------------------------------------------------------------------------------------------------
bool gt_UltraMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 27))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 27;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraMax_Init () {
    gt_UltraMax = TriggerCreate("gt_UltraMax_Func");
    TriggerEnable(gt_UltraMax, false);
    TriggerAddEventTimePeriodic(gt_UltraMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LocustsMax
//--------------------------------------------------------------------------------------------------
bool gt_LocustsMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 24))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 24;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LocustsMax_Init () {
    gt_LocustsMax = TriggerCreate("gt_LocustsMax_Func");
    TriggerEnable(gt_LocustsMax, false);
    TriggerAddEventTimePeriodic(gt_LocustsMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HydraMax
//--------------------------------------------------------------------------------------------------
bool gt_HydraMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 16;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydraMax_Init () {
    gt_HydraMax = TriggerCreate("gt_HydraMax_Func");
    TriggerEnable(gt_HydraMax, false);
    TriggerAddEventTimePeriodic(gt_HydraMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BanelingMax
//--------------------------------------------------------------------------------------------------
bool gt_BanelingMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 15;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingMax_Init () {
    gt_BanelingMax = TriggerCreate("gt_BanelingMax_Func");
    TriggerEnable(gt_BanelingMax, false);
    TriggerAddEventTimePeriodic(gt_BanelingMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: QueenMax
//--------------------------------------------------------------------------------------------------
bool gt_QueenMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 14;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenMax_Init () {
    gt_QueenMax = TriggerCreate("gt_QueenMax_Func");
    TriggerEnable(gt_QueenMax, false);
    TriggerAddEventTimePeriodic(gt_QueenMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PrimalMax
//--------------------------------------------------------------------------------------------------
bool gt_PrimalMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 25;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalMax_Init () {
    gt_PrimalMax = TriggerCreate("gt_PrimalMax_Func");
    TriggerEnable(gt_PrimalMax, false);
    TriggerAddEventTimePeriodic(gt_PrimalMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuperBanelingMax
//--------------------------------------------------------------------------------------------------
bool gt_SuperBanelingMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 13))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 13;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuperBanelingMax_Init () {
    gt_SuperBanelingMax = TriggerCreate("gt_SuperBanelingMax_Func");
    TriggerEnable(gt_SuperBanelingMax, false);
    TriggerAddEventTimePeriodic(gt_SuperBanelingMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GhoulMax
//--------------------------------------------------------------------------------------------------
bool gt_GhoulMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 25;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhoulMax_Init () {
    gt_GhoulMax = TriggerCreate("gt_GhoulMax_Func");
    TriggerEnable(gt_GhoulMax, false);
    TriggerAddEventTimePeriodic(gt_GhoulMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BrutaliskMax
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tKSZombieAmount >= 35))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tKSZombieAmount = 35;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskMax_Init () {
    gt_BrutaliskMax = TriggerCreate("gt_BrutaliskMax_Func");
    TriggerEnable(gt_BrutaliskMax, false);
    TriggerAddEventTimePeriodic(gt_BrutaliskMax, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add units to counter
//--------------------------------------------------------------------------------------------------
bool gt_Addunitstocounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 1.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 9, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_zombies, EventUnit()) == false)) {
        UnitGroupAdd(gv_zombies, EventUnit());
        BoardItemSetText(gv_waveboard, 2, 1, IntToText(UnitGroupCount(gv_zombies, c_unitCountAlive)));
        BoardItemSetFontSize(gv_waveboard, 2, 1, 16);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addunitstocounter_Init () {
    gt_Addunitstocounter = TriggerCreate("gt_Addunitstocounter_Func");
    TriggerAddEventUnitRegion(gt_Addunitstocounter, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove units From Zombies
//--------------------------------------------------------------------------------------------------
bool gt_RemoveunitsFromZombies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1F5B842D_g;
    int auto1F5B842D_u;
    unit auto1F5B842D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1F5B842D_g = gv_zombies;
    auto1F5B842D_u = UnitGroupCount(auto1F5B842D_g, c_unitCountAll);
    for (;; auto1F5B842D_u -= 1) {
        auto1F5B842D_var = UnitGroupUnitFromEnd(auto1F5B842D_g, auto1F5B842D_u);
        if (auto1F5B842D_var == null) { break; }
        if ((UnitGetOwner(auto1F5B842D_var) != 9)) {
            UnitGroupRemove(gv_zombies, auto1F5B842D_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveunitsFromZombies_Init () {
    gt_RemoveunitsFromZombies = TriggerCreate("gt_RemoveunitsFromZombies_Func");
    TriggerAddEventTimePeriodic(gt_RemoveunitsFromZombies, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbominationLevel
//--------------------------------------------------------------------------------------------------
bool gt_AbominationLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Abomination"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitXPAddXP(libNtve_gf_KillingUnit(), "AbominationLevel", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbominationLevel_Init () {
    gt_AbominationLevel = TriggerCreate("gt_AbominationLevel_Func");
    TriggerAddEventUnitDied(gt_AbominationLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave5-Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_Wave5Zerglings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2DEF9425_g;
    int auto2DEF9425_u;
    unit auto2DEF9425_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/785DAF68"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalZergling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalZergling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalZergling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalZergling", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto2DEF9425_g = gv_zombies;
    auto2DEF9425_u = UnitGroupCount(auto2DEF9425_g, c_unitCountAll);
    for (;; auto2DEF9425_u -= 1) {
        auto2DEF9425_var = UnitGroupUnitFromEnd(auto2DEF9425_g, auto2DEF9425_u);
        if (auto2DEF9425_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave5Zerglings_Init () {
    gt_Wave5Zerglings = TriggerCreate("gt_Wave5Zerglings_Func");
    TriggerAddEventTimePeriodic(gt_Wave5Zerglings, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave10-Roach+Zergling
//--------------------------------------------------------------------------------------------------
bool gt_Wave10RoachZergling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1A25C192_ae = 6;
    int auto1A25C192_var;
    unitgroup auto07852E8A_g;
    int auto07852E8A_u;
    unit auto07852E8A_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1A25C192_var = 1;
    for ( ; auto1A25C192_var <= auto1A25C192_ae; auto1A25C192_var += 1 ) {
        if ((PlayerGetPropertyInt(auto1A25C192_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto1A25C192_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/18B5676B"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalRoach", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalRoach", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto07852E8A_g = gv_zombies;
    auto07852E8A_u = UnitGroupCount(auto07852E8A_g, c_unitCountAll);
    for (;; auto07852E8A_u -= 1) {
        auto07852E8A_var = UnitGroupUnitFromEnd(auto07852E8A_g, auto07852E8A_u);
        if (auto07852E8A_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave10RoachZergling_Init () {
    gt_Wave10RoachZergling = TriggerCreate("gt_Wave10RoachZergling_Func");
    TriggerAddEventTimePeriodic(gt_Wave10RoachZergling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave15-Roach+Zergling
//--------------------------------------------------------------------------------------------------
bool gt_Wave15RoachZergling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto65D5D932_ae = 6;
    int auto65D5D932_var;
    unitgroup auto9FC88742_g;
    int auto9FC88742_u;
    unit auto9FC88742_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto65D5D932_var = 1;
    for ( ; auto65D5D932_var <= auto65D5D932_ae; auto65D5D932_var += 1 ) {
        if ((PlayerGetPropertyInt(auto65D5D932_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto65D5D932_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/4612ABE3"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Zergling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "Zergling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Zergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Zergling", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto9FC88742_g = gv_zombies;
    auto9FC88742_u = UnitGroupCount(auto9FC88742_g, c_unitCountAll);
    for (;; auto9FC88742_u -= 1) {
        auto9FC88742_var = UnitGroupUnitFromEnd(auto9FC88742_g, auto9FC88742_u);
        if (auto9FC88742_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave15RoachZergling_Init () {
    gt_Wave15RoachZergling = TriggerCreate("gt_Wave15RoachZergling_Func");
    TriggerAddEventTimePeriodic(gt_Wave15RoachZergling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave20-Queens
//--------------------------------------------------------------------------------------------------
bool gt_Wave20Queens_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF9D8A9B2_ae = 6;
    int autoF9D8A9B2_var;
    unitgroup auto97B19570_g;
    int auto97B19570_u;
    unit auto97B19570_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9D8A9B2_var = 1;
    for ( ; autoF9D8A9B2_var <= autoF9D8A9B2_ae; autoF9D8A9B2_var += 1 ) {
        if ((PlayerGetPropertyInt(autoF9D8A9B2_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoF9D8A9B2_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/6B00A3F4"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1330477819));
    Wait(0.25, c_timeGame);
    auto97B19570_g = gv_zombies;
    auto97B19570_u = UnitGroupCount(auto97B19570_g, c_unitCountAll);
    for (;; auto97B19570_u -= 1) {
        auto97B19570_var = UnitGroupUnitFromEnd(auto97B19570_g, auto97B19570_u);
        if (auto97B19570_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave20Queens_Init () {
    gt_Wave20Queens = TriggerCreate("gt_Wave20Queens_Func");
    TriggerAddEventTimePeriodic(gt_Wave20Queens, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave25-RandomZombies
//--------------------------------------------------------------------------------------------------
bool gt_Wave25RandomZombies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto38DE92C4_ae = 6;
    int auto38DE92C4_var;
    const int autoCDF72E4B_ae = 300;
    int autoCDF72E4B_var;
    unitgroup auto42C70ED3_g;
    int auto42C70ED3_u;
    unit auto42C70ED3_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38DE92C4_var = 1;
    for ( ; auto38DE92C4_var <= auto38DE92C4_ae; auto38DE92C4_var += 1 ) {
        if ((PlayerGetPropertyInt(auto38DE92C4_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto38DE92C4_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/158458BA"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_wave = 31;
    autoCDF72E4B_var = 1;
    for ( ; autoCDF72E4B_var <= autoCDF72E4B_ae; autoCDF72E4B_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoCDF72E4B_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 45.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 45.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto42C70ED3_g = gv_zombies;
    auto42C70ED3_u = UnitGroupCount(auto42C70ED3_g, c_unitCountAll);
    for (;; auto42C70ED3_u -= 1) {
        auto42C70ED3_var = UnitGroupUnitFromEnd(auto42C70ED3_g, auto42C70ED3_u);
        if (auto42C70ED3_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave25RandomZombies_Init () {
    gt_Wave25RandomZombies = TriggerCreate("gt_Wave25RandomZombies_Func");
    TriggerAddEventTimePeriodic(gt_Wave25RandomZombies, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave30-Hydralisk
//--------------------------------------------------------------------------------------------------
bool gt_Wave30Hydralisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA67D843A_ae = 6;
    int autoA67D843A_var;
    unitgroup auto360729B3_g;
    int auto360729B3_u;
    unit auto360729B3_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 35))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA67D843A_var = 1;
    for ( ; autoA67D843A_var <= autoA67D843A_ae; autoA67D843A_var += 1 ) {
        if ((PlayerGetPropertyInt(autoA67D843A_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoA67D843A_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/76F9DEE3"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto360729B3_g = gv_zombies;
    auto360729B3_u = UnitGroupCount(auto360729B3_g, c_unitCountAll);
    for (;; auto360729B3_u -= 1) {
        auto360729B3_var = UnitGroupUnitFromEnd(auto360729B3_g, auto360729B3_u);
        if (auto360729B3_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave30Hydralisk_Init () {
    gt_Wave30Hydralisk = TriggerCreate("gt_Wave30Hydralisk_Func");
    TriggerAddEventTimePeriodic(gt_Wave30Hydralisk, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave35-Zergling+Roach+Hydralisk+Queen
//--------------------------------------------------------------------------------------------------
bool gt_Wave35ZerglingRoachHydraliskQueen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto224A7896_ae = 6;
    int auto224A7896_var;
    unitgroup autoE4C1E2A1_g;
    int autoE4C1E2A1_u;
    unit autoE4C1E2A1_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 40))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto224A7896_var = 1;
    for ( ; auto224A7896_var <= auto224A7896_ae; auto224A7896_var += 1 ) {
        if ((PlayerGetPropertyInt(auto224A7896_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto224A7896_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/7F5B99F8"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 4), "PrimalZergling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 4), "PrimalZergling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, 9, PointFromId(1330477819));
    Wait(0.25, c_timeGame);
    autoE4C1E2A1_g = gv_zombies;
    autoE4C1E2A1_u = UnitGroupCount(autoE4C1E2A1_g, c_unitCountAll);
    for (;; autoE4C1E2A1_u -= 1) {
        autoE4C1E2A1_var = UnitGroupUnitFromEnd(autoE4C1E2A1_g, autoE4C1E2A1_u);
        if (autoE4C1E2A1_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave35ZerglingRoachHydraliskQueen_Init () {
    gt_Wave35ZerglingRoachHydraliskQueen = TriggerCreate("gt_Wave35ZerglingRoachHydraliskQueen_Func");
    TriggerAddEventTimePeriodic(gt_Wave35ZerglingRoachHydraliskQueen, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave40-Ultralisk
//--------------------------------------------------------------------------------------------------
bool gt_Wave40Ultralisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto91311AC1_ae = 6;
    int auto91311AC1_var;
    unitgroup auto8A5CFAC8_g;
    int auto8A5CFAC8_u;
    unit auto8A5CFAC8_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 45))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto91311AC1_var = 1;
    for ( ; auto91311AC1_var <= auto91311AC1_ae; auto91311AC1_var += 1 ) {
        if ((PlayerGetPropertyInt(auto91311AC1_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto91311AC1_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B5349BCA"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    Wait(0.25, c_timeGame);
    auto8A5CFAC8_g = gv_zombies;
    auto8A5CFAC8_u = UnitGroupCount(auto8A5CFAC8_g, c_unitCountAll);
    for (;; auto8A5CFAC8_u -= 1) {
        auto8A5CFAC8_var = UnitGroupUnitFromEnd(auto8A5CFAC8_g, auto8A5CFAC8_u);
        if (auto8A5CFAC8_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave40Ultralisk_Init () {
    gt_Wave40Ultralisk = TriggerCreate("gt_Wave40Ultralisk_Func");
    TriggerAddEventTimePeriodic(gt_Wave40Ultralisk, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave45-Baneling
//--------------------------------------------------------------------------------------------------
bool gt_Wave45Baneling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7066DDE7_ae = 6;
    int auto7066DDE7_var;
    unitgroup autoE235CCE2_g;
    int autoE235CCE2_u;
    unit autoE235CCE2_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7066DDE7_var = 1;
    for ( ; auto7066DDE7_var <= auto7066DDE7_ae; auto7066DDE7_var += 1 ) {
        if ((PlayerGetPropertyInt(auto7066DDE7_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto7066DDE7_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/E07ABE17"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    autoE235CCE2_g = gv_zombies;
    autoE235CCE2_u = UnitGroupCount(autoE235CCE2_g, c_unitCountAll);
    for (;; autoE235CCE2_u -= 1) {
        autoE235CCE2_var = UnitGroupUnitFromEnd(autoE235CCE2_g, autoE235CCE2_u);
        if (autoE235CCE2_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave45Baneling_Init () {
    gt_Wave45Baneling = TriggerCreate("gt_Wave45Baneling_Func");
    TriggerAddEventTimePeriodic(gt_Wave45Baneling, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave50-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach
//--------------------------------------------------------------------------------------------------
bool gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto457B58F3_ae = 6;
    int auto457B58F3_var;
    const int autoDABB2138_ae = 300;
    int autoDABB2138_var;
    unitgroup autoEECD6836_g;
    int autoEECD6836_u;
    unit autoEECD6836_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 55))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto457B58F3_var = 1;
    for ( ; auto457B58F3_var <= auto457B58F3_ae; auto457B58F3_var += 1 ) {
        if ((PlayerGetPropertyInt(auto457B58F3_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto457B58F3_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/3C38A14A"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_wave = 56;
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    autoDABB2138_var = 1;
    for ( ; autoDABB2138_var <= autoDABB2138_ae; autoDABB2138_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoDABB2138_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    autoEECD6836_g = gv_zombies;
    autoEECD6836_u = UnitGroupCount(autoEECD6836_g, c_unitCountAll);
    for (;; autoEECD6836_u -= 1) {
        autoEECD6836_var = UnitGroupUnitFromEnd(autoEECD6836_g, autoEECD6836_u);
        if (autoEECD6836_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach_Init () {
    gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach = TriggerCreate("gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach_Func");
    TriggerAddEventTimePeriodic(gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave55-Overlords
//--------------------------------------------------------------------------------------------------
bool gt_Wave55Overlords_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8B5BFABA_ae = 6;
    int auto8B5BFABA_var;
    unitgroup auto38F87130_g;
    int auto38F87130_u;
    unit auto38F87130_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 60))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B5BFABA_var = 1;
    for ( ; auto8B5BFABA_var <= auto8B5BFABA_ae; auto8B5BFABA_var += 1 ) {
        if ((PlayerGetPropertyInt(auto8B5BFABA_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto8B5BFABA_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/724BFDC7"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1330477819));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1727458775));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(252796511));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(195972330));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1443602122));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromId(1886480028));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (3750 * PlayerGroupCount(gf_HumanPlayers())));
    Wait(0.25, c_timeGame);
    auto38F87130_g = gv_zombies;
    auto38F87130_u = UnitGroupCount(auto38F87130_g, c_unitCountAll);
    for (;; auto38F87130_u -= 1) {
        auto38F87130_var = UnitGroupUnitFromEnd(auto38F87130_g, auto38F87130_u);
        if (auto38F87130_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave55Overlords_Init () {
    gt_Wave55Overlords = TriggerCreate("gt_Wave55Overlords_Func");
    TriggerAddEventTimePeriodic(gt_Wave55Overlords, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave60-RandomAll
//--------------------------------------------------------------------------------------------------
bool gt_Wave60RandomAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF1F1E05E_ae = 6;
    int autoF1F1E05E_var;
    const int autoDCD790C6_ae = 150;
    int autoDCD790C6_var;
    const int auto5A0FE139_ae = 200;
    int auto5A0FE139_var;
    const int auto4B2A3EFA_ae = 250;
    int auto4B2A3EFA_var;
    const int autoC06A337B_ae = 300;
    int autoC06A337B_var;
    const int autoA9CAE18F_ae = 305;
    int autoA9CAE18F_var;
    const int auto72113D72_ae = 308;
    int auto72113D72_var;
    const int auto62D4D057_ae = 335;
    int auto62D4D057_var;
    const int autoBA74A44F_ae = 400;
    int autoBA74A44F_var;
    const int autoBC2968D7_ae = 450;
    int autoBC2968D7_var;
    const int autoFA34775F_ae = 500;
    int autoFA34775F_var;
    unitgroup auto2E4827D2_g;
    int auto2E4827D2_u;
    unit auto2E4827D2_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 65))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF1F1E05E_var = 1;
    for ( ; autoF1F1E05E_var <= autoF1F1E05E_ae; autoF1F1E05E_var += 1 ) {
        if ((PlayerGetPropertyInt(autoF1F1E05E_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoF1F1E05E_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0F4FDD23"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_wave = 66;
    autoDCD790C6_var = 100;
    for ( ; autoDCD790C6_var <= autoDCD790C6_ae; autoDCD790C6_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoDCD790C6_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 85.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 85.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    auto5A0FE139_var = 150;
    for ( ; auto5A0FE139_var <= auto5A0FE139_ae; auto5A0FE139_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZerglingBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto5A0FE139_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 80.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 80.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZerglingBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto5A0FE139_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 80.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 80.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    auto4B2A3EFA_var = 200;
    for ( ; auto4B2A3EFA_var <= auto4B2A3EFA_ae; auto4B2A3EFA_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoachBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto4B2A3EFA_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 275.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 275.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    autoC06A337B_var = 250;
    for ( ; autoC06A337B_var <= autoC06A337B_ae; autoC06A337B_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoC06A337B_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 315.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 315.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    autoA9CAE18F_var = 301;
    for ( ; autoA9CAE18F_var <= autoA9CAE18F_ae; autoA9CAE18F_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "QueenBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoA9CAE18F_var))));
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    auto72113D72_var = 306;
    for ( ; auto72113D72_var <= auto72113D72_ae; auto72113D72_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltraliskBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto72113D72_var))));
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    auto62D4D057_var = 315;
    for ( ; auto62D4D057_var <= auto62D4D057_ae; auto62D4D057_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 9, PointFromName(("Point " + IntToString(auto62D4D057_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (1125 * PlayerGroupCount(gf_HumanPlayers())));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (1125 * PlayerGroupCount(gf_HumanPlayers())));
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    autoBA74A44F_var = 350;
    for ( ; autoBA74A44F_var <= autoBA74A44F_ae; autoBA74A44F_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoBA74A44F_var))));
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    autoBC2968D7_var = 400;
    for ( ; autoBC2968D7_var <= autoBC2968D7_ae; autoBC2968D7_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoBC2968D7_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 85.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 85.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    autoFA34775F_var = 450;
    for ( ; autoFA34775F_var <= autoFA34775F_ae; autoFA34775F_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZerglingBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoFA34775F_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 80.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 80.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalZerglingBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoFA34775F_var))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 80.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 80.0);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto2E4827D2_g = gv_zombies;
    auto2E4827D2_u = UnitGroupCount(auto2E4827D2_g, c_unitCountAll);
    for (;; auto2E4827D2_u -= 1) {
        auto2E4827D2_var = UnitGroupUnitFromEnd(auto2E4827D2_g, auto2E4827D2_u);
        if (auto2E4827D2_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave60RandomAll_Init () {
    gt_Wave60RandomAll = TriggerCreate("gt_Wave60RandomAll_Func");
    TriggerAddEventTimePeriodic(gt_Wave60RandomAll, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave65-Ravager
//--------------------------------------------------------------------------------------------------
bool gt_Wave65Ravager_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB53FD210_ae = 6;
    int autoB53FD210_var;
    unitgroup autoBF3065A0_g;
    int autoBF3065A0_u;
    unit autoBF3065A0_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 70))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB53FD210_var = 1;
    for ( ; autoB53FD210_var <= autoB53FD210_ae; autoB53FD210_var += 1 ) {
        if ((PlayerGetPropertyInt(autoB53FD210_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoB53FD210_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/DE82B408"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Ravager", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 3), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Ravager", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    autoBF3065A0_g = gv_zombies;
    autoBF3065A0_u = UnitGroupCount(autoBF3065A0_g, c_unitCountAll);
    for (;; autoBF3065A0_u -= 1) {
        autoBF3065A0_var = UnitGroupUnitFromEnd(autoBF3065A0_g, autoBF3065A0_u);
        if (autoBF3065A0_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave65Ravager_Init () {
    gt_Wave65Ravager = TriggerCreate("gt_Wave65Ravager_Func");
    TriggerAddEventTimePeriodic(gt_Wave65Ravager, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave70-T-Rex
//--------------------------------------------------------------------------------------------------
bool gt_Wave70TRex_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC5AF55B0_ae = 6;
    int autoC5AF55B0_var;
    unitgroup autoFEB51BB5_g;
    int autoFEB51BB5_u;
    unit autoFEB51BB5_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 75))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC5AF55B0_var = 1;
    for ( ; autoC5AF55B0_var <= autoC5AF55B0_ae; autoC5AF55B0_var += 1 ) {
        if ((PlayerGetPropertyInt(autoC5AF55B0_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoC5AF55B0_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/93EC7AEF"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    Wait(0.25, c_timeGame);
    autoFEB51BB5_g = gv_zombies;
    autoFEB51BB5_u = UnitGroupCount(autoFEB51BB5_g, c_unitCountAll);
    for (;; autoFEB51BB5_u -= 1) {
        autoFEB51BB5_var = UnitGroupUnitFromEnd(autoFEB51BB5_g, autoFEB51BB5_u);
        if (autoFEB51BB5_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave70TRex_Init () {
    gt_Wave70TRex = TriggerCreate("gt_Wave70TRex_Func");
    TriggerAddEventTimePeriodic(gt_Wave70TRex, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave75-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach+T-Rex
//--------------------------------------------------------------------------------------------------
bool gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6B8CC0AA_ae = 6;
    int auto6B8CC0AA_var;
    const int auto4E305447_ae = 300;
    int auto4E305447_var;
    unitgroup auto0CAAF324_g;
    int auto0CAAF324_u;
    unit auto0CAAF324_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 80))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B8CC0AA_var = 1;
    for ( ; auto6B8CC0AA_var <= auto6B8CC0AA_ae; auto6B8CC0AA_var += 1 ) {
        if ((PlayerGetPropertyInt(auto6B8CC0AA_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto6B8CC0AA_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/06C89989"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_wave = 81;
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    auto4E305447_var = 1;
    for ( ; auto4E305447_var <= auto4E305447_ae; auto4E305447_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto4E305447_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto0CAAF324_g = gv_zombies;
    auto0CAAF324_u = UnitGroupCount(auto0CAAF324_g, c_unitCountAll);
    for (;; auto0CAAF324_u -= 1) {
        auto0CAAF324_var = UnitGroupUnitFromEnd(auto0CAAF324_g, auto0CAAF324_u);
        if (auto0CAAF324_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex_Init () {
    gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex = TriggerCreate("gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex_Func");
    TriggerAddEventTimePeriodic(gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave80-Aberration
//--------------------------------------------------------------------------------------------------
bool gt_Wave80Aberration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD7DA26ED_ae = 6;
    int autoD7DA26ED_var;
    unitgroup autoF684B031_g;
    int autoF684B031_u;
    unit autoF684B031_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 85))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD7DA26ED_var = 1;
    for ( ; autoD7DA26ED_var <= autoD7DA26ED_ae; autoD7DA26ED_var += 1 ) {
        if ((PlayerGetPropertyInt(autoD7DA26ED_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoD7DA26ED_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/4F375C2C"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(1330477819));
    Wait(0.25, c_timeGame);
    autoF684B031_g = gv_zombies;
    autoF684B031_u = UnitGroupCount(autoF684B031_g, c_unitCountAll);
    for (;; autoF684B031_u -= 1) {
        autoF684B031_var = UnitGroupUnitFromEnd(autoF684B031_g, autoF684B031_u);
        if (autoF684B031_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave80Aberration_Init () {
    gt_Wave80Aberration = TriggerCreate("gt_Wave80Aberration_Func");
    TriggerAddEventTimePeriodic(gt_Wave80Aberration, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave85-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach+T-Rex+Abberation
//--------------------------------------------------------------------------------------------------
bool gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto519C5E2C_ae = 6;
    int auto519C5E2C_var;
    const int autoA5F52B0B_ae = 300;
    int autoA5F52B0B_var;
    unitgroup autoFEAA565B_g;
    int autoFEAA565B_u;
    unit autoFEAA565B_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 90))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto519C5E2C_var = 1;
    for ( ; auto519C5E2C_var <= auto519C5E2C_ae; auto519C5E2C_var += 1 ) {
        if ((PlayerGetPropertyInt(auto519C5E2C_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto519C5E2C_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/F4338F48"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_wave = 91;
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(195972330));
    autoA5F52B0B_var = 1;
    for ( ; autoA5F52B0B_var <= autoA5F52B0B_ae; autoA5F52B0B_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoA5F52B0B_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    autoFEAA565B_g = gv_zombies;
    autoFEAA565B_u = UnitGroupCount(autoFEAA565B_g, c_unitCountAll);
    for (;; autoFEAA565B_u -= 1) {
        autoFEAA565B_var = UnitGroupUnitFromEnd(autoFEAA565B_g, autoFEAA565B_u);
        if (autoFEAA565B_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation_Init () {
    gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation = TriggerCreate("gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation_Func");
    TriggerAddEventTimePeriodic(gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wave90-zombiemachine
//--------------------------------------------------------------------------------------------------
bool gt_wave90zombiemachine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB81BD995_ae = 6;
    int autoB81BD995_var;
    unitgroup auto346508C9_g;
    int auto346508C9_u;
    unit auto346508C9_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 95))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB81BD995_var = 1;
    for ( ; autoB81BD995_var <= autoB81BD995_ae; autoB81BD995_var += 1 ) {
        if ((PlayerGetPropertyInt(autoB81BD995_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoB81BD995_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/BE3161B2"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto346508C9_g = gv_zombies;
    auto346508C9_u = UnitGroupCount(auto346508C9_g, c_unitCountAll);
    for (;; auto346508C9_u -= 1) {
        auto346508C9_var = UnitGroupUnitFromEnd(auto346508C9_g, auto346508C9_u);
        if (auto346508C9_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_wave90zombiemachine_Init () {
    gt_wave90zombiemachine = TriggerCreate("gt_wave90zombiemachine_Func");
    TriggerAddEventTimePeriodic(gt_wave90zombiemachine, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave95-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach+T-Rex+Abberation+Mutalisk
//--------------------------------------------------------------------------------------------------
bool gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto46A9A453_ae = 6;
    int auto46A9A453_var;
    const int auto157D3155_ae = 300;
    int auto157D3155_var;
    unitgroup auto22EA5FA1_g;
    int auto22EA5FA1_u;
    unit auto22EA5FA1_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 100))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZombieTKSWavesLocusts, false);
    gv_wave = 101;
    while (!((UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < 65))) {
        Wait(1.0, c_timeGame);
    }
    auto46A9A453_var = 1;
    for ( ; auto46A9A453_var <= auto46A9A453_ae; auto46A9A453_var += 1 ) {
        if ((PlayerGetPropertyInt(auto46A9A453_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto46A9A453_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/95AD5072"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(195972330));
    auto157D3155_var = 1;
    for ( ; auto157D3155_var <= auto157D3155_ae; auto157D3155_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto157D3155_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto22EA5FA1_g = gv_zombies;
    auto22EA5FA1_u = UnitGroupCount(auto22EA5FA1_g, c_unitCountAll);
    for (;; auto22EA5FA1_u -= 1) {
        auto22EA5FA1_var = UnitGroupUnitFromEnd(auto22EA5FA1_g, auto22EA5FA1_u);
        if (auto22EA5FA1_var == null) { break; }
    }
    TriggerEnable(gt_ZombieTKSWavesLocusts, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk_Init () {
    gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk = TriggerCreate("gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk_Func");
    TriggerAddEventTimePeriodic(gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave100-InfestedSiegeTanks
//--------------------------------------------------------------------------------------------------
bool gt_Wave100InfestedSiegeTanks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2DD43552_ae = 6;
    int auto2DD43552_var;
    unitgroup auto2B9EB5CD_g;
    int auto2B9EB5CD_u;
    unit auto2B9EB5CD_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 110))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2DD43552_var = 1;
    for ( ; auto2DD43552_var <= auto2DD43552_ae; auto2DD43552_var += 1 ) {
        if ((PlayerGetPropertyInt(auto2DD43552_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto2DD43552_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/26AA6F62"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto2B9EB5CD_g = gv_zombies;
    auto2B9EB5CD_u = UnitGroupCount(auto2B9EB5CD_g, c_unitCountAll);
    for (;; auto2B9EB5CD_u -= 1) {
        auto2B9EB5CD_var = UnitGroupUnitFromEnd(auto2B9EB5CD_g, auto2B9EB5CD_u);
        if (auto2B9EB5CD_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave100InfestedSiegeTanks_Init () {
    gt_Wave100InfestedSiegeTanks = TriggerCreate("gt_Wave100InfestedSiegeTanks_Func");
    TriggerAddEventTimePeriodic(gt_Wave100InfestedSiegeTanks, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave105-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach+T-Rex+Abberation+Mutalisk+InfestedTank
//--------------------------------------------------------------------------------------------------
bool gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA1B01A5F_ae = 6;
    int autoA1B01A5F_var;
    const int auto190023BD_ae = 300;
    int auto190023BD_var;
    unitgroup auto58098CCB_g;
    int auto58098CCB_u;
    unit auto58098CCB_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 120))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZombieTKSWavesSpeedling, false);
    gv_wave = 121;
    while (!((UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < 65))) {
        Wait(1.0, c_timeGame);
    }
    autoA1B01A5F_var = 1;
    for ( ; autoA1B01A5F_var <= autoA1B01A5F_ae; autoA1B01A5F_var += 1 ) {
        if ((PlayerGetPropertyInt(autoA1B01A5F_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoA1B01A5F_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/FD3810E7"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(195972330));
    auto190023BD_var = 1;
    for ( ; auto190023BD_var <= auto190023BD_ae; auto190023BD_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto190023BD_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto58098CCB_g = gv_zombies;
    auto58098CCB_u = UnitGroupCount(auto58098CCB_g, c_unitCountAll);
    for (;; auto58098CCB_u -= 1) {
        auto58098CCB_var = UnitGroupUnitFromEnd(auto58098CCB_g, auto58098CCB_u);
        if (auto58098CCB_var == null) { break; }
    }
    TriggerEnable(gt_ZombieTKSWavesSpeedling, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank_Init () {
    gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank = TriggerCreate("gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank_Func");
    TriggerAddEventTimePeriodic(gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave110-Abomination
//--------------------------------------------------------------------------------------------------
bool gt_Wave110Abomination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto71E19249_ae = 6;
    int auto71E19249_var;
    unitgroup auto1C0CF70E_g;
    int auto1C0CF70E_u;
    unit auto1C0CF70E_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 130))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto71E19249_var = 1;
    for ( ; auto71E19249_var <= auto71E19249_ae; auto71E19249_var += 1 ) {
        if ((PlayerGetPropertyInt(auto71E19249_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto71E19249_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/CDC20BF7"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    auto1C0CF70E_g = gv_zombies;
    auto1C0CF70E_u = UnitGroupCount(auto1C0CF70E_g, c_unitCountAll);
    for (;; auto1C0CF70E_u -= 1) {
        auto1C0CF70E_var = UnitGroupUnitFromEnd(auto1C0CF70E_g, auto1C0CF70E_u);
        if (auto1C0CF70E_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave110Abomination_Init () {
    gt_Wave110Abomination = TriggerCreate("gt_Wave110Abomination_Func");
    TriggerAddEventTimePeriodic(gt_Wave110Abomination, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave115-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach+T-Rex+Abberation+Mutalisk+InfestedTank+Abomination
//--------------------------------------------------------------------------------------------------
bool gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto625CE4E2_ae = 6;
    int auto625CE4E2_var;
    const int autoCA6585B2_ae = 300;
    int autoCA6585B2_var;
    unitgroup auto4672AD8F_g;
    int auto4672AD8F_u;
    unit auto4672AD8F_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 140))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZombieTKSWavesSpeedling, false);
    gv_wave = 141;
    while (!((UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < 65))) {
        Wait(1.0, c_timeGame);
    }
    auto625CE4E2_var = 1;
    for ( ; auto625CE4E2_var <= auto625CE4E2_ae; auto625CE4E2_var += 1 ) {
        if ((PlayerGetPropertyInt(auto625CE4E2_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto625CE4E2_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/08704070"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(195972330));
    autoCA6585B2_var = 1;
    for ( ; autoCA6585B2_var <= autoCA6585B2_ae; autoCA6585B2_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(autoCA6585B2_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto4672AD8F_g = gv_zombies;
    auto4672AD8F_u = UnitGroupCount(auto4672AD8F_g, c_unitCountAll);
    for (;; auto4672AD8F_u -= 1) {
        auto4672AD8F_var = UnitGroupUnitFromEnd(auto4672AD8F_g, auto4672AD8F_u);
        if (auto4672AD8F_var == null) { break; }
    }
    TriggerEnable(gt_ZombieTKSWavesSpeedling, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination_Init () {
    gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination = TriggerCreate("gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination_Func");
    TriggerAddEventTimePeriodic(gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave120-Tiger
//--------------------------------------------------------------------------------------------------
bool gt_Wave120Tiger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA0155CA4_ae = 6;
    int autoA0155CA4_var;
    unitgroup autoEB5A371A_g;
    int autoEB5A371A_u;
    unit autoEB5A371A_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA0155CA4_var = 1;
    for ( ; autoA0155CA4_var <= autoA0155CA4_ae; autoA0155CA4_var += 1 ) {
        if ((PlayerGetPropertyInt(autoA0155CA4_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(autoA0155CA4_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/CD0E0AA0"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(1886480028));
    Wait(0.25, c_timeGame);
    autoEB5A371A_g = gv_zombies;
    autoEB5A371A_u = UnitGroupCount(autoEB5A371A_g, c_unitCountAll);
    for (;; autoEB5A371A_u -= 1) {
        autoEB5A371A_var = UnitGroupUnitFromEnd(autoEB5A371A_g, autoEB5A371A_u);
        if (autoEB5A371A_var == null) { break; }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave120Tiger_Init () {
    gt_Wave120Tiger = TriggerCreate("gt_Wave120Tiger_Func");
    TriggerAddEventTimePeriodic(gt_Wave120Tiger, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave125-RandomZombies+Zerglings+Ultralisk+Queen+Baneling+Hydralisk+Roach+T-Rex+Abberation+Mutalisk+InfestedTank+Abomination+Lurker
//--------------------------------------------------------------------------------------------------
bool gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2EA9CD64_ae = 6;
    int auto2EA9CD64_var;
    const int auto0A2A34EA_ae = 300;
    int auto0A2A34EA_var;
    unitgroup auto6346A930_g;
    int auto6346A930_u;
    unit auto6346A930_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 160))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZombieTKSWavesGhouls, false);
    gv_wave = 161;
    while (!((UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < 65))) {
        Wait(1.0, c_timeGame);
    }
    auto2EA9CD64_var = 1;
    for ( ; auto2EA9CD64_var <= auto2EA9CD64_ae; auto2EA9CD64_var += 1 ) {
        if ((PlayerGetPropertyInt(auto2EA9CD64_var, c_playerPropCustom) < 45000)) {
            PlayerModifyPropertyInt(auto2EA9CD64_var, c_playerPropCustom, c_playerPropOperAdd, 1);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/2AA04711"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "PrimalZergling", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "PrimalRoach", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Lurker", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Mutalisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "Abomination", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 1), "InfestedSiegeBreaker", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing((gv_tKSZombieAmountIncrease * 2), "Baneling", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(gv_tKSZombieAmountIncrease, "Hydralisk", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, 9, PointFromId(1443602122));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(195972330));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Queen", 0, 9, PointFromId(1886480028));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1727458775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 9, PointFromId(1330477819));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(252796511));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, 9, PointFromId(195972330));
    auto0A2A34EA_var = 1;
    for ( ; auto0A2A34EA_var <= auto0A2A34EA_ae; auto0A2A34EA_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorTerranBurrowed", 0, 9, PointFromName(("Point " + IntToString(auto0A2A34EA_var))));
        Wait(0.25, c_timeGame);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 55.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 55.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestorTerranUp", 0)), c_orderQueueReplace);
    }
    Wait(0.25, c_timeGame);
    auto6346A930_g = gv_zombies;
    auto6346A930_u = UnitGroupCount(auto6346A930_g, c_unitCountAll);
    for (;; auto6346A930_u -= 1) {
        auto6346A930_var = UnitGroupUnitFromEnd(auto6346A930_g, auto6346A930_u);
        if (auto6346A930_var == null) { break; }
    }
    TriggerEnable(gt_ZombieTKSWavesGhouls, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker_Init () {
    gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker = TriggerCreate("gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker_Func");
    TriggerAddEventTimePeriodic(gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wave249-Leviathan
//--------------------------------------------------------------------------------------------------
bool gt_wave249Leviathan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto02E06364_g;
    int auto02E06364_u;
    unit auto02E06364_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 249))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/76A1036B"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(0.25, c_timeGame);
    auto02E06364_g = gv_zombies;
    auto02E06364_u = UnitGroupCount(auto02E06364_g, c_unitCountAll);
    for (;; auto02E06364_u -= 1) {
        auto02E06364_var = UnitGroupUnitFromEnd(auto02E06364_g, auto02E06364_u);
        if (auto02E06364_var == null) { break; }
        UnitSetPropertyFixed(auto02E06364_var, c_unitPropBaseMovementSpeed, (UnitGetPropertyFixed(auto02E06364_var, c_unitPropBaseMovementSpeed, c_unitPropNormal) + gv_zombiespeed));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_wave249Leviathan_Init () {
    gt_wave249Leviathan = TriggerCreate("gt_wave249Leviathan_Func");
    TriggerEnable(gt_wave249Leviathan, false);
    TriggerAddEventTimePeriodic(gt_wave249Leviathan, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wave349-Leviathan 2
//--------------------------------------------------------------------------------------------------
bool gt_wave349Leviathan2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto502FB373_g;
    int auto502FB373_u;
    unit auto502FB373_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 349))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/44A11A63"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(0.25, c_timeGame);
    auto502FB373_g = gv_zombies;
    auto502FB373_u = UnitGroupCount(auto502FB373_g, c_unitCountAll);
    for (;; auto502FB373_u -= 1) {
        auto502FB373_var = UnitGroupUnitFromEnd(auto502FB373_g, auto502FB373_u);
        if (auto502FB373_var == null) { break; }
        UnitSetPropertyFixed(auto502FB373_var, c_unitPropBaseMovementSpeed, (UnitGetPropertyFixed(auto502FB373_var, c_unitPropBaseMovementSpeed, c_unitPropNormal) + gv_zombiespeed));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_wave349Leviathan2_Init () {
    gt_wave349Leviathan2 = TriggerCreate("gt_wave349Leviathan2_Func");
    TriggerEnable(gt_wave349Leviathan2, false);
    TriggerAddEventTimePeriodic(gt_wave349Leviathan2, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wave998-kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_wave998kerrigan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF4254E7B_g;
    int autoF4254E7B_u;
    unit autoF4254E7B_var;

    // Conditions
    if (testConds) {
        if (!((gv_wave == 998))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/5D47A5CD"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(0.25, c_timeGame);
    autoF4254E7B_g = gv_zombies;
    autoF4254E7B_u = UnitGroupCount(autoF4254E7B_g, c_unitCountAll);
    for (;; autoF4254E7B_u -= 1) {
        autoF4254E7B_var = UnitGroupUnitFromEnd(autoF4254E7B_g, autoF4254E7B_u);
        if (autoF4254E7B_var == null) { break; }
        UnitSetPropertyFixed(autoF4254E7B_var, c_unitPropBaseMovementSpeed, (UnitGetPropertyFixed(autoF4254E7B_var, c_unitPropBaseMovementSpeed, c_unitPropNormal) + gv_zombiespeed));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_wave998kerrigan_Init () {
    gt_wave998kerrigan = TriggerCreate("gt_wave998kerrigan_Func");
    TriggerEnable(gt_wave998kerrigan, false);
    TriggerAddEventTimePeriodic(gt_wave998kerrigan, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -info
//--------------------------------------------------------------------------------------------------
bool gt_info_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5B7B6A8F"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/7F7ED824") + gv_difficultyText));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/087A9E34") + IntToText(gv_wavetoWin)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/6D88CC50") + IntToText(gv_killRewardValue)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/4BB7AD87") + IntToText(gv_tpRewardValue)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_info_Init () {
    gt_info = TriggerCreate("gt_info_Func");
    TriggerAddEventChatMessage(gt_info, c_playerAny, "-info", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -test
//--------------------------------------------------------------------------------------------------
bool gt_test_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsTestMap(false) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8298616") || (PlayerHandle(EventPlayer()) == "1-S2-1-10850604") || (PlayerHandle(EventPlayer()) == "1-S2-1-4394295") || (PlayerHandle(EventPlayer()) == "2-S2-1-9752677") || (PlayerHandle(EventPlayer()) == "1-S2-1-7569487")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 500;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test_Init () {
    gt_test = TriggerCreate("gt_test_Func");
    TriggerAddEventChatMessage(gt_test, c_playerAny, "-now", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -challenges
//--------------------------------------------------------------------------------------------------
bool gt_challenges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E88A4A29"));
    Wait(0.5, c_timeGame);
    if ((gv_playerInfo[EventPlayer()].lv_cLInfantry == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0D544910"));
    }

    Wait(0.5, c_timeGame);
    if ((gv_playerInfo[EventPlayer()].lv_cLTeamGame == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2B26E20D"));
    }

    Wait(0.5, c_timeGame);
    if ((gv_playerInfo[EventPlayer()].lv_cLConstructor == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/395C6306"));
    }

    Wait(0.5, c_timeGame);
    if ((gv_playerInfo[EventPlayer()].lv_cLEvasive == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2B2A9B87"));
    }

    Wait(0.5, c_timeGame);
    if ((gv_playerInfo[EventPlayer()].lv_cLTorture == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BF8DB41B"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_challenges_Init () {
    gt_challenges = TriggerCreate("gt_challenges_Func");
    TriggerAddEventChatMessage(gt_challenges, c_playerAny, "-challenges", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GrantKills
//--------------------------------------------------------------------------------------------------
bool gt_GrantKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == "1-S2-1-11009922"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerInfo[EventPlayer()].lv_tankKills = 1922;
    gv_playerInfo[EventPlayer()].lv_supportKills = 1766;
    gv_playerInfo[EventPlayer()].lv_specialistKills = 2143;
    gv_playerInfo[EventPlayer()].lv_asassinKills = 2012;
    gv_playerInfo[EventPlayer()].lv_singleTargetKills = 1998;
    gv_playerInfo[EventPlayer()].lv_splashKills = 2218;
    gv_playerInfo[EventPlayer()].lv_builderKills = 25317;
    gv_playerInfo[EventPlayer()].lv_highestWave = 96;
    BoardItemSetText(gv_leaderboard, 2, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_highestWave));
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 2, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantKills_Init () {
    gt_GrantKills = TriggerCreate("gt_GrantKills_Func");
    TriggerAddEventChatMessage(gt_GrantKills, c_playerAny, "-GIVETHERETARDKILLS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FINALWAVE!!
//--------------------------------------------------------------------------------------------------
bool gt_FINALWAVE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_killReward_Real;

    // Automatic Variable Declarations
    const int auto76670343_ae = 6;
    int auto76670343_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_wave >= gv_wavetoWin))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killReward_Real = gv_killRewardValue;
    SoundPlayForPlayer(SoundLink("UI_MissionComplete", -1), c_maxPlayers, PlayerGroupAll(), 275.0, 0.0);
    SoundStop(SoundLastPlayed(), true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/220FA67B") + gv_difficultyText));
    auto76670343_var = 1;
    for ( ; auto76670343_var <= auto76670343_ae; auto76670343_var += 1 ) {
        if ((gv_cLInfatrySelected == true)) {
            UIDisplayMessage(PlayerGroupSingle(auto76670343_var), c_messageAreaChat, (StringExternal("Param/Value/6A4EBB24") + (TextWithColor(IntToText(gv_wavetoWin), Color(0.00, 50.20, 100.00)) + (StringExternal("Param/Value/7B1C0948") + (TextWithColor(IntToText(gv_killRewardValue), Color(100.00, 0.00, 100.00)) + (StringExternal("Param/Value/C1BE318B") + (StringExternal("Param/Value/60E23561") + (TextWithColor(IntToText(gv_tpRewardValue), Color(100.00, 87.45, 0.00)) + StringExternal("Param/Value/A24AA466")))))))));
            gv_playerInfo[auto76670343_var].lv_cLInfantry = true;
            BankLoad("zombieworldu", auto76670343_var);
            BankValueSetFromFlag(BankLastCreated(), "Hack_This_I_Dare_You", "ChangeAnythingAndYourStatsReset", gv_playerInfo[auto76670343_var].lv_cLInfantry);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            BankSave(BankLastCreated());
        }
        else {
            if ((gv_cLTeamGameSelected == true)) {
                UIDisplayMessage(PlayerGroupSingle(auto76670343_var), c_messageAreaChat, (StringExternal("Param/Value/68DB5503") + (TextWithColor(IntToText(gv_wavetoWin), Color(0.00, 50.20, 100.00)) + (StringExternal("Param/Value/4C4D5A45") + (TextWithColor(IntToText(gv_killRewardValue), Color(100.00, 0.00, 100.00)) + (StringExternal("Param/Value/FA99517E") + (StringExternal("Param/Value/942735B5") + (TextWithColor(IntToText(gv_tpRewardValue), Color(100.00, 87.45, 0.00)) + StringExternal("Param/Value/D1FE8ADB")))))))));
                gv_playerInfo[auto76670343_var].lv_cLTeamGame = true;
                BankLoad("zombieworldu", auto76670343_var);
                BankValueSetFromFlag(BankLastCreated(), "Challenges", "CLTeamGame", gv_playerInfo[auto76670343_var].lv_cLTeamGame);
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                BankSave(BankLastCreated());
            }
            else {
                if ((gv_cLConstructorSelected == true)) {
                    UIDisplayMessage(PlayerGroupSingle(auto76670343_var), c_messageAreaChat, (StringExternal("Param/Value/54EB421E") + (TextWithColor(IntToText(gv_wavetoWin), Color(0.00, 50.20, 100.00)) + (StringExternal("Param/Value/4FA28AB7") + (TextWithColor(IntToText(gv_killRewardValue), Color(100.00, 0.00, 100.00)) + (StringExternal("Param/Value/3BD914FC") + (StringExternal("Param/Value/8A0BFE10") + (TextWithColor(IntToText(gv_tpRewardValue), Color(100.00, 87.45, 0.00)) + StringExternal("Param/Value/019D6808")))))))));
                    gv_playerInfo[auto76670343_var].lv_cLConstructor = true;
                    BankLoad("zombieworldu", auto76670343_var);
                    BankValueSetFromFlag(BankLastCreated(), "Challenges", "CLConstructor", gv_playerInfo[auto76670343_var].lv_cLConstructor);
                    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                    BankSave(BankLastCreated());
                }
                else {
                    if ((gv_cLEvasiveSelected == true)) {
                        UIDisplayMessage(PlayerGroupSingle(auto76670343_var), c_messageAreaChat, (StringExternal("Param/Value/E7FDFBE3") + (TextWithColor(IntToText(gv_wavetoWin), Color(0.00, 50.20, 100.00)) + (StringExternal("Param/Value/BB379179") + (TextWithColor(IntToText(gv_killRewardValue), Color(100.00, 0.00, 100.00)) + (StringExternal("Param/Value/97A738EA") + (StringExternal("Param/Value/A33CAFA3") + (TextWithColor(IntToText(gv_tpRewardValue), Color(100.00, 87.45, 0.00)) + StringExternal("Param/Value/5D90E48B")))))))));
                        gv_playerInfo[auto76670343_var].lv_cLEvasive = true;
                        BankLoad("zombieworldu", auto76670343_var);
                        BankValueSetFromFlag(BankLastCreated(), "Challenges", "CLEvasive", gv_playerInfo[auto76670343_var].lv_cLEvasive);
                        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                        BankSave(BankLastCreated());
                    }
                    else {
                        if ((gv_cLTortureSelected == true)) {
                            UIDisplayMessage(PlayerGroupSingle(auto76670343_var), c_messageAreaChat, (StringExternal("Param/Value/2B2699EC") + (TextWithColor(IntToText(gv_wavetoWin), Color(0.00, 50.20, 100.00)) + (StringExternal("Param/Value/CD361B2E") + (TextWithColor(IntToText(gv_killRewardValue), Color(100.00, 0.00, 100.00)) + (StringExternal("Param/Value/0DF95CFF") + (StringExternal("Param/Value/6287B613") + (TextWithColor(IntToText(gv_tpRewardValue), Color(100.00, 87.45, 0.00)) + StringExternal("Param/Value/A0196A43")))))))));
                            gv_playerInfo[auto76670343_var].lv_cLTorture = true;
                            BankLoad("zombieworldu", auto76670343_var);
                            BankValueSetFromFlag(BankLastCreated(), "Challenges", "CLTorture1", gv_playerInfo[auto76670343_var].lv_cLTorture);
                            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                            BankSave(BankLastCreated());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(auto76670343_var), c_messageAreaChat, (StringExternal("Param/Value/C29B27E8") + (TextWithColor(IntToText(gv_wavetoWin), Color(0.00, 50.20, 100.00)) + (StringExternal("Param/Value/0BE21AF8") + (TextWithColor(IntToText(gv_killRewardValue), Color(100.00, 0.00, 100.00)) + (StringExternal("Param/Value/CE40636C") + (StringExternal("Param/Value/EAB4B2EA") + (TextWithColor(IntToText(gv_tpRewardValue), Color(100.00, 87.45, 0.00)) + StringExternal("Param/Value/BA89E095")))))))));
                        }
                    }
                }
            }
        }
        if ((PlayerGetPropertyInt(auto76670343_var, c_playerPropCustom) < (45000 - gv_tpRewardValue))) {
            PlayerModifyPropertyInt(auto76670343_var, c_playerPropCustom, c_playerPropOperAdd, gv_tpRewardValue);
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Zealot") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateZealot") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalZealot") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantZealot") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorZealot") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "ZealotShakuras") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "LeutinetCenturion") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CaptainCenturion") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerCenturion") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerSentinel") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "GeneralSentinel") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Predator") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Immortal") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Firebat") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Thor") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "ThorAP") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "HybridDestroyer"))) {
            gv_playerInfo[auto76670343_var].lv_tankKills += gv_killRewardValue;
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Medic") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateMedic") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalMedic") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMedic") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorMedic") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorSurgeon") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "LeutinetSurgeon2") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CaptainSurgeon") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerSurgeon") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerDoctor") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "GeneralDoctor") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Sentry") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "HighTemplar") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Adept") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Raven"))) {
            gv_playerInfo[auto76670343_var].lv_supportKills += gv_killRewardValue;
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Vulture") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Vulture2") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalVulture") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantVulture") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorVulture") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorBiker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "LeutinetBiker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CaptainBiker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerBiker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerScooter") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "GeneralScooter") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Archon") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Hellion") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SiegeTankSieged") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SiegeTank") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Reaver") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Colossus"))) {
            gv_playerInfo[auto76670343_var].lv_splashKills += gv_killRewardValue;
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Ghost") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateGhost") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalGhost") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantGhost") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorGhost") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorNova") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "LieutenentNova") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CaptainNova") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerNova") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerMarksman") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "GeneralMarksman") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Spectre") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "DarkTemplar") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Wraith") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Tempest"))) {
            gv_playerInfo[auto76670343_var].lv_asassinKills += gv_killRewardValue;
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SCV") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "MinerMale") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "HERC") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Marauder") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorsairMP"))) {
            gv_playerInfo[auto76670343_var].lv_builderKills += gv_killRewardValue;
        }

        if ((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Reaper") && (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateReaper") && (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalReaper") && (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantReaper") && (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorReaper")) {
            gv_playerInfo[auto76670343_var].lv_splashKills += FixedToInt((lv_killReward_Real * 0.56));
            gv_playerInfo[auto76670343_var].lv_singleTargetKills += FixedToInt((lv_killReward_Real * 0.33));
            gv_playerInfo[auto76670343_var].lv_tankKills += FixedToInt((lv_killReward_Real * 0.11));
        }

        if ((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Oracle")) {
            gv_playerInfo[auto76670343_var].lv_splashKills += FixedToInt((lv_killReward_Real * 0.33));
            gv_playerInfo[auto76670343_var].lv_specialistKills += FixedToInt((lv_killReward_Real * 0.33));
            gv_playerInfo[auto76670343_var].lv_supportKills += FixedToInt((lv_killReward_Real * 0.34));
        }

        if ((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Skeletalmage")) {
            gv_playerInfo[auto76670343_var].lv_supportKills += FixedToInt((lv_killReward_Real * 0.45));
            gv_playerInfo[auto76670343_var].lv_splashKills += FixedToInt((lv_killReward_Real * 0.32));
            gv_playerInfo[auto76670343_var].lv_specialistKills += FixedToInt((lv_killReward_Real * 0.23));
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Stalker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateStalker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalStalker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantStalker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorStalker") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorInstigator") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "LeutinetInstigator") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CaptainInstigator") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerInstigator") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Dragoon") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "GeneralDragoon") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Diamondback") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Scout") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Cyclone") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Mothership"))) {
            gv_playerInfo[auto76670343_var].lv_specialistKills += gv_killRewardValue;
        }

        if (((UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Marine") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateMarine") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalMarine") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMarine") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorMarine") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "TychusCommando") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "LeutinetTychus") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CaptainTychus") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CommissionerTychus") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "RaynorCommando") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "GeneralRaynor") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "VoidRay") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "PrivateVoidRay") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "CorporalVoidRay") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantVoidRay") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "SergeantMajorVoidRay") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Mohandar") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Goliath") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "VikingAssault") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "VikingFighter") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Carrier") || (UnitGetType(gv_playerInfo[auto76670343_var].lv_hero) == "Battlecruiser"))) {
            gv_playerInfo[auto76670343_var].lv_singleTargetKills += gv_killRewardValue;
        }

    }
    TriggerExecute(gt_leavingp, true, true);
    BoardItemSetText(gv_leaderboard, 3, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_tankKills));
    BoardItemSetText(gv_leaderboard, 4, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_supportKills));
    BoardItemSetText(gv_leaderboard, 5, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_specialistKills));
    BoardItemSetText(gv_leaderboard, 6, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_splashKills));
    BoardItemSetText(gv_leaderboard, 7, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_asassinKills));
    BoardItemSetText(gv_leaderboard, 8, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_singleTargetKills));
    BoardItemSetText(gv_leaderboard, 9, EventPlayer(), IntToText(gv_playerInfo[EventPlayer()].lv_builderKills));
    BoardItemSetFontSize(gv_leaderboard, 3, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 4, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 5, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 6, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 7, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 8, EventPlayer(), 16);
    BoardItemSetFontSize(gv_leaderboard, 9, EventPlayer(), 16);
    DialogCreate(500, 400, c_anchorCenter, -250, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_speedBuffDialog48[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/34EA1FB5"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_speedBuffDialog48[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_speedBuffDialog48[1], c_anchorCenter, -250, 0);
    DialogControlSetVisible(gv_speedBuffDialog48[2], PlayerGroupAll(), false);
    DialogCreate(500, 400, c_anchorCenter, 250, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_speedBuffDialog49[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/5F373401"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_speedBuffDialog49[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_speedBuffDialog48[1], c_anchorCenter, 250, 0);
    DialogControlSetVisible(gv_speedBuffDialog49[2], PlayerGroupAll(), false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FINALWAVE_Init () {
    gt_FINALWAVE = TriggerCreate("gt_FINALWAVE_Func");
    TriggerEnable(gt_FINALWAVE, false);
    TriggerAddEventTimePeriodic(gt_FINALWAVE, 13.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Speed Buff 3dmg 14
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpeedBuff3dmg14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_speedBuffDialog49[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_speedBuffDialog48[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_speedBuffDialog49[1], PlayerGroupSingle(EventPlayer()), false);
    GameOver(EventPlayer(), c_gameOverVictory, true, true);
    KickFromGame(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpeedBuff3dmg14_Init () {
    gt_ActivateSpeedBuff3dmg14 = TriggerCreate("gt_ActivateSpeedBuff3dmg14_Func");
    TriggerAddEventDialogControl(gt_ActivateSpeedBuff3dmg14, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Speed Buff 3dmg 13
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSpeedBuff3dmg13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_speedBuffDialog48[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_speedBuffDialog48[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_speedBuffDialog49[1], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSpeedBuff3dmg13_Init () {
    gt_ActivateSpeedBuff3dmg13 = TriggerCreate("gt_ActivateSpeedBuff3dmg13_Func");
    TriggerAddEventDialogControl(gt_ActivateSpeedBuff3dmg13, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ModeBuffers
//--------------------------------------------------------------------------------------------------
bool gt_ModeBuffers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0FEA36DB_ae = 8;
    int auto0FEA36DB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0FEA36DB_var = 1;
    for ( ; auto0FEA36DB_var <= auto0FEA36DB_ae; auto0FEA36DB_var += 1 ) {
        if ((gv_difficultyModeforbuff == 55)) {
        }

        if ((gv_difficultyModeforbuff == 42)) {
        }

        if ((gv_difficultyModeforbuff == 30)) {
            UnitBehaviorAdd(gv_playerInfo[auto0FEA36DB_var].lv_hero, "IntenseModebuff", gv_playerInfo[auto0FEA36DB_var].lv_hero, 1);
        }

        if ((gv_diffucultySpeedforbuff == 1.875)) {
        }

        if ((gv_diffucultySpeedforbuff == 1.5)) {
        }

        if ((gv_diffucultySpeedforbuff == 1.125)) {
        }

        if ((gv_diffucultySpeedforbuff == 0.75)) {
        }

        if ((gv_diffucultySpeedforbuff == 0.4)) {
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeBuffers_Init () {
    gt_ModeBuffers = TriggerCreate("gt_ModeBuffers_Func");
    TriggerEnable(gt_ModeBuffers, false);
    TriggerAddEventTimePeriodic(gt_ModeBuffers, 14.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Read Player Vote
//--------------------------------------------------------------------------------------------------
bool gt_ReadPlayerVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_tooltip;
    int lv_x;
    int lv_votes;

    // Automatic Variable Declarations
    int auto7CD3C29B_ae;
    const int auto7CD3C29B_ai = 1;
    int autoF8B6AA4A_ae;
    const int autoF8B6AA4A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7CD3C29B_ae = UserDataInstanceCount("Speed");
    lv_x = 1;
    for ( ; ( (auto7CD3C29B_ai >= 0 && lv_x <= auto7CD3C29B_ae) || (auto7CD3C29B_ai < 0 && lv_x >= auto7CD3C29B_ae) ) ; lv_x += auto7CD3C29B_ai ) {
        lv_tooltip = (lv_tooltip + IntToText(gf_Numberofplayersselectinglistitem(lv_x, gv_speedVote[1], gf_HumanPlayers())) + StringExternal("Param/Value/36BFEC82") + StringToText(UserDataGetString("Speed", UserDataInstance("Speed", lv_x), "Difficulty ToolTip", 1)) + StringExternal("Param/Value/089349A3"));
        libNtve_gf_SetDialogItemTooltip(gv_speedVote[1], lv_tooltip, PlayerGroupAll());
    }
    lv_tooltip = StringToText("");
    autoF8B6AA4A_ae = UserDataInstanceCount("Difficulty");
    lv_x = 1;
    for ( ; ( (autoF8B6AA4A_ai >= 0 && lv_x <= autoF8B6AA4A_ae) || (autoF8B6AA4A_ai < 0 && lv_x >= autoF8B6AA4A_ae) ) ; lv_x += autoF8B6AA4A_ai ) {
        lv_tooltip = (lv_tooltip + IntToText(gf_Numberofplayersselectinglistitem(lv_x, gv_difficultyVote[1], gf_HumanPlayers())) + StringExternal("Param/Value/1D802236") + StringToText(UserDataGetString("Difficulty", UserDataInstance("Difficulty", lv_x), "Difficulty ToolTip", 1)) + StringExternal("Param/Value/99AE9A7D"));
        libNtve_gf_SetDialogItemTooltip(gv_difficultyVote[1], lv_tooltip, PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReadPlayerVote_Init () {
    gt_ReadPlayerVote = TriggerCreate("gt_ReadPlayerVote_Func");
    TriggerAddEventDialogControl(gt_ReadPlayerVote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ElsePickNormal
//--------------------------------------------------------------------------------------------------
bool gt_ElsePickNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0BC2F4D5"));
    gv_killRewardValue = 2000;
    gv_tpRewardValue = 20;
    gv_wavetoWin = 100;
    gv_zombieSpawnRate = 5;
    gv_timeToSpawn = 10.0;
    gv_difficultyText = StringExternal("Param/Value/050EECD6");
    TriggerEnable(gt_FINALWAVE, true);
    TriggerEnable(gt_Alarak, true);
    TriggerEnable(gt_Artanis, true);
    TriggerEnable(gt_Kerrigan, true);
    TriggerExecute(gt_StartingStats, true, false);
    TriggerEnable(gt_OpenCloseStats, true);
    TriggerEnable(gt_leavingp, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ElsePickNormal_Init () {
    gt_ElsePickNormal = TriggerCreate("gt_ElsePickNormal_Func");
    TriggerAddEventTimeElapsed(gt_ElsePickNormal, 31.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimeLeftToVote Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_TimeLeftToVoteDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_timeLeftToVoteDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/019D8EBE"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -500);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_timeLeftToVoteDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_timeLeftToVoteDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_timeLeftToVoteDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeLeftToVoteDialogCreation_Init () {
    gt_TimeLeftToVoteDialogCreation = TriggerCreate("gt_TimeLeftToVoteDialogCreation_Func");
    TriggerAddEventMapInit(gt_TimeLeftToVoteDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicAdjustTimetoVote
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicAdjustTimetoVote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timeLeft > 0)) {
        gv_timeLeft -= 1;
        libNtve_gf_SetDialogItemText(gv_timeLeftToVoteDialog[1], IntToText(gv_timeLeft), PlayerGroupAll());
    }

    if ((gv_timeLeft == 0)) {
        TriggerEnable(gt_kill, true);
        DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_easyDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_normalDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_hardDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_cLTorture[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_timeLeftToVoteDialog[1], PlayerGroupAll(), false);
        gv_votesForDifficulty /= gv_countVotingPlayers;
        if ((gv_votesForDifficulty == 1)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/43C1E810"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieDecreaseDamage2", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieDecreaseDamage2", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieDecreaseSpeed2", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieDecreaseSpeed2", 2);
            gv_zombielife = 16.0;
            gv_zombieCapVariable = 0.8;
            gv_killRewardValue = 1000;
            gv_tpRewardValue = 20;
            gv_wavetoWin = 75;
            gv_timeToSpawn = 15.0;
            gv_difficultyText = StringExternal("Param/Value/59F01993");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 2)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3D976926"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieDecreaseDamage2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieDecreaseDamage2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieDecreaseSpeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieDecreaseSpeed2", 1);
            gv_zombielife = 18.0;
            gv_zombieCapVariable = 0.9;
            gv_killRewardValue = 1500;
            gv_tpRewardValue = 30;
            gv_wavetoWin = 75;
            gv_timeToSpawn = 15.0;
            gv_difficultyText = StringExternal("Param/Value/5E03CC33");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 3)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/77F69198"));
            gv_killRewardValue = 2000;
            gv_tpRewardValue = 40;
            gv_wavetoWin = 100;
            gv_zombieSpawnRate = 5;
            gv_timeToSpawn = 10.0;
            gv_difficultyText = StringExternal("Param/Value/D3284759");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 4) && (gv_countVotingPlayers != gv_votesForCLInfantry)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0EE0577D"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 1);
            gv_zombielife = 24.0;
            gv_zombieCapVariable = 1.2;
            gv_killRewardValue = 3000;
            gv_tpRewardValue = 60;
            gv_wavetoWin = 125;
            gv_wave = 5;
            gv_bossSpeed = 1.5;
            gv_zombieSpawnRate = 10;
            gv_timeToSpawn = 5.0;
            gv_difficultyText = StringExternal("Param/Value/D98019BA");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_countVotingPlayers == gv_votesForCLInfantry)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/56D8B289"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 1);
            gv_zombielife = 24.0;
            gv_zombieCapVariable = 1.2;
            gv_killRewardValue = 10000;
            gv_tpRewardValue = 150;
            gv_wavetoWin = 125;
            gv_wave = 5;
            gv_bossSpeed = 1.5;
            gv_zombieSpawnRate = 10;
            gv_timeToSpawn = 5.0;
            gv_difficultyText = StringExternal("Param/Value/42DF62FA");
            gv_cLInfatrySelected = true;
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_Respawn, false);
            TriggerEnable(gt_RespawnCLInfantry, true);
            TriggerEnable(gt_FINALWAVE, true);
        }

        if ((gv_votesForDifficulty == 5) && (gv_countVotingPlayers != gv_votesForCLConstructor) && (gv_countVotingPlayers != gv_votesForCLEvasive)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9B486C36"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 1);
            gv_zombielife = 28.0;
            gv_zombieCapVariable = 1.4;
            gv_killRewardValue = 6000;
            gv_tpRewardValue = 120;
            gv_wavetoWin = 150;
            gv_wave = 10;
            gv_bossSpeed = 2.0;
            gv_zombieSpawnRate = 15;
            gv_difficultyText = StringExternal("Param/Value/D4DE0B5B");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_countVotingPlayers == gv_votesForCLConstructor)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStatsNoTalents, true, false);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/08AD7D89"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 5);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 5);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 1);
            gv_zombielife = 30.0;
            gv_zombieCapVariable = 1.5;
            gv_killRewardValue = 10000;
            gv_tpRewardValue = 150;
            gv_wavetoWin = 110;
            gv_wave = 10;
            gv_bossSpeed = 1.5;
            gv_zombieSpawnRate = 15;
            gv_timeToSpawn = 5.0;
            gv_difficultyText = StringExternal("Param/Value/410FB8FC");
            gv_cLConstructorSelected = true;
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_Respawn, false);
            TriggerEnable(gt_RespawnCLConstructor, true);
            TriggerEnable(gt_FINALWAVE, true);
        }

        if ((gv_countVotingPlayers == gv_votesForCLEvasive)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStatsNoTalents, true, false);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/69A03E5E"));
            gv_only1Oracle = RandomInt(1, PlayerGroupCount(gf_HumanPlayers()));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/A0D348A1"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((StringExternal("Param/Value/30F9B4C9") + TextWithColor(PlayerName(gv_only1Oracle), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_only1Oracle, false)))) + StringExternal("Param/Value/C302ABD7")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/607E6C14"));
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(gv_only1Oracle), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(gv_only1Oracle), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(gv_only1Oracle), true);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 2);
            gv_zombielife = 40.0;
            gv_zombieCapVariable = 2.0;
            gv_killRewardValue = 17500;
            gv_tpRewardValue = 250;
            gv_wavetoWin = 125;
            gv_wave = 10;
            gv_bossSpeed = 1.5;
            gv_zombieSpawnRate = 20;
            gv_timeToSpawn = 5.0;
            gv_difficultyText = StringExternal("Param/Value/B9DA29F2");
            gv_cLEvasiveSelected = true;
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_Respawn, false);
            TriggerEnable(gt_RespawnCLEvasive, true);
            TriggerEnable(gt_FINALWAVE, true);
        }

        if ((gv_votesForDifficulty == 6) && (gv_countVotingPlayers != gv_votesForCLTeamGame)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/98BBC481"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 9);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 9);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 2);
            gv_zombielife = 38.0;
            gv_zombieCapVariable = 1.9;
            gv_killRewardValue = 10000;
            gv_tpRewardValue = 200;
            gv_wavetoWin = 175;
            gv_wave = 10;
            gv_bossSpeed = 3.0;
            gv_zombieSpawnRate = 25;
            gv_difficultyText = StringExternal("Param/Value/B6062EFC");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_countVotingPlayers == gv_votesForCLTeamGame)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStatsNoTalents, true, false);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/6E2BDD89"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 1);
            gv_zombielife = 22.0;
            gv_zombieCapVariable = 1.1;
            gv_killRewardValue = 17500;
            gv_tpRewardValue = 325;
            gv_wavetoWin = 110;
            gv_wave = 10;
            gv_bossSpeed = 1.0;
            gv_zombieSpawnRate = 20;
            gv_difficultyText = StringExternal("Param/Value/37158DAF");
            gv_cLTeamGameSelected = true;
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_Respawn, false);
            TriggerEnable(gt_RespawnCLTeamGame, true);
            TriggerEnable(gt_FINALWAVE, true);
        }

        if ((gv_votesForDifficulty == 7)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/7B8F45CB"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 15);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 15);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 6);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 6);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 4);
            gv_zombielife = 50.0;
            gv_zombieCapVariable = 2.5;
            gv_killRewardValue = 15000;
            gv_tpRewardValue = 300;
            gv_wavetoWin = 200;
            gv_wave = 10;
            gv_bossSpeed = 3.5;
            gv_zombieSpawnRate = 30;
            gv_difficultyText = StringExternal("Param/Value/32BE953C");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 8)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/987D9D64"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 23);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 23);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 10);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 10);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 5);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 5);
            gv_zombielife = 66.0;
            gv_zombieCapVariable = 3.3;
            gv_killRewardValue = 25000;
            gv_tpRewardValue = 500;
            gv_wavetoWin = 225;
            gv_wave = 30;
            gv_bossSpeed = 4.0;
            gv_zombieSpawnRate = 35;
            gv_difficultyText = StringExternal("Param/Value/86CA694B");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_countVotingPlayers == gv_votesForCLTorture)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStatsNoTalents, true, false);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/12E0AC46"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 65);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 65);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 8);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 8);
            gv_zombielife = 150.0;
            gv_zombieCapVariable = 7.5;
            gv_killRewardValue = 50000;
            gv_tpRewardValue = 750;
            gv_wavetoWin = 75;
            gv_wave = 1;
            gv_bossSpeed = 6.0;
            gv_zombieSpawnRate = 35;
            gv_difficultyText = StringExternal("Param/Value/74947A6C");
            gv_cLTortureSelected = true;
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_Respawn, false);
            TriggerEnable(gt_RespawnCLTorture, true);
            TriggerEnable(gt_FINALWAVE, true);
        }

        if ((gv_votesForDifficulty == 9) && (gv_countVotingPlayers != gv_votesForCLTorture)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/95757F8E"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 32);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 32);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 15);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 15);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 6);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 6);
            gv_zombielife = 84.0;
            gv_zombieCapVariable = 4.2;
            gv_killRewardValue = 40000;
            gv_tpRewardValue = 750;
            gv_wavetoWin = 250;
            gv_wave = 50;
            gv_bossSpeed = 5.0;
            gv_zombieSpawnRate = 35;
            gv_difficultyText = StringExternal("Param/Value/39E7924A");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 10)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F914DDBA"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 47);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 47);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 20);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 20);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 8);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 8);
            gv_zombielife = 114.0;
            gv_zombieCapVariable = 5.7;
            gv_killRewardValue = 60000;
            gv_tpRewardValue = 900;
            gv_wavetoWin = 275;
            gv_wave = 102;
            gv_bossSpeed = 5.0;
            gv_zombieSpawnRate = 35;
            gv_difficultyText = StringExternal("Param/Value/8B8D37BE");
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 11)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            TriggerEnable(gt_VotingShow, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D3E40B8F"));
            gv_timeLeft = 20;
            gv_countVotingPlayers = 0;
            gv_votesForDifficulty = 0;
            DialogControlSetVisible(gv_timeLeftToVoteDialog[1], PlayerGroupAll(), true);
            DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupAll(), true);
            DialogControlSetVisible(gv_tormentIDialog[1], PlayerGroupAll(), true);
            TriggerEnable(gt_PeriodicAdjustTimetoVoteT, true);
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicAdjustTimetoVote_Init () {
    gt_PeriodicAdjustTimetoVote = TriggerCreate("gt_PeriodicAdjustTimetoVote_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicAdjustTimetoVote, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicAdjustTimetoVoteT+
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicAdjustTimetoVoteT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timeLeft > 0)) {
        gv_timeLeft -= 1;
        libNtve_gf_SetDialogItemText(gv_timeLeftToVoteDialog[1], IntToText(gv_timeLeft), PlayerGroupAll());
    }

    if ((gv_timeLeft == 0)) {
        TriggerEnable(gt_kill, true);
        DialogControlSetVisible(gv_tormentIDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_timeLeftToVoteDialog[1], PlayerGroupAll(), false);
        gv_votesForDifficulty /= gv_countVotingPlayers;
        if ((gv_votesForDifficulty == 12)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0EF9156F"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 85);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 85);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 4);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 9);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 9);
            gv_zombielife = 190.0;
            gv_zombieCapVariable = 9.5;
            gv_killRewardValue = 40000;
            gv_tpRewardValue = 500;
            gv_wavetoWin = 110;
            gv_wave = 35;
            gv_bossSpeed = 8.0;
            gv_zombieSpawnRate = 35;
            gv_difficultyText = StringExternal("Param/Value/4EF50E28");
            TriggerExecute(gt_VotingShow, true, false);
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        if ((gv_votesForDifficulty == 13)) {
            if ((gv_startingStatsBeenRun == false)) {
                TriggerExecute(gt_StartingStats, true, false);
                TriggerEnable(gt_OpenCloseStats, true);
                TriggerEnable(gt_leavingp, true);
            }

            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B7EAAAC3"));
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamage100", 40);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamage100", 40);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageX10100", 10);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageX10100", 10);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseSpeed100", 3);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseAttackSpeed100", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseAttackSpeed100", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(9, "ZombieIncreaseDamageReduction100", 9);
            libNtve_gf_SetUpgradeLevelForPlayer(10, "ZombieIncreaseDamageReduction100", 9);
            gv_zombielife = 300.0;
            gv_zombieCapVariable = 15.0;
            gv_killRewardValue = 60000;
            gv_tpRewardValue = 900;
            gv_wavetoWin = 175;
            gv_wave = 100;
            gv_bossSpeed = 8.0;
            gv_zombieSpawnRate = 35;
            gv_difficultyText = StringExternal("Param/Value/579A5C06");
            TriggerExecute(gt_VotingShow, true, false);
            TriggerEnable(gt_ElsePickNormal, false);
            TriggerEnable(gt_FINALWAVE, true);
            TriggerEnable(gt_Alarak, true);
            TriggerEnable(gt_Artanis, true);
            TriggerEnable(gt_Kerrigan, true);
        }

        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicAdjustTimetoVoteT_Init () {
    gt_PeriodicAdjustTimetoVoteT = TriggerCreate("gt_PeriodicAdjustTimetoVoteT_Func");
    TriggerEnable(gt_PeriodicAdjustTimetoVoteT, false);
    TriggerAddEventTimePeriodic(gt_PeriodicAdjustTimetoVoteT, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Challenges Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_ChallengesDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_challengesDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BFA7917F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 275, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -300, -410);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E2572D9D"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_challengesDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_challengesDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_challengesDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChallengesDialogCreation_Init () {
    gt_ChallengesDialogCreation = TriggerCreate("gt_ChallengesDialogCreation_Func");
    TriggerAddEventMapInit(gt_ChallengesDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VeryEasy Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_VeryEasyDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_veryEasyDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D6D802C3"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -410);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/BBF95A25"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_veryEasyDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_veryEasyDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_veryEasyDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VeryEasyDialogCreation_Init () {
    gt_VeryEasyDialogCreation = TriggerCreate("gt_VeryEasyDialogCreation_Func");
    TriggerAddEventMapInit(gt_VeryEasyDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate VeryEasy
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVeryEasy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto06FE81A4_ae = 6;
    int auto06FE81A4_var;

    // Conditions
    if (testConds) {
        if (!((gv_veryEasyDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 1;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto06FE81A4_var = 1;
        for ( ; auto06FE81A4_var <= auto06FE81A4_ae; auto06FE81A4_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto06FE81A4_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto06FE81A4_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVeryEasy_Init () {
    gt_ActivateVeryEasy = TriggerCreate("gt_ActivateVeryEasy_Func");
    TriggerAddEventDialogControl(gt_ActivateVeryEasy, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Easy Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_EasyDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_easyDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/61391682"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -340);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/291F3D71"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_easyDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_easyDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_easyDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasyDialogCreation_Init () {
    gt_EasyDialogCreation = TriggerCreate("gt_EasyDialogCreation_Func");
    TriggerAddEventMapInit(gt_EasyDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Easy
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEasy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto819563D6_ae = 6;
    int auto819563D6_var;

    // Conditions
    if (testConds) {
        if (!((gv_easyDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 2;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto819563D6_var = 1;
        for ( ; auto819563D6_var <= auto819563D6_ae; auto819563D6_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto819563D6_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto819563D6_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEasy_Init () {
    gt_ActivateEasy = TriggerCreate("gt_ActivateEasy_Func");
    TriggerAddEventDialogControl(gt_ActivateEasy, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Normal Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_NormalDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_normalDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/F47ECFFE"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -270);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/09245211"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_normalDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_normalDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_normalDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NormalDialogCreation_Init () {
    gt_NormalDialogCreation = TriggerCreate("gt_NormalDialogCreation_Func");
    TriggerAddEventMapInit(gt_NormalDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Normal
//--------------------------------------------------------------------------------------------------
bool gt_ActivateNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF42CB799_ae = 6;
    int autoF42CB799_var;

    // Conditions
    if (testConds) {
        if (!((gv_normalDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 3;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        autoF42CB799_var = 1;
        for ( ; autoF42CB799_var <= autoF42CB799_ae; autoF42CB799_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoF42CB799_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoF42CB799_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateNormal_Init () {
    gt_ActivateNormal = TriggerCreate("gt_ActivateNormal_Func");
    TriggerAddEventDialogControl(gt_ActivateNormal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hard Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_HardDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_hardDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/596A2A7F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/22B1655C"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_hardDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_hardDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_hardDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HardDialogCreation_Init () {
    gt_HardDialogCreation = TriggerCreate("gt_HardDialogCreation_Func");
    TriggerAddEventMapInit(gt_HardDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hard
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE79F1BEF_ae = 6;
    int autoE79F1BEF_var;

    // Conditions
    if (testConds) {
        if (!((gv_hardDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 4;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        autoE79F1BEF_var = 1;
        for ( ; autoE79F1BEF_var <= autoE79F1BEF_ae; autoE79F1BEF_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoE79F1BEF_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoE79F1BEF_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHard_Init () {
    gt_ActivateHard = TriggerCreate("gt_ActivateHard_Func");
    TriggerAddEventDialogControl(gt_ActivateHard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLInfantry Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_CLInfantryDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cLInfantryDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/470D6528"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -300, -340);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/11B1C03F"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cLInfantryDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cLInfantryDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_cLInfantryDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLInfantryDialogCreation_Init () {
    gt_CLInfantryDialogCreation = TriggerCreate("gt_CLInfantryDialogCreation_Func");
    TriggerAddEventMapInit(gt_CLInfantryDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate CLInfantry
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCLInfantry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD67B20E7_ae = 6;
    int autoD67B20E7_var;
    const int auto1697AF12_ae = 6;
    int auto1697AF12_var;

    // Conditions
    if (testConds) {
        if (!((gv_cLInfantryDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_votedForCLInfantry[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForCLInfantry += 1;
    gv_votesForDifficulty += 4;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers())) && (gv_votesForCLInfantry == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_leavingp, true);
        TriggerEnable(gt_OpenCloseStats, true);
        auto1697AF12_var = 1;
        for ( ; auto1697AF12_var <= auto1697AF12_ae; auto1697AF12_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto1697AF12_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto1697AF12_var), false);
        }
    }
    else {
        if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
            TriggerExecute(gt_StartingStats, true, false);
            TriggerEnable(gt_leavingp, true);
            TriggerEnable(gt_OpenCloseStats, true);
            autoD67B20E7_var = 1;
            for ( ; autoD67B20E7_var <= autoD67B20E7_ae; autoD67B20E7_var += 1 ) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoD67B20E7_var), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoD67B20E7_var), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCLInfantry_Init () {
    gt_ActivateCLInfantry = TriggerCreate("gt_ActivateCLInfantry_Func");
    TriggerAddEventDialogControl(gt_ActivateCLInfantry, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VeryHard Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_VeryHardDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_veryHardDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BECA0884"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/18870CDD"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_veryHardDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_veryHardDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_veryHardDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VeryHardDialogCreation_Init () {
    gt_VeryHardDialogCreation = TriggerCreate("gt_VeryHardDialogCreation_Func");
    TriggerAddEventMapInit(gt_VeryHardDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate VeryHard
//--------------------------------------------------------------------------------------------------
bool gt_ActivateVeryHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2FFB0730_ae = 6;
    int auto2FFB0730_var;

    // Conditions
    if (testConds) {
        if (!((gv_veryHardDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 5;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto2FFB0730_var = 1;
        for ( ; auto2FFB0730_var <= auto2FFB0730_ae; auto2FFB0730_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto2FFB0730_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto2FFB0730_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateVeryHard_Init () {
    gt_ActivateVeryHard = TriggerCreate("gt_ActivateVeryHard_Func");
    TriggerAddEventDialogControl(gt_ActivateVeryHard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLConstructor Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_CLConstructorDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cLConstructorDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9A67DAC7"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -300, -200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8ABE318B"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cLConstructorDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cLConstructorDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_cLConstructorDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLConstructorDialogCreation_Init () {
    gt_CLConstructorDialogCreation = TriggerCreate("gt_CLConstructorDialogCreation_Func");
    TriggerAddEventMapInit(gt_CLConstructorDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate CLConstructor
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCLConstructor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto43CA7906_ae = 6;
    int auto43CA7906_var;
    const int auto2065FA43_ae = 6;
    int auto2065FA43_var;

    // Conditions
    if (testConds) {
        if (!((gv_cLConstructorDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_votedForCLConstructor[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForCLConstructor += 1;
    gv_votesForDifficulty += 5;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers())) && (gv_votesForCLConstructor == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStatsNoTalents, true, false);
        TriggerEnable(gt_leavingp, true);
        auto2065FA43_var = 1;
        for ( ; auto2065FA43_var <= auto2065FA43_ae; auto2065FA43_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto2065FA43_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto2065FA43_var), false);
        }
    }
    else {
        if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
            gv_startingStatsBeenRun = true;
            TriggerExecute(gt_StartingStats, true, false);
            TriggerEnable(gt_leavingp, true);
            TriggerEnable(gt_OpenCloseStats, true);
            auto43CA7906_var = 1;
            for ( ; auto43CA7906_var <= auto43CA7906_ae; auto43CA7906_var += 1 ) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto43CA7906_var), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto43CA7906_var), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCLConstructor_Init () {
    gt_ActivateCLConstructor = TriggerCreate("gt_ActivateCLConstructor_Func");
    TriggerAddEventDialogControl(gt_ActivateCLConstructor, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutal Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_BrutalDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_brutalDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/48B97493"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -60);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/F5464A9E"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_brutalDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_brutalDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_brutalDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutalDialogCreation_Init () {
    gt_BrutalDialogCreation = TriggerCreate("gt_BrutalDialogCreation_Func");
    TriggerAddEventMapInit(gt_BrutalDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Brutal
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB205ADDF_ae = 6;
    int autoB205ADDF_var;

    // Conditions
    if (testConds) {
        if (!((gv_brutalDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 6;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        TriggerEnable(gt_leavingp, true);
        autoB205ADDF_var = 1;
        for ( ; autoB205ADDF_var <= autoB205ADDF_ae; autoB205ADDF_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoB205ADDF_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoB205ADDF_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBrutal_Init () {
    gt_ActivateBrutal = TriggerCreate("gt_ActivateBrutal_Func");
    TriggerAddEventDialogControl(gt_ActivateBrutal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLTeamGame Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_CLTeamGameDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cLTeamGame[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/CB51E005"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -300, -270);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/41C7F1EF"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cLTeamGame[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cLTeamGame[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_cLTeamGame[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLTeamGameDialogCreation_Init () {
    gt_CLTeamGameDialogCreation = TriggerCreate("gt_CLTeamGameDialogCreation_Func");
    TriggerAddEventMapInit(gt_CLTeamGameDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate CLTeamGame
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCLTeamGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4307DFCD_ae = 6;
    int auto4307DFCD_var;
    const int auto6FA9462D_ae = 6;
    int auto6FA9462D_var;

    // Conditions
    if (testConds) {
        if (!((gv_cLTeamGame[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_votedForCLTeamGame[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForCLTeamGame += 1;
    gv_votesForDifficulty += 6;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers())) && (gv_votesForCLTeamGame == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStatsNoTalents, true, false);
        TriggerEnable(gt_leavingp, true);
        auto6FA9462D_var = 1;
        for ( ; auto6FA9462D_var <= auto6FA9462D_ae; auto6FA9462D_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto6FA9462D_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto6FA9462D_var), false);
        }
    }
    else {
        if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
            gv_startingStatsBeenRun = true;
            TriggerExecute(gt_StartingStats, true, false);
            TriggerEnable(gt_leavingp, true);
            TriggerEnable(gt_OpenCloseStats, true);
            auto4307DFCD_var = 1;
            for ( ; auto4307DFCD_var <= auto4307DFCD_ae; auto4307DFCD_var += 1 ) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto4307DFCD_var), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto4307DFCD_var), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCLTeamGame_Init () {
    gt_ActivateCLTeamGame = TriggerCreate("gt_ActivateCLTeamGame_Func");
    TriggerAddEventDialogControl(gt_ActivateCLTeamGame, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLEvasive Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_CLEvasiveDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cLEvasiveDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7BC06A16"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -300, -130);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/EF12FC05"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cLEvasiveDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cLEvasiveDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_cLEvasiveDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLEvasiveDialogCreation_Init () {
    gt_CLEvasiveDialogCreation = TriggerCreate("gt_CLEvasiveDialogCreation_Func");
    TriggerAddEventMapInit(gt_CLEvasiveDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate CLEvasive
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCLEvasive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3AC716AF_ae = 6;
    int auto3AC716AF_var;
    const int auto0FD62050_ae = 6;
    int auto0FD62050_var;

    // Conditions
    if (testConds) {
        if (!((gv_cLEvasiveDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_votedForCLEvasive[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForCLEvasive += 1;
    gv_votesForDifficulty += 5;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers())) && (gv_votesForCLEvasive == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStatsNoTalents, true, false);
        TriggerEnable(gt_leavingp, true);
        auto0FD62050_var = 1;
        for ( ; auto0FD62050_var <= auto0FD62050_ae; auto0FD62050_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto0FD62050_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto0FD62050_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto0FD62050_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto0FD62050_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto0FD62050_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto0FD62050_var), false);
        }
    }
    else {
        if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
            gv_startingStatsBeenRun = true;
            TriggerExecute(gt_StartingStats, true, false);
            TriggerEnable(gt_leavingp, true);
            TriggerEnable(gt_OpenCloseStats, true);
            auto3AC716AF_var = 1;
            for ( ; auto3AC716AF_var <= auto3AC716AF_ae; auto3AC716AF_var += 1 ) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto3AC716AF_var), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto3AC716AF_var), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCLEvasive_Init () {
    gt_ActivateCLEvasive = TriggerCreate("gt_ActivateCLEvasive_Func");
    TriggerAddEventDialogControl(gt_ActivateCLEvasive, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Insane Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_InsaneDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_insaneDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D860F0AA"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 10);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9359F83E"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_insaneDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_insaneDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_insaneDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InsaneDialogCreation_Init () {
    gt_InsaneDialogCreation = TriggerCreate("gt_InsaneDialogCreation_Func");
    TriggerAddEventMapInit(gt_InsaneDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Insane
//--------------------------------------------------------------------------------------------------
bool gt_ActivateInsane_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0D692EC7_ae = 6;
    int auto0D692EC7_var;

    // Conditions
    if (testConds) {
        if (!((gv_insaneDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 7;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto0D692EC7_var = 1;
        for ( ; auto0D692EC7_var <= auto0D692EC7_ae; auto0D692EC7_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto0D692EC7_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto0D692EC7_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateInsane_Init () {
    gt_ActivateInsane = TriggerCreate("gt_ActivateInsane_Func");
    TriggerAddEventDialogControl(gt_ActivateInsane, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_NightmareDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_nightmareDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0266BD2C"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 80);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/66A38DAE"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_nightmareDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_nightmareDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_nightmareDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightmareDialogCreation_Init () {
    gt_NightmareDialogCreation = TriggerCreate("gt_NightmareDialogCreation_Func");
    TriggerAddEventMapInit(gt_NightmareDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Nightmare
//--------------------------------------------------------------------------------------------------
bool gt_ActivateNightmare_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto581ACCD6_ae = 6;
    int auto581ACCD6_var;

    // Conditions
    if (testConds) {
        if (!((gv_nightmareDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 8;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto581ACCD6_var = 1;
        for ( ; auto581ACCD6_var <= auto581ACCD6_ae; auto581ACCD6_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto581ACCD6_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto581ACCD6_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateNightmare_Init () {
    gt_ActivateNightmare = TriggerCreate("gt_ActivateNightmare_Func");
    TriggerAddEventDialogControl(gt_ActivateNightmare, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disaster Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_DisasterDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_disasterDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D942DA5F"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 150);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B6827E86"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_disasterDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_disasterDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_disasterDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisasterDialogCreation_Init () {
    gt_DisasterDialogCreation = TriggerCreate("gt_DisasterDialogCreation_Func");
    TriggerAddEventMapInit(gt_DisasterDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Disaster
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDisaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto68A6437C_ae = 6;
    int auto68A6437C_var;

    // Conditions
    if (testConds) {
        if (!((gv_disasterDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 9;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto68A6437C_var = 1;
        for ( ; auto68A6437C_var <= auto68A6437C_ae; auto68A6437C_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto68A6437C_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto68A6437C_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDisaster_Init () {
    gt_ActivateDisaster = TriggerCreate("gt_ActivateDisaster_Func");
    TriggerAddEventDialogControl(gt_ActivateDisaster, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaotic Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_ChaoticDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_chaoticDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D26AD7E1"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 220);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/5F6C3AFE"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_chaoticDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_chaoticDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_chaoticDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChaoticDialogCreation_Init () {
    gt_ChaoticDialogCreation = TriggerCreate("gt_ChaoticDialogCreation_Func");
    TriggerAddEventMapInit(gt_ChaoticDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Chaotic
//--------------------------------------------------------------------------------------------------
bool gt_ActivateChaotic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC901CDF4_ae = 6;
    int autoC901CDF4_var;

    // Conditions
    if (testConds) {
        if (!((gv_chaoticDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 10;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        autoC901CDF4_var = 1;
        for ( ; autoC901CDF4_var <= autoC901CDF4_ae; autoC901CDF4_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoC901CDF4_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoC901CDF4_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateChaotic_Init () {
    gt_ActivateChaotic = TriggerCreate("gt_ActivateChaotic_Func");
    TriggerAddEventDialogControl(gt_ActivateChaotic, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLTorture Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_CLTortureDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_cLTorture[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/B1CA7147"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -300, -60);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/202CA8CF"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_cLTorture[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_cLTorture[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_cLTorture[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLTortureDialogCreation_Init () {
    gt_CLTortureDialogCreation = TriggerCreate("gt_CLTortureDialogCreation_Func");
    TriggerAddEventMapInit(gt_CLTortureDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate CLTorture
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCLTorture_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC3D91A91_ae = 6;
    int autoC3D91A91_var;
    const int auto1923AABB_ae = 6;
    int auto1923AABB_var;

    // Conditions
    if (testConds) {
        if (!((gv_cLTorture[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_votedForCLTorture[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForCLTorture += 1;
    gv_votesForDifficulty += 9;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers())) && (gv_votesForCLTorture == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStatsNoTalents, true, false);
        TriggerEnable(gt_leavingp, true);
        auto1923AABB_var = 1;
        for ( ; auto1923AABB_var <= auto1923AABB_ae; auto1923AABB_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto1923AABB_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto1923AABB_var), false);
        }
    }
    else {
        if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
            gv_startingStatsBeenRun = true;
            TriggerExecute(gt_StartingStats, true, false);
            TriggerEnable(gt_leavingp, true);
            TriggerEnable(gt_OpenCloseStats, true);
            autoC3D91A91_var = 1;
            for ( ; autoC3D91A91_var <= autoC3D91A91_ae; autoC3D91A91_var += 1 ) {
                DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoC3D91A91_var), true);
                DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoC3D91A91_var), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCLTorture_Init () {
    gt_ActivateCLTorture = TriggerCreate("gt_ActivateCLTorture_Func");
    TriggerAddEventDialogControl(gt_ActivateCLTorture, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torment+ Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_TormentDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_tormentDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/46054F12"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 90);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 300);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/65F5CCFA"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tormentDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tormentDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_tormentDialog[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TormentDialogCreation_Init () {
    gt_TormentDialogCreation = TriggerCreate("gt_TormentDialogCreation_Func");
    TriggerAddEventMapInit(gt_TormentDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Torment+
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTorment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tormentDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 11;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_leavingp, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTorment_Init () {
    gt_ActivateTorment = TriggerCreate("gt_ActivateTorment_Func");
    TriggerAddEventDialogControl(gt_ActivateTorment, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torment I Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_TormentIDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_tormentIDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BBE87E35"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -410);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3A69A61E"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tormentIDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tormentIDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_tormentIDialog[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tormentIDialog[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TormentIDialogCreation_Init () {
    gt_TormentIDialogCreation = TriggerCreate("gt_TormentIDialogCreation_Func");
    TriggerAddEventMapInit(gt_TormentIDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Torment I
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTormentI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7039C9E9_ae = 6;
    int auto7039C9E9_var;

    // Conditions
    if (testConds) {
        if (!((gv_tormentIDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 12;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        auto7039C9E9_var = 1;
        for ( ; auto7039C9E9_var <= auto7039C9E9_ae; auto7039C9E9_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(auto7039C9E9_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(auto7039C9E9_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTormentI_Init () {
    gt_ActivateTormentI = TriggerCreate("gt_ActivateTormentI_Func");
    TriggerAddEventDialogControl(gt_ActivateTormentI, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torment II Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_TormentIIDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    gv_tormentIIDialog[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/01D19D3B"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -340);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E116C551"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_tormentIIDialog[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 223, 148);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_tormentIIDialog[1], c_anchorCenter, 0, 0);
    DialogControlSetVisible(gv_tormentIIDialog[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TormentIIDialogCreation_Init () {
    gt_TormentIIDialogCreation = TriggerCreate("gt_TormentIIDialogCreation_Func");
    TriggerAddEventMapInit(gt_TormentIIDialogCreation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Torment II
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTormentII_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDDB7B4CA_ae = 6;
    int autoDDB7B4CA_var;

    // Conditions
    if (testConds) {
        if (!((gv_tormentIIDialog[1] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_didYouVote[EventPlayer()] = true;
    gv_countVotingPlayers += 1;
    gv_votesForDifficulty += 13;
    DialogControlSetVisible(gv_cLTorture[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLEvasiveDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLConstructorDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLTeamGame[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cLInfantryDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_challengesDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tormentIDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_chaoticDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_disasterDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_nightmareDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_insaneDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_brutalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryHardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_hardDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_normalDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_easyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_veryEasyDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((gv_countVotingPlayers == PlayerGroupCount(gf_HumanPlayers()))) {
        gv_startingStatsBeenRun = true;
        TriggerExecute(gt_StartingStats, true, false);
        TriggerEnable(gt_OpenCloseStats, true);
        TriggerEnable(gt_leavingp, true);
        autoDDB7B4CA_var = 1;
        for ( ; autoDDB7B4CA_var <= autoDDB7B4CA_ae; autoDDB7B4CA_var += 1 ) {
            DialogControlSetVisible(gv_heroMenu[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_reaper[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_reaper2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_reaper[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_oracle[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_oracle2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_oracle[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hydralisk[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hydralisk2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hydralisk[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hybrid[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hybrid2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hybrid[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_marine[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_marine2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_marine[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_voidRay[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_voidRay2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_voidRay[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_goliath[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_goliath2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_goliath[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_viking[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_viking2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_viking[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_carrier[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_carrier2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_carrier[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_bC[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_bC2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_bC[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_zealot[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_zealot2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_zealot[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_predator[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_predator2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_predator[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_immortal[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_immortal2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_immortal[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_firebat[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_firebat2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_firebat[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_thor[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_thor2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_thor[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_vulture[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_vulture2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_vulture[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_archon[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_archon2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_archon[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hellion[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hellion2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hellion[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_siegeTank[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_siegeTank2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_siegeTank[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_reaver[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_reaver2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_reaver[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_colossus[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_colossus2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_colossus[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_stalker[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_stalker2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_stalker[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_diamondBack[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_diamondBack2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_diamondBack[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_scout[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_scout2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_scout[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_cyclone[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_cyclone2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_cyclone[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_mothership[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_mothership2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_mothership[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_ghost[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_ghost2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_ghost[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_spectre[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_spectre2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_spectre[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_darkTemplar[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_darkTemplar2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_darkTemplar[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_wraith[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_wraith2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_wraith[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_tempest[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_tempest2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_tempest[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_medic[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_medic2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_medic[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_sentry[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_sentry2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_sentry[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_highTemplar[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_highTemplar2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_highTemplar[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_adept[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_adept2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_adept[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_raven[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_raven2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_raven[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_darkMage[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_darkMage2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_darkMage[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_sCV[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_sCV2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_sCV[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_miner[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_miner2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_miner[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hercule[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hercule2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hercule[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_marauder[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_marauder2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_marauder[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_corsair[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_corsair2[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_corsair[2], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_assassinHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_assaultHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_tankHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_specialistHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_splashHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_supportHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_engineerHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_comboHero[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_heroSpawn[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_hideAll[1], PlayerGroupSingle(autoDDB7B4CA_var), true);
            DialogControlSetVisible(gv_showAll[1], PlayerGroupSingle(autoDDB7B4CA_var), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTormentII_Init () {
    gt_ActivateTormentII = TriggerCreate("gt_ActivateTormentII_Func");
    TriggerAddEventDialogControl(gt_ActivateTormentII, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddZombieStatsToZombies
//--------------------------------------------------------------------------------------------------
bool gt_AddZombieStatsToZombies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 9) || (UnitGetOwner(EventUnit()) == 10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "ZombieStats", 9, 1);
    UnitBehaviorAddPlayer(EventUnit(), "ZombieStatsVE", 9, gv_zombieStatCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddZombieStatsToZombies_Init () {
    gt_AddZombieStatsToZombies = TriggerCreate("gt_AddZombieStatsToZombies_Func");
    TriggerAddEventUnitRegion(gt_AddZombieStatsToZombies, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoShowHelp
//--------------------------------------------------------------------------------------------------
bool gt_AutoShowHelp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB0823105_ae = 8;
    int autoB0823105_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0823105_var = 1;
    for ( ; autoB0823105_var <= autoB0823105_ae; autoB0823105_var += 1 ) {
        if ((gv_playerInfo[autoB0823105_var].lv_asassinKills < 1) && (gv_playerInfo[autoB0823105_var].lv_singleTargetKills < 1) && (gv_playerInfo[autoB0823105_var].lv_builderKills < 1) && (gv_playerInfo[autoB0823105_var].lv_tankKills < 1) && (gv_playerInfo[autoB0823105_var].lv_supportKills < 1) && (gv_playerInfo[autoB0823105_var].lv_specialistKills < 1) && (gv_playerInfo[autoB0823105_var].lv_splashKills < 1)) {
            HelpPanelDisplayPage(PlayerGroupSingle(autoB0823105_var), c_helpPanelPageTips);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoShowHelp_Init () {
    gt_AutoShowHelp = TriggerCreate("gt_AutoShowHelp_Func");
    TriggerAddEventTimeElapsed(gt_AutoShowHelp, 31.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateTips
//--------------------------------------------------------------------------------------------------
bool gt_CreateTips_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/06F07325"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A5D8E23B"), StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/65BA30AC"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/BE19CF8E"), StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTips_Init () {
    gt_CreateTips = TriggerCreate("gt_CreateTips_Func");
    TriggerAddEventMapInit(gt_CreateTips);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_SecretBundle3Units_Init();
    gt_GoldenBundle10Units_Init();
    gt_MotherShipOnlySkins_Init();
    gt_TempestOnlySkins_Init();
    gt_CarrierOnlySkins_Init();
    gt_ColossusOnlySkin_Init();
    gt_BuilderBundle5Units_Init();
    gt_CorsairOnlySkins_Init();
    gt_MarauderOnlySkins_Init();
    gt_HealBossMove_Init();
    gt_LeftBossDies_Init();
    gt_HealBossMove2_Init();
    gt_RightBossDies_Init();
    gt_AddAllStats_Init();
    gt_ShowHideStats_Init();
    gt_OpenCloseStats_Init();
    gt_StatsMenuCreation_Init();
    gt_MenuTextCreation_Init();
    gt_DamageTextCreation_Init();
    gt_DamageCountCreation_Init();
    gt_AddDamageCreation_Init();
    gt_AddDamageActivate_Init();
    gt_SubtractDamageCreation_Init();
    gt_SubtractDamageActivate_Init();
    gt_MoveSpeedTextCreation_Init();
    gt_MoveSpeedCountCreation_Init();
    gt_AddMoveSpeedCreation_Init();
    gt_AddMoveSpeedActivate_Init();
    gt_SubtractMoveSpeedCreation_Init();
    gt_SubtractMoveSpeedActivate_Init();
    gt_EnergyTextCreation_Init();
    gt_EnergyCountCreation_Init();
    gt_AddEnergyCreation_Init();
    gt_AddEnergyActivate_Init();
    gt_SubtractEnergyCreation_Init();
    gt_SubtractEnergyActivate_Init();
    gt_EnergyRegenTextCreation_Init();
    gt_EnergyRegenCountCreation_Init();
    gt_AddEnergyRegenCreation_Init();
    gt_AddEnergyRegenActivate_Init();
    gt_SubtractEnergyRegenCreation_Init();
    gt_SubtractEnergyRegenActivate_Init();
    gt_CooldownTextCreation_Init();
    gt_CooldownCountCreation_Init();
    gt_AddCooldownCreation_Init();
    gt_AddCooldownActivate_Init();
    gt_SubtractCooldownCreation_Init();
    gt_SubtractCooldownActivate_Init();
    gt_LifeAmorTextCreation_Init();
    gt_LifeArmorCountCreation_Init();
    gt_AddLifeArmorCreation_Init();
    gt_AddLifeArmorActivate_Init();
    gt_SubtractLifeArmorCreation_Init();
    gt_SubtractLifeArmorActivate_Init();
    gt_ShieldArmorTextCreation_Init();
    gt_ShieldArmorCountCreation_Init();
    gt_AddShieldArmorCreation_Init();
    gt_AddShieldArmorActivate_Init();
    gt_SubtractShieldArmorCreation_Init();
    gt_SubtractShieldArmorActivate_Init();
    gt_ShieldArmorMultiplierTextCreation_Init();
    gt_ShieldArmorMultiplierCountCreation_Init();
    gt_AddShieldArmorMultiplierCreation_Init();
    gt_AddShieldArmorMultiplierActivate_Init();
    gt_SubtractShieldArmorMultiplierCreation_Init();
    gt_SubtractShieldArmorMultiplierActivate_Init();
    gt_XpTextCreation_Init();
    gt_XpCountCreation_Init();
    gt_AddXpCreation_Init();
    gt_AddXpActivate_Init();
    gt_SubtractXpCreation_Init();
    gt_SubtractXpActivate_Init();
    gt_MasteryTextCreation_Init();
    gt_MasteryCountCreation_Init();
    gt_AddMasteryCreation_Init();
    gt_AddMasteryActivate_Init();
    gt_SubtractMasteryCreation_Init();
    gt_SubtractMasteryActivate_Init();
    gt_DamageReductionTextCreation_Init();
    gt_DamageReductionCountCreation_Init();
    gt_AddDamageReductionCreation_Init();
    gt_AddDamageReductionActivate_Init();
    gt_SubtractDamageReductionCreation_Init();
    gt_SubtractDamageReductionActivate_Init();
    gt_LifeArmorMultiplierTextCreation_Init();
    gt_LifeArmorMultiplierCountCreation_Init();
    gt_AddLifeArmorMultiplierCreation_Init();
    gt_AddLifeArmorMultiplierActivate_Init();
    gt_SubtractLifeArmorMultiplierCreation_Init();
    gt_SubtractLifeArmorMultiplierActivate_Init();
    gt_LifeTextCreation_Init();
    gt_LifeCountCreation_Init();
    gt_AddLifeCreation_Init();
    gt_AddLifeActivate_Init();
    gt_SubtractLifeCreation_Init();
    gt_SubtractLifeActivate_Init();
    gt_ShieldTextCreation_Init();
    gt_ShieldCountCreation_Init();
    gt_AddShieldCreation_Init();
    gt_AddShieldActivate_Init();
    gt_SubtractShieldCreation_Init();
    gt_SubtractShieldActivate_Init();
    gt_ShieldRegenTextCreation_Init();
    gt_ShieldRegenCountCreation_Init();
    gt_AddShieldRegenCreation_Init();
    gt_AddShieldRegenActivate_Init();
    gt_SubtractShieldRegenCreation_Init();
    gt_SubtractShieldRegenActivate_Init();
    gt_MineralStartTextCreation_Init();
    gt_MineralStartCountCreation_Init();
    gt_AddMineralStartCreation_Init();
    gt_AddMineralStartActivate_Init();
    gt_VespeneStartTextCreation_Init();
    gt_VespeneStartCountCreation_Init();
    gt_AddVespeneStartCreation_Init();
    gt_AddVespeneStartActivate_Init();
    gt_RespawnTimeTextCreation_Init();
    gt_RespawnTimeCountCreation_Init();
    gt_AddRespawnTimeCreation_Init();
    gt_AddRespawnTimeActivate_Init();
    gt_LifeRegenTextCreation_Init();
    gt_LifeRegenCountCreation_Init();
    gt_AddLifeRegenCreation_Init();
    gt_AddLifeRegenActivate_Init();
    gt_SubtractLifeRegenCreation_Init();
    gt_SubtractLifeRegenActivate_Init();
    gt_GameVarient1_Init();
    gt_GameVarient2_Init();
    gt_DisableAll_Init();
    gt_GameVarient3_Init();
    gt_LastOneAlive_Init();
    gt_Upgrade1Search_Init();
    gt_Upgrade2Search_Init();
    gt_Upgrade3Search_Init();
    gt_Upgrade4Search_Init();
    gt_Upgrade5Search_Init();
    gt_Upgrade6Search_Init();
    gt_Upgrade7Search_Init();
    gt_UnitEntersRegionForShop_Init();
    gt_UnitLeavesRegionForShop_Init();
    gt_UnitBuysUpgrade1_Init();
    gt_UnitBuysUpgrade2_Init();
    gt_UnitBuysUpgrade3_Init();
    gt_UnitBuysUpgrade4_Init();
    gt_UnitBuysUpgrade5_Init();
    gt_UnitBuysUpgrade6_Init();
    gt_UnitBuysUpgrade7_Init();
    gt_CreateCargoTruck_Init();
    gt_TurnLateWaveTruckOn_Init();
    gt_CreateCargoTruckHighWave_Init();
    gt_Level1_Init();
    gt_Level2_Init();
    gt_Level3_Init();
    gt_Level4_Init();
    gt_Level5_Init();
    gt_Level6_Init();
    gt_Level7_Init();
    gt_Level8_Init();
    gt_Level9_Init();
    gt_Level100_Init();
    gt_LevelInfoLink_Init();
    gt_OpenCloseLevelInfo_Init();
    gt_InfoLevel1_Init();
    gt_InfoLevel2_Init();
    gt_InfoLevel3_Init();
    gt_InfoLevel4_Init();
    gt_InfoLevel5_Init();
    gt_InfoLevel6_Init();
    gt_InfoLevel7_Init();
    gt_InfoLevel8_Init();
    gt_InfoLevel9_Init();
    gt_InfoLevel10_Init();
    gt_ScanForNothingStopsMeNow_Init();
    gt_InstaBossSpawn1_Init();
    gt_InstaBossSpawn2_Init();
    gt_InstaBossSpawn3_Init();
    gt_InstaBossSpawn4_Init();
    gt_InstaBossSpawn5_Init();
    gt_InstaBossSpawn6_Init();
    gt_InstaBossSpawn7_Init();
    gt_InstaBossSpawn8_Init();
    gt_InstaBossSpawn9_Init();
    gt_InstaBossSpawn10_Init();
    gt_InstaBossSpawn11_Init();
    gt_InstaBossSpawn12_Init();
    gt_InstaBossSpawn13_Init();
    gt_InstaBossSpawn14_Init();
    gt_KelThuzadIceVisual_Init();
    gt_Boss0Create_Init();
    gt_Boss1Create_Init();
    gt_Boss2Create_Init();
    gt_Boss3Create_Init();
    gt_Boss4Create_Init();
    gt_Boss5Create_Init();
    gt_Boss6Create_Init();
    gt_G1Create_Init();
    gt_ActivateG1_Init();
    gt_G2Create_Init();
    gt_ActivateG2_Init();
    gt_G3Create_Init();
    gt_ActivateG3_Init();
    gt_DoubleKillCreate_Init();
    gt_ActivateDoubleKill_Init();
    gt_ResourcesCreate_Init();
    gt_ActivateResources_Init();
    gt_UnlockCreate_Init();
    gt_ActivateUnlock_Init();
    gt_Boss7Create_Init();
    gt_G1Create2_Init();
    gt_ActivateG4_Init();
    gt_G2Create2_Init();
    gt_ActivateG5_Init();
    gt_G3Create2_Init();
    gt_ActivateG6_Init();
    gt_DoubleKillCreate2_Init();
    gt_ActivateDoubleKill2_Init();
    gt_ResourcesCreate2_Init();
    gt_ActivateResources2_Init();
    gt_UnlockCreate2_Init();
    gt_ActivateUnlock2_Init();
    gt_Boss8Create_Init();
    gt_G1Create3_Init();
    gt_ActivateG7_Init();
    gt_G2Create3_Init();
    gt_ActivateG8_Init();
    gt_G3Create3_Init();
    gt_ActivateG9_Init();
    gt_DoubleKillCreate3_Init();
    gt_ActivateDoubleKill3_Init();
    gt_ResourcesCreate3_Init();
    gt_ActivateResources3_Init();
    gt_UnlockCreate3_Init();
    gt_ActivateUnlock3_Init();
    gt_Boss9Create_Init();
    gt_G1Create4_Init();
    gt_ActivateG10_Init();
    gt_G2Create4_Init();
    gt_ActivateG11_Init();
    gt_G3Create4_Init();
    gt_ActivateG12_Init();
    gt_DoubleKillCreate4_Init();
    gt_ActivateDoubleKill4_Init();
    gt_ResourcesCreate4_Init();
    gt_ActivateResources4_Init();
    gt_UnlockCreate4_Init();
    gt_ActivateUnlock4_Init();
    gt_Boss10Create_Init();
    gt_G1Create5_Init();
    gt_ActivateG13_Init();
    gt_G2Create5_Init();
    gt_ActivateG14_Init();
    gt_G3Create5_Init();
    gt_ActivateG15_Init();
    gt_DoubleKillCreate5_Init();
    gt_ActivateDoubleKill5_Init();
    gt_ResourcesCreate5_Init();
    gt_ActivateResources5_Init();
    gt_UnlockCreate5_Init();
    gt_ActivateUnlock5_Init();
    gt_Boss11Create_Init();
    gt_G1Create6_Init();
    gt_ActivateG16_Init();
    gt_G2Create6_Init();
    gt_ActivateG17_Init();
    gt_G3Create6_Init();
    gt_ActivateG18_Init();
    gt_DoubleKillCreate6_Init();
    gt_ActivateDoubleKill6_Init();
    gt_ResourcesCreate6_Init();
    gt_ActivateResources6_Init();
    gt_UnlockCreate6_Init();
    gt_ActivateUnlock6_Init();
    gt_Boss12Create_Init();
    gt_G1Create7_Init();
    gt_ActivateG19_Init();
    gt_ResourcesMCreate7_Init();
    gt_ActivateResourcesM7_Init();
    gt_G3Create7_Init();
    gt_ActivateG21_Init();
    gt_DoubleKillCreate7_Init();
    gt_ActivateDoubleKill7_Init();
    gt_ResourcesVCreate7_Init();
    gt_ActivateResourcesV7_Init();
    gt_UnlockCreate7_Init();
    gt_ActivateUnlock7_Init();
    gt_HydraUnlocked_Init();
    gt_HydraUnlockedCHECK_Init();
    gt_Boss13Create_Init();
    gt_G1Create8_Init();
    gt_ActivateG20_Init();
    gt_ResourcesMCreate8_Init();
    gt_ActivateResourcesM8_Init();
    gt_G3Create8_Init();
    gt_ActivateG22_Init();
    gt_DoubleKillCreate8_Init();
    gt_ActivateDoubleKill8_Init();
    gt_ResourcesVCreate8_Init();
    gt_ActivateResourcesV8_Init();
    gt_UnlockCreate8_Init();
    gt_ActivateUnlock8_Init();
    gt_DreadLord_Init();
    gt_Intoduction_Init();
    gt_TruckDies_Init();
    gt_SpawnMiniZombie_Init();
    gt_TeleportTruckIntoMapTop_Init();
    gt_TeleportTruckOutOfMapBottom_Init();
    gt_ReApplyPingPosition_Init();
    gt_CreateObjective_Init();
    gt_CollectsCrate1_Init();
    gt_CollectsCrate2_Init();
    gt_CollectsCrate3_Init();
    gt_CollectsCrate4_Init();
    gt_CollectsCrate5_Init();
    gt_CollectsCrate6_Init();
    gt_CollectsCrate7_Init();
    gt_CollectsCrate8_Init();
    gt_ReturnCrate_Init();
    gt_LavaPain_Init();
    gt_FactoryDies_Init();
    gt_DamageCap_Init();
    gt_bronzesds_Init();
    gt_DEVELOPERHACKTOOL_Init();
    gt_AutoBurrow_Init();
    gt_IncreaseReturnAmount_Init();
    gt_InvulnerableLife_Init();
    gt_ShadowFuryUpgradeFixerDisable_Init();
    gt_YamatoDamageMultiplier_Init();
    gt_ShowPlasmaStacks_Init();
    gt_IncreasePlasmaStacks_Init();
    gt_DecreasePlasmaStacks_Init();
    gt_CreateInitially_Init();
    gt_MaxOf15_Init();
    gt_DontMoveBabies_Init();
    gt_KeepFollowingScout_Init();
    gt_KillSoon_Init();
    gt_WeaponTheif_Init();
    gt_Orbit_Init();
    gt_RPGThrusters_Init();
    gt_BIgArmor_Init();
    gt_Unburrow_Init();
    gt_TurnonSpeedCooldown_Init();
    gt_SpeedCooldowns_Init();
    gt_BacktoAssault_Init();
    gt_ARattack_Init();
    gt_SRattack_Init();
    gt_AddARammo_Init();
    gt_AddSRammo_Init();
    gt_ApplyStrikiingRoundAR_Init();
    gt_ApplyStrikiingRoundSR_Init();
    gt_MarauderUpgradesCostMoney_Init();
    gt_TurnOffBlaster_Init();
    gt_TurnOnBlaster_Init();
    gt_ColossusDetonation_Init();
    gt_Smellslikevictoryaction_Init();
    gt_HideUpgrades_Init();
    gt_EmitterToggle_Init();
    gt_EmitterApply_Init();
    gt_KillRobo_Init();
    gt_KillPylon_Init();
    gt_KillAura_Init();
    gt_EnergyFix_Init();
    gt_EnergyRemove_Init();
    gt_EnergyFixPt1_Init();
    gt_EnergyFixPt2_Init();
    gt_EnergyFixPt3_Init();
    gt_EnergyFixPt4_Init();
    gt_EnergyFixPt5_Init();
    gt_EnergyFixPt6_Init();
    gt_CloakingSpray_Init();
    gt_RemoveOldSkel_Init();
    gt_DestroyProjectiles_Init();
    gt_RankUp_Init();
    gt_TurnGenerateMineralsOff_Init();
    gt_GenerateMinerals_Init();
    gt_SpawnHybrid_Init();
    gt_SelfEnergyHeal_Init();
    gt_SpecStatsKeneticRatio_Init();
    gt_CriticalStrikeNumbers_Init();
    gt_SkadooshAbsorb_Init();
    gt_DealDamage_Init();
    gt_DamageBonusSkadoosh_Init();
    gt_SpecStatsSkadooshRadius_Init();
    gt_ResourceAura_Init();
    gt_TurnToChicken_Init();
    gt_AddIncomeAura_Init();
    gt_AddIncomeAura2_Init();
    gt_AddIncomeAura3_Init();
    gt_AddIncomeAura4_Init();
    gt_AddIncomeAura5_Init();
    gt_AddIncomeAura6_Init();
    gt_RemoveIncomeAura_Init();
    gt_RemoveIncomeAura2_Init();
    gt_RemoveIncomeAura3_Init();
    gt_RemoveIncomeAura4_Init();
    gt_RemoveIncomeAura5_Init();
    gt_RemoveIncomeAura6_Init();
    gt_KillsBuff_Init();
    gt_DMGCHECK_Init();
    gt_KerriganDealsDamage_Init();
    gt_PeriodicReleaseEnergetic1_Init();
    gt_PeriodicReleaseEnergetic2_Init();
    gt_PeriodicReleaseEnergetic3_Init();
    gt_PeriodicReleaseEnergetic4_Init();
    gt_PeriodicReleaseEnergetic5_Init();
    gt_PeriodicReleaseEnergetic6_Init();
    gt_Speed_Init();
    gt_UniqueHeroAccess1_Init();
    gt_UniqueHeroAccess2_Init();
    gt_UniqueHeroAccess3_Init();
    gt_UniqueHeroAccess4_Init();
    gt_UniqueHeroAccess5_Init();
    gt_UniqueHeroAccess6_Init();
    gt_VotingShow_Init();
    gt_MapStartHideAll_Init();
    gt_HideAllCreation_Init();
    gt_ActivateHideAll_Init();
    gt_ShowAllCreation_Init();
    gt_ActivateShowAll_Init();
    gt_HeroMenuCreation_Init();
    gt_HeroIconCreation_Init();
    gt_HeroIconReqCreation_Init();
    gt_HeroSpawnCreation_Init();
    gt_ActivateHeroSpawn_Init();
    gt_MaxXP_Init();
    gt_SlowBuffApply_Init();
    gt_FairXP_Init();
    gt_CreationApply_Init();
    gt_TinyxpToMain_Init();
    gt_MainLevelUpApply_Init();
    gt_Alarak_Init();
    gt_Artanis_Init();
    gt_Kerrigan_Init();
    gt_BronzeHero_Init();
    gt_DA_Init();
    gt_TrollBerseker_Init();
    gt_Raven_Init();
    gt_Assassin_Init();
    gt_Banshee_Init();
    gt_GimmeTPDammitTKS_Init();
    gt_ReaperCreation_Init();
    gt_ActivateReaper_Init();
    gt_ReaperCreation2_Init();
    gt_ActivateReaper2_Init();
    gt_OracleCreation_Init();
    gt_ActivateOracle_Init();
    gt_OracleCreation2_Init();
    gt_ActivateOracle2_Init();
    gt_DarkMageCreation_Init();
    gt_ActivateDarkMage_Init();
    gt_DarkMageCreation2_Init();
    gt_ActivateDarkMage2_Init();
    gt_HydraliskCreation_Init();
    gt_ActivateHydralisk_Init();
    gt_HydraliskCreation2_Init();
    gt_ActivateHydralisk2_Init();
    gt_ComboHeroCreation_Init();
    gt_ActivateComboHero_Init();
    gt_SCVCreation_Init();
    gt_ActivateSCV_Init();
    gt_SCVCreation2_Init();
    gt_ActivateSCV2_Init();
    gt_MinerCreation_Init();
    gt_ActivateMiner_Init();
    gt_MinerCreation2_Init();
    gt_ActivateMiner2_Init();
    gt_HerculeCreation_Init();
    gt_ActivateHercule_Init();
    gt_HerculeCreation2_Init();
    gt_ActivateHercule2_Init();
    gt_MarauderCreation_Init();
    gt_ActivateMarauder_Init();
    gt_MarauderCreation2_Init();
    gt_ActivateMarauder2_Init();
    gt_CorsairCreation_Init();
    gt_ActivateCorsair_Init();
    gt_CorsairCreation2_Init();
    gt_ActivateCorsair2_Init();
    gt_EngineerHeroCreation_Init();
    gt_ActivateEngineerHero_Init();
    gt_VultureCreation_Init();
    gt_ActivateVulture_Init();
    gt_VultureCreation2_Init();
    gt_ActivateVulture2_Init();
    gt_ArchonCreation_Init();
    gt_ActivateArchon_Init();
    gt_ArchonCreation2_Init();
    gt_ActivateArchon2_Init();
    gt_HellionCreation_Init();
    gt_ActivateHellion_Init();
    gt_HellionCreation2_Init();
    gt_ActivateHellion2_Init();
    gt_SiegeTankCreation_Init();
    gt_ActivateSiegeTank_Init();
    gt_SiegeTankCreation2_Init();
    gt_ActivateSiegeTank2_Init();
    gt_ReaverCreation_Init();
    gt_ActivateReaver_Init();
    gt_ReaverCreation2_Init();
    gt_ActivateReaver2_Init();
    gt_ColossusCreation_Init();
    gt_ActivateColossus_Init();
    gt_ColossusCreation2_Init();
    gt_ActivateColossus2_Init();
    gt_SplashHeroCreation_Init();
    gt_ActivateSplashHero_Init();
    gt_MarineCreation_Init();
    gt_ActivateMarine_Init();
    gt_MarineCreation2_Init();
    gt_ActivateMarine2_Init();
    gt_VoidRayCreation_Init();
    gt_ActivateVoidRay_Init();
    gt_VoidRayCreation2_Init();
    gt_ActivateVoidRay2_Init();
    gt_GoliathCreation_Init();
    gt_ActivateGoliath_Init();
    gt_GoliathCreation2_Init();
    gt_ActivateGoliath2_Init();
    gt_VikingCreation_Init();
    gt_ActivateViking_Init();
    gt_VikingCreation2_Init();
    gt_ActivateViking2_Init();
    gt_CarrierCreation_Init();
    gt_ActivateCarrier_Init();
    gt_CarrierCreation2_Init();
    gt_ActivateCarrier2_Init();
    gt_BCCreation_Init();
    gt_ActivateBC_Init();
    gt_BCCreation2_Init();
    gt_ActivateBC2_Init();
    gt_AssaultHeroCreation_Init();
    gt_ActivateAssaultHero_Init();
    gt_ZealotCreation_Init();
    gt_ActivateZealot_Init();
    gt_ZealotCreation2_Init();
    gt_ActivateZealot2_Init();
    gt_PredatorCreation_Init();
    gt_ActivatePredator_Init();
    gt_PredatorCreation2_Init();
    gt_ActivatePredator2_Init();
    gt_ImmortalCreation_Init();
    gt_ActivateImmortal_Init();
    gt_ImmortalCreation2_Init();
    gt_ActivateImmortal2_Init();
    gt_FirebatCreation_Init();
    gt_ActivateFirebat_Init();
    gt_FirebatCreation2_Init();
    gt_ActivateFirebat2_Init();
    gt_ThorCreation_Init();
    gt_ActivateThor_Init();
    gt_ThorCreation2_Init();
    gt_ActivateThor2_Init();
    gt_HybridCreation_Init();
    gt_ActivateHybrid_Init();
    gt_HybridCreation2_Init();
    gt_ActivateHybrid2_Init();
    gt_TankHeroCreation_Init();
    gt_ActivateTankHero_Init();
    gt_StalkerCreation_Init();
    gt_ActivateStalker_Init();
    gt_StalkerCreation2_Init();
    gt_ActivateStalker2_Init();
    gt_DiamondBackCreation_Init();
    gt_ActivateDiamondBack_Init();
    gt_DiamondBackCreation2_Init();
    gt_ActivateDiamondBack2_Init();
    gt_ScoutCreation_Init();
    gt_ActivateScout_Init();
    gt_ScoutCreation2_Init();
    gt_ActivateScout2_Init();
    gt_CycloneCreation_Init();
    gt_ActivateCyclone_Init();
    gt_CycloneCreation2_Init();
    gt_ActivateCyclone2_Init();
    gt_MothershipCreation_Init();
    gt_ActivateMothership_Init();
    gt_MothershipCreation2_Init();
    gt_ActivateMothership2_Init();
    gt_SpecialistHeroCreation_Init();
    gt_ActivateSpecialistHero_Init();
    gt_GhostCreation_Init();
    gt_ActivateGhost_Init();
    gt_GhostCreation2_Init();
    gt_ActivateGhost2_Init();
    gt_SpectreCreation_Init();
    gt_ActivateSpectre_Init();
    gt_SpectreCreation2_Init();
    gt_ActivateSpectre2_Init();
    gt_DarkTemplarCreation_Init();
    gt_ActivateDarkTemplar_Init();
    gt_DarkTemplarCreation2_Init();
    gt_ActivateDarkTemplar2_Init();
    gt_WraithCreation_Init();
    gt_ActivateWraith_Init();
    gt_WraithCreation2_Init();
    gt_ActivateWraith2_Init();
    gt_TempestCreation_Init();
    gt_ActivateTempest_Init();
    gt_TempestCreation2_Init();
    gt_ActivateTempest2_Init();
    gt_AssassinHeroCreation_Init();
    gt_ActivateAssassinHero_Init();
    gt_MedicCreation_Init();
    gt_ActivateMedic_Init();
    gt_MedicCreation2_Init();
    gt_ActivateMedic2_Init();
    gt_SentryCreation_Init();
    gt_ActivateSentry_Init();
    gt_SentryCreation2_Init();
    gt_ActivateSentry2_Init();
    gt_HighTemplarCreation_Init();
    gt_ActivateHighTemplar_Init();
    gt_HighTemplarCreation2_Init();
    gt_ActivateHighTemplar2_Init();
    gt_AdeptCreation_Init();
    gt_ActivateAdept_Init();
    gt_AdeptCreation2_Init();
    gt_ActivateAdept2_Init();
    gt_RavenCreation_Init();
    gt_ActivateRaven_Init();
    gt_Raven2Creation_Init();
    gt_ActivateRaven2_Init();
    gt_SupportHeroCreation_Init();
    gt_ActivateSupportHero_Init();
    gt_MarineEvo_Init();
    gt_MedicEvo_Init();
    gt_VultureEvo_Init();
    gt_GhostEvo_Init();
    gt_ZealotEvo_Init();
    gt_StalkerEvo_Init();
    gt_ReaperEvo_Init();
    gt_VoidRayEvo_Init();
    gt_HybridEvo_Init();
    gt__145_Init();
    gt__61_Init();
    gt__146_Init();
    gt_Playerdies_Init();
    gt_kill_Init();
    gt_SpawnNow_Init();
    gt_EndGameCondition_Init();
    gt_Respawn_Init();
    gt_RespawnCLInfantry_Init();
    gt_RespawnCLTeamGame_Init();
    gt_RespawnCLConstructor_Init();
    gt_RespawnCLEvasive_Init();
    gt_RespawnCLTorture_Init();
    gt_RespawnChallengeMode_Init();
    gt_EndGame_Init();
    gt_BlacklistHackers_Init();
    gt_PlayerID_Init();
    gt_TeamID_Init();
    gt_ResourceTrading_Init();
    gt_ShowCommands_Init();
    gt_Minimap_Init();
    gt_GrantPlayer9Vision_Init();
    gt_gimmethatsight_Init();
    gt_gimmeblindbats_Init();
    gt_Removeleavingplayersminerals_Init();
    gt_RemoveLeftPlayerMineral_Init();
    gt_ShowMap_Init();
    gt_DisableSimpleCommandcardandtags_Init();
    gt_Showmap1_Init();
    gt__75KILLREDUCTION_Init();
    gt_Mapcleanup_Init();
    gt_CHEATFORKILLSAdminOnly_Init();
    gt_CHEATFORKILLSHelpAFriend_Init();
    gt_CHEATFORKILLSHelpP3Friend_Init();
    gt_CHEATFORKILLSBullyFriend_Init();
    gt_CHEATFORKILLSBullyP3Friend_Init();
    gt_CHEATFORKILLSAdminOnly2_Init();
    gt_CHEATFORKILLSAdminOnlyremovekills_Init();
    gt_leaderboardhelp_Init();
    gt_maxstukovzombies_Init();
    gt_thisgameleader_Init();
    gt_overallleader_Init();
    gt_waveboard_Init();
    gt_StartingStats_Init();
    gt_StartingStatsNoTalents_Init();
    gt_KillTracker_Init();
    gt_showjungle_Init();
    gt_setthestupidfontsizeofleaderbaord_Init();
    gt__1minperkill_Init();
    gt_leavingp_Init();
    gt_cheezyFixForPlayer1HighestWaveShowsCurrentWaveInstead_Init();
    gt_NonoZone_Init();
    gt_NonoZone2_Init();
    gt_by_Init();
    gt_getoutofspawn1_Init();
    gt_getoutofspawn2_Init();
    gt_getoutofspawn3_Init();
    gt_getoutofspawn4_Init();
    gt_getoutofspawn5_Init();
    gt_getoutofspawn6_Init();
    gt_getoutofspawn7_Init();
    gt_getoutofspawn8_Init();
    gt_getoutofspawn82_Init();
    gt_MoveBack1_Init();
    gt_MoveBack2_Init();
    gt_MoveBack3_Init();
    gt_MoveBack4_Init();
    gt_MoveBack5_Init();
    gt_MoveBack6_Init();
    gt_MoveBack7_Init();
    gt_MoveBack8_Init();
    gt_MoveBack9_Init();
    gt_MoveToCenter_Init();
    gt_GrantToOffspring_Init();
    gt_GrantKil_Init();
    gt_stats_Init();
    gt_SpeedGloveDialogCreations_Init();
    gt_ShowHIdeSpeedGlove_Init();
    gt_ActivateSpeedGlove_Init();
    gt_SpeedSpecialtiesCreations_Init();
    gt_ShowHIdeSpeedSpecialties_Init();
    gt_ActivateSpeedSpecialties_Init();
    gt_DamageBonusDialogCreations_Init();
    gt_ShowHIdeDamageBonus_Init();
    gt_ActivateDamageBonus_Init();
    gt_VisionandRangeDialogCreations_Init();
    gt_ShowHideVisionandRange_Init();
    gt_ActivateVisionandRange_Init();
    gt_SpeedBootsDialogCreation_Init();
    gt_ShowHideSpeedBoots_Init();
    gt_ActivateSpeedBoots_Init();
    gt_SpeedCooldownDialogCreation_Init();
    gt_ShowHideSpeedCooldown_Init();
    gt_ActivateSpeedCooldown_Init();
    gt_BonusVitalsDialogCreation_Init();
    gt_ShowHideBonusVitals_Init();
    gt_ActivateBonusVitals_Init();
    gt_SpecialStatscreation_Init();
    gt_ShowHIdeSpecialStats_Init();
    gt_ActivateSpecialStats_Init();
    gt_PowerUps_Init();
    gt_ToggleDamageNumbers_Init();
    gt_ShowDamageNumbersPlayer1_Init();
    gt_ShowDamageNumbersPlayer2_Init();
    gt_ShowDamageNumbersPlayer3_Init();
    gt_ShowDamageNumbersPlayer4_Init();
    gt_ShowDamageNumbersPlayer5_Init();
    gt_ShowDamageNumbersPlayer6_Init();
    gt_ShowDamageNumbersPlayer7_Init();
    gt_ShowDamageNumbersPlayer8_Init();
    gt_AddplayerstoTEAM_Init();
    gt_RemoveSpeedBuff_Init();
    gt_ReaddSpeedBuff_Init();
    gt_tozergling_Init();
    gt_toultra_Init();
    gt_tolocust_Init();
    gt_tospeedling_Init();
    gt_toghoul_Init();
    gt_tomix_Init();
    gt_tobaneling_Init();
    gt_tozombies_Init();
    gt_toburrow_Init();
    gt_tosupermix_Init();
    gt_ClassInfoLinkCreation_Init();
    gt_ActivateClassInfo_Init();
    gt_ClassInfoCreation_Init();
    gt_playerzm_Init();
    gt_moneytime_Init();
    gt_zombiekill_Init();
    gt_skip_Init();
    gt_SetWave_Init();
    gt_SetWaveez_Init();
    gt_commands_Init();
    gt_suicide_Init();
    gt_LeaverSuicide_Init();
    gt_SoloDifficultyCreation_Init();
    gt_ActivateSoloDifficulty_Init();
    gt_SoloDifficultyCreation2_Init();
    gt_ActivateSoloDifficulty2_Init();
    gt_AdjustZombiesToPlayerSkill_Init();
    gt_SoloFun_Init();
    gt_ZombieChristmasGifts_Init();
    gt_ZombieChristmasGiftReward_Init();
    gt_textcheck_Init();
    gt_ZombieTKSWavesZombieSpeedMode_Init();
    gt_ZombieTKSWavesZombie_Init();
    gt_ZombieTKSWavesZergling_Init();
    gt_ZombieTKSWavesUltra_Init();
    gt_ZombieTKSWavesLocusts_Init();
    gt_ZombieTKSWavesMix_Init();
    gt_ZombieTKSWavesLargeMix_Init();
    gt_ZombieTKSWavesZombie180_Init();
    gt_ZombieTKSWavesBurrowMix_Init();
    gt_ZombieTKSWavesMegaMix_Init();
    gt_ZombieTKSWavesSpeedling_Init();
    gt_ZombieTKSWavesGhouls_Init();
    gt_ZombieTKSWavesBrutalisk_Init();
    gt_ZombieMax_Init();
    gt_ZerglingMax_Init();
    gt_UltraMax_Init();
    gt_LocustsMax_Init();
    gt_HydraMax_Init();
    gt_BanelingMax_Init();
    gt_QueenMax_Init();
    gt_PrimalMax_Init();
    gt_SuperBanelingMax_Init();
    gt_GhoulMax_Init();
    gt_BrutaliskMax_Init();
    gt_Addunitstocounter_Init();
    gt_RemoveunitsFromZombies_Init();
    gt_AbominationLevel_Init();
    gt_Wave5Zerglings_Init();
    gt_Wave10RoachZergling_Init();
    gt_Wave15RoachZergling_Init();
    gt_Wave20Queens_Init();
    gt_Wave25RandomZombies_Init();
    gt_Wave30Hydralisk_Init();
    gt_Wave35ZerglingRoachHydraliskQueen_Init();
    gt_Wave40Ultralisk_Init();
    gt_Wave45Baneling_Init();
    gt_Wave50RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoach_Init();
    gt_Wave55Overlords_Init();
    gt_Wave60RandomAll_Init();
    gt_Wave65Ravager_Init();
    gt_Wave70TRex_Init();
    gt_Wave75RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRex_Init();
    gt_Wave80Aberration_Init();
    gt_Wave85RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberation_Init();
    gt_wave90zombiemachine_Init();
    gt_Wave95RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutalisk_Init();
    gt_Wave100InfestedSiegeTanks_Init();
    gt_Wave105RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTank_Init();
    gt_Wave110Abomination_Init();
    gt_Wave115RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbomination_Init();
    gt_Wave120Tiger_Init();
    gt_Wave125RandomZombiesZerglingsUltraliskQueenBanelingHydraliskRoachTRexAbberationMutaliskInfestedTankAbominationLurker_Init();
    gt_wave249Leviathan_Init();
    gt_wave349Leviathan2_Init();
    gt_wave998kerrigan_Init();
    gt_info_Init();
    gt_test_Init();
    gt_challenges_Init();
    gt_GrantKills_Init();
    gt_FINALWAVE_Init();
    gt_ActivateSpeedBuff3dmg14_Init();
    gt_ActivateSpeedBuff3dmg13_Init();
    gt_ModeBuffers_Init();
    gt_ReadPlayerVote_Init();
    gt_ElsePickNormal_Init();
    gt_TimeLeftToVoteDialogCreation_Init();
    gt_PeriodicAdjustTimetoVote_Init();
    gt_PeriodicAdjustTimetoVoteT_Init();
    gt_ChallengesDialogCreation_Init();
    gt_VeryEasyDialogCreation_Init();
    gt_ActivateVeryEasy_Init();
    gt_EasyDialogCreation_Init();
    gt_ActivateEasy_Init();
    gt_NormalDialogCreation_Init();
    gt_ActivateNormal_Init();
    gt_HardDialogCreation_Init();
    gt_ActivateHard_Init();
    gt_CLInfantryDialogCreation_Init();
    gt_ActivateCLInfantry_Init();
    gt_VeryHardDialogCreation_Init();
    gt_ActivateVeryHard_Init();
    gt_CLConstructorDialogCreation_Init();
    gt_ActivateCLConstructor_Init();
    gt_BrutalDialogCreation_Init();
    gt_ActivateBrutal_Init();
    gt_CLTeamGameDialogCreation_Init();
    gt_ActivateCLTeamGame_Init();
    gt_CLEvasiveDialogCreation_Init();
    gt_ActivateCLEvasive_Init();
    gt_InsaneDialogCreation_Init();
    gt_ActivateInsane_Init();
    gt_NightmareDialogCreation_Init();
    gt_ActivateNightmare_Init();
    gt_DisasterDialogCreation_Init();
    gt_ActivateDisaster_Init();
    gt_ChaoticDialogCreation_Init();
    gt_ActivateChaotic_Init();
    gt_CLTortureDialogCreation_Init();
    gt_ActivateCLTorture_Init();
    gt_TormentDialogCreation_Init();
    gt_ActivateTorment_Init();
    gt_TormentIDialogCreation_Init();
    gt_ActivateTormentI_Init();
    gt_TormentIIDialogCreation_Init();
    gt_ActivateTormentII_Init();
    gt_AddZombieStatsToZombies_Init();
    gt_AutoShowHelp_Init();
    gt_CreateTips_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
